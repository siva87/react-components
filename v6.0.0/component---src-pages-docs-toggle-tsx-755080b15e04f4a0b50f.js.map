{"version":3,"file":"component---src-pages-docs-toggle-tsx-755080b15e04f4a0b50f.js","mappings":"uRAcaA,EAAgCC,EAAAA,YAAiB,WAAyDC,GAA+C,IAArGC,EAAoG,EAApGA,aAAcC,EAAsF,EAAtFA,MAAOC,EAA+E,EAA/EA,OAAWC,GAAoE,YACjK,EAAoBL,EAAAA,SAAuBK,EAAMC,IAA1CA,EAAP,KAAWC,EAAX,KAIA,OAFAP,EAAAA,WAAgB,kBAAMO,EAAMF,EAAMC,KAASH,GAAQK,EAAAA,EAAAA,GAAS,WAAa,SAAQ,CAACH,EAAMC,KAGpF,uCAASJ,EAAT,CAAuBO,UAAWC,GAAAA,CAAW,KAAM,iBAAkB,sBAAuB,CAAEN,OAAAA,GAAUF,MAAAA,OAA5D,EAA4DA,EAAcO,aAClH,yCAAWJ,EAAX,CAAkBJ,IAAKA,EAAKQ,UAAWC,GAAAA,CAAW,uBAAwBL,EAAMI,WAAYH,GAAIA,EAAIK,KAAK,WAAWC,KAAMP,EAAMO,MAAQ,YACvIT,GACG,yBAAOM,UAAU,uBAAuBI,QAASP,GAC5CH,O,WCuBrB,EA1C6B,WACzB,IA2B0BW,EAAgB,EA3BpCC,EAAuBC,EAAQ,OAC/BC,EAAuB,cAEvBC,EAAoC,CACtC,CACIJ,IAAK,WACLK,MAAO,CACH,CACIL,IAAK,QACLM,MAAOH,EACPd,MAAO,QACPkB,YAAa,QACbC,YAAa,QAEjB,CACInB,MAAO,0BACPW,IAAK,aACLQ,YAAa,SACbC,QAhB0C,CAAC,CAAEpB,MAAO,WAAYiB,MAAO,WAAYN,IAAK,iBAqBxG,GAAmCU,EAAAA,EAAAA,GAAeN,GAA3CO,EAAP,KAAqBC,EAArB,KAAqBA,SAQrB,OACI,gBAACC,EAAA,EAAD,CACIC,SAAUb,EACVc,QAAS,gBAAC9B,EAAD,CAAQ+B,KAAK,WAAWC,UAPfjB,EAO0C,WANhE,UAAOY,EAASM,kBAAhB,aAAO,EAAqBC,MAAK,SAACC,GAAD,OAAkBA,IAASpB,MAMiBX,OAAQuB,MAAAA,OAAD,EAACA,EAAkBvB,QAASc,IAC5GkB,KAXU,4IAYVT,SAAUD,Q,6BC1CtB","sources":["webpack://react-components-docs/../lib/src/Toggle/Toggle.tsx","webpack://react-components-docs/./src/pages/docs/toggle.tsx","webpack://react-components-docs/../lib/src/Toggle/Toggle.tsx?f2f4"],"sourcesContent":["import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport \"./toggle.scss\";\n\nexport type ToggleProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Element label */\n    label?: string;\n    /** to set if the toggle is inline with other element */\n    inline?: boolean;\n    /** properties that related to div element */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** A Slide toggle allows the user to change between two states */\nexport const Toggle: React.FC<ToggleProps> = React.forwardRef(({ wrapperProps, label, inline, ...props }: ToggleProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(props.id);\n\n    React.useEffect(() => setId(props.id || (!!label ? randomId(\"toggle-\") : null)), [props.id]);\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc\", \"custom-control\", \"custom-slide-toggle\", { inline }, wrapperProps?.className)}>\n            <input {...props} ref={ref} className={classnames(\"custom-control-input\", props.className)} id={id} type=\"checkbox\" role={props.role || \"switch\"} />\n            {label && (\n                <label className=\"custom-control-label\" htmlFor={id}>\n                    {label}\n                </label>\n            )}\n        </div>\n    );\n});\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Toggle } from \"@sebgroup/react-components/Toggle\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst TogglePage: React.FC = () => {\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/Toggle/Toggle\");\n    const defaultLabel: string = \"Lorem ipsum\";\n    const defaultCheckboxControls: Array<DynamicFormOption> = [{ label: \"disabled\", value: \"disabled\", key: \"disabled\" }];\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"label\",\n                    value: defaultLabel,\n                    label: \"Label\",\n                    placeholder: \"Label\",\n                    controlType: \"Text\",\n                },\n                {\n                    label: \"Optional configurations\",\n                    key: \"checkboxes\",\n                    controlType: \"Option\",\n                    options: defaultCheckboxControls,\n                },\n            ],\n        },\n    ];\n    const [renderForm, { controls }] = useDynamicForm(fields);\n    const code: string = `<Toggle name=\"myToggle\" value={this.state.toggleValue} onChange={(event) => { this.setState({ toggleValue: event.target.checked }); }} />`;\n\n    /** check if key selected */\n    const checkSelectedKey = (key: string) => {\n        return controls.checkboxes?.find((item: string) => item === key);\n    };\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={<Toggle name=\"myToggle\" disabled={checkSelectedKey(\"disabled\")} label={(controls as any)?.label || defaultLabel} />}\n            code={code}\n            controls={renderForm()}\n        />\n    );\n};\n\nexport default TogglePage;\n","export default \"import React from \\\"react\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./toggle.scss\\\";\\n\\nexport type ToggleProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Element label */\\n    label?: string;\\n    /** to set if the toggle is inline with other element */\\n    inline?: boolean;\\n    /** properties that related to div element */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n/** A Slide toggle allows the user to change between two states */\\nexport const Toggle: React.FC<ToggleProps> = React.forwardRef(({ wrapperProps, label, inline, ...props }: ToggleProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [id, setId] = React.useState<string>(props.id);\\n\\n    React.useEffect(() => setId(props.id || (!!label ? randomId(\\\"toggle-\\\") : null)), [props.id]);\\n\\n    return (\\n        <div {...wrapperProps} className={classnames(\\\"rc\\\", \\\"custom-control\\\", \\\"custom-slide-toggle\\\", { inline }, wrapperProps?.className)}>\\n            <input {...props} ref={ref} className={classnames(\\\"custom-control-input\\\", props.className)} id={id} type=\\\"checkbox\\\" role={props.role || \\\"switch\\\"} />\\n            {label && (\\n                <label className=\\\"custom-control-label\\\" htmlFor={id}>\\n                    {label}\\n                </label>\\n            )}\\n        </div>\\n    );\\n});\\n\";"],"names":["Toggle","React","ref","wrapperProps","label","inline","props","id","setId","randomId","className","classnames","type","role","htmlFor","key","importString","require","defaultLabel","fields","items","value","placeholder","controlType","options","useDynamicForm","renderForm","controls","Docs","mainFile","example","name","disabled","checkboxes","find","item","code"],"sourceRoot":""}