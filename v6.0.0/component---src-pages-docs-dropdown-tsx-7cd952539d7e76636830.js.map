{"version":3,"file":"component---src-pages-docs-dropdown-tsx-7cd952539d7e76636830.js","mappings":"iNAMMA,EAAuBC,EAAQ,MAO/BC,EAAsB,CACxB,WACA,QACA,QACA,YACA,OACA,SACA,OACA,SACA,WACA,UACA,SACA,QACA,YACA,UACA,SACA,YACA,SACA,UACA,UACA,YAGEC,EAAoB,CAAC,OAAQ,cAAe,SAAU,gBAAiB,UAuI7E,UArI+B,WAC3B,MAA0BC,EAAAA,WAAnBC,EAAP,KAAcC,EAAd,KACA,EAAoCF,EAAAA,SAAyB,IAAtDG,EAAP,KAAmBC,EAAnB,KACA,EAAwBJ,EAAAA,SAAqC,IAAtDK,EAAP,KAAaC,EAAb,KAEA,GAAuCC,EAAAA,EAAAA,GAAe,CAClD,CACIC,IAAK,WACLC,MAAO,CACH,CAAED,IAAK,WAAYE,MAAO,WAAYC,YAAa,WAAYV,OAAO,GACtE,CAAEO,IAAK,aAAcE,MAAO,aAAcC,YAAa,WAAYV,OAAO,GAC1E,CAAEO,IAAK,YAAaE,MAAO,YAAaC,YAAa,WAAYV,OAAO,GACxE,CAAEO,IAAK,WAAYE,MAAO,WAAYC,YAAa,WAAYV,OAAO,GACtE,CAAEO,IAAK,YAAaE,MAAO,mBAAoBE,YAAa,kDAAmDD,YAAa,WAAYV,OAAO,GAC/I,CAAEO,IAAK,cAAeE,MAAO,eAAgBE,YAAa,+DAAgED,YAAa,WAAYV,OAAO,OAT/JY,EAAP,KAAyBC,EAAzB,KAAyBA,SAiDzB,OAnCAd,EAAAA,WAAgB,WACZ,IAAMe,EAAgC,GACtC,GAAID,EAASE,UAAW,CACpB,IAAIC,EAA8B,GAClCnB,EAAUoB,SAAQ,SAACC,EAAiBC,GAChCH,EAAMI,KACF,0BAAQb,IAAG,QAAUY,EAAKnB,MAAOkB,GAC5BA,IAGLG,KAAKC,OAAOH,EAAI,GAAK,MAAQA,EAAI,GAAK,IACtCL,EAAQM,KACJ,4BAAUb,IAAG,SAAWY,EAAKV,MAAOX,EAAQuB,KAAKE,MAAMJ,EAAI,MAA3D,OACSH,KAGbH,EAASW,aAAeV,EAAQM,KAAK,uBAAKb,IAAG,WAAaY,EAAKM,UAAU,sBACzET,EAAQ,YAIhBnB,EAAUoB,SAAQ,SAACC,EAAiBC,GAChCL,EAAQM,KACJ,0BAAQb,IAAG,QAAUY,EAAKnB,MAAOkB,GAC5BA,IAGLL,EAASW,aAAeH,KAAKC,OAAOH,EAAI,GAAK,MAAQA,EAAI,GAAK,GAC9DL,EAAQM,KAAK,uBAAKb,IAAG,WAAaY,EAAKM,UAAU,yBAI7DpB,EAAQS,KACT,CAACD,EAASE,UAAWF,EAASW,cAG7B,gBAAC,IAAD,CACIE,SAAU/B,EACVgC,QACI,uBAAKF,UAAU,SACX,gBAAC,IAAD,CACIzB,MAAOa,EAASe,SAAW1B,EAAaF,EACxC6B,SAAUhB,EAASe,SAAW,KAAO,SAACE,GAAD,OAAO7B,EAAS6B,EAAEC,OAAO/B,QAC9DgC,iBAAkB7B,EAClB8B,YAAY,YACZL,SAAUf,EAASe,SACnBM,WAAYrB,EAASqB,WACrBC,UAAWtB,EAASsB,UACpBC,SAAUvB,EAASuB,UAElBhC,IAIbiC,KAxGM,iNAyGNxB,SAAUD,IACV0B,KACI,gCACI,6CACA,iPAEgD,wCAFhD,yIAKA,gBAAC,IAAD,CAAaC,SAAS,cAAtB,uRAUA,yKACA,0BACI,mCACU,gDADV,KAGA,0FACkE,gDADlE,mEAGA,gBAAC,IAAD,CAAaA,SAAS,OAAtB,wOAOA,2BAEA,mCACU,yDAEV,sDAC8B,wDAD9B,2HAEc,6CAFd,yBAIA,gBAAC,IAAD,CAAaA,SAAS,cAAtB,sZ,4BC3JxB","sources":["webpack://react-components-docs/./src/pages/docs/dropdown.tsx","webpack://react-components-docs/../lib/src/Dropdown/Dropdown.tsx?5662"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Dropdown } from \"@sebgroup/react-components/Dropdown\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Dropdown/Dropdown\");\nconst code: string = `<Dropdown value={value} onChange={e => setValue(e.target.value)}>\n    <option value=\"first\">First</option>\n    <option value=\"Second\">Second</option>\n    <option value=\"third\">Third</option>\n</Dropdown>`;\n\nconst countries: string[] = [\n    \"Malaysia\",\n    \"China\",\n    \"Japan\",\n    \"Singapore\",\n    \"Iraq\",\n    \"Kuwait\",\n    \"Iran\",\n    \"Jordan\",\n    \"Slovenia\",\n    \"Germany\",\n    \"France\",\n    \"Spain\",\n    \"Nicaragua\",\n    \"Ecuador\",\n    \"Brazil\",\n    \"Argentina\",\n    \"Guinea\",\n    \"Nigeria\",\n    \"Morocco\",\n    \"Tanzania\",\n];\n\nconst regions: string[] = [\"Asia\", \"Middle east\", \"Europe\", \"South America\", \"Africa\"];\n\nconst DropdownPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<string>();\n    const [multiValue, setMultiValue] = React.useState<string[]>([]);\n    const [list, setList] = React.useState<React.ReactElement[]>([]);\n\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"multiple\", label: \"multiple\", controlType: \"Checkbox\", value: false },\n                { key: \"searchable\", label: \"searchable\", controlType: \"Checkbox\", value: false },\n                { key: \"clearable\", label: \"clearable\", controlType: \"Checkbox\", value: false },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\", value: false },\n                { key: \"useGroups\", label: \"Render in groups\", description: \"Wrap dropdown items with optgroup to group them\", controlType: \"Checkbox\", value: false },\n                { key: \"useDividers\", label: \"Add dividers\", description: \"Dividers are added using div with className dropdown-divider\", controlType: \"Checkbox\", value: false },\n            ],\n        },\n    ]);\n\n    React.useEffect(() => {\n        const newList: React.ReactElement[] = [];\n        if (controls.useGroups) {\n            let group: React.ReactElement[] = [];\n            countries.forEach((country: string, i: number) => {\n                group.push(\n                    <option key={`item-${i}`} value={country}>\n                        {country}\n                    </option>\n                );\n                if (Math.round((i + 1) / 4) === (i + 1) / 4) {\n                    newList.push(\n                        <optgroup key={`group-${i}`} label={regions[Math.floor(i / 4)]}>\n                            {[...group]}\n                        </optgroup>\n                    );\n                    controls.useDividers && newList.push(<div key={`divider-${i}`} className=\"dropdown-divider\" />);\n                    group = [];\n                }\n            });\n        } else {\n            countries.forEach((country: string, i: number) => {\n                newList.push(\n                    <option key={`item-${i}`} value={country}>\n                        {country}\n                    </option>\n                );\n                if (controls.useDividers && Math.round((i + 1) / 4) === (i + 1) / 4) {\n                    newList.push(<div key={`divider-${i}`} className=\"dropdown-divider\" />);\n                }\n            });\n        }\n        setList(newList);\n    }, [controls.useGroups, controls.useDividers]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Dropdown\n                        value={controls.multiple ? multiValue : value}\n                        onChange={controls.multiple ? null : (e) => setValue(e.target.value)}\n                        onMultipleChange={setMultiValue}\n                        placeholder=\"Select...\"\n                        multiple={controls.multiple}\n                        searchable={controls.searchable}\n                        clearable={controls.clearable}\n                        disabled={controls.disabled}\n                    >\n                        {list}\n                    </Dropdown>\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n            note={\n                <>\n                    <h4>Select multiple</h4>\n                    <p>\n                        The native select element exposes APIs similar to an HTML input element. Passing a value and retrieving a value from the element using the change event is all the same.\n                        However, if you are using the dropdown with <code>multiple</code> enabled, the native APIs will change. To get a list of the selected options in a multi-select element, you\n                        need to do the following:\n                    </p>\n                    <CodeSnippet language=\"typescript\">\n                        {`function changeHandler(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const selectedOptions: string[] = Array.from(event.target.options)\n        .filter((option) => option.selected)\n        .map((option) => option.value);\n    \n    setValue(selectedOptions);\n}`}\n                    </CodeSnippet>\n\n                    <p>This might not be as convenient to work with as the rest of the elements, therefore, we have provided 2 ways of simplifying this interaction</p>\n                    <ol>\n                        <li>\n                            Using <code>onMultipleChange</code>:\n                        </li>\n                        <p>\n                            Dropdown component allows you to pass your setter function to <code>onMultipleChange</code> directly which returns an array of selected options like this:\n                        </p>\n                        <CodeSnippet language=\"jsx\">{`<Dropdown value={value} onMultipleChange={setValue} multiple>\n    <option value=\"1\">First</option>\n    <option value=\"2\">Second</option>\n    <option value=\"3\">Third</option>\n    <option value=\"4\">Fourth</option>\n</Dropdown>`}</CodeSnippet>\n\n                        <br />\n\n                        <li>\n                            Using <code>getValueOfMultipleSelect</code>\n                        </li>\n                        <p>\n                            We also exported a method <code>getValueOfMultipleSelect</code> for you to use that will just do the extraction of the values for you. This is especially useful if you have\n                            a generic <code>changeHandler</code> method. For example:\n                        </p>\n                        <CodeSnippet language=\"typescript\">{`function genericChangeHandler(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void {\n    if (event.target.multiple) { // Dropdowns\n        setValue(getValueOfMultipleSelect(event.target));\n    } else if (event.target.type === \"checkbox\") { // Checkboxes\n        setValue(event.target.checked);\n    } else { // Everything else\n        setValue(event.target.value);\n    }\n}`}</CodeSnippet>\n                    </ol>\n                </>\n            }\n        />\n    );\n};\n\nexport default DropdownPage;\n","export default \"import React from \\\"react\\\";\\nimport { createPortal } from \\\"react-dom\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { useCombinedRefs } from \\\"../hooks/useCombinedRef\\\";\\nimport { CloseButton } from \\\"../CloseButton\\\";\\nimport { CustomDropdownItem } from \\\"./CustomDropdownItem\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator/FeedbackIndicator\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport \\\"./dropdown.scss\\\";\\n\\nexport interface DropdownText {\\n    selectAll?: string;\\n    noResult?: string;\\n    emptyList?: string;\\n    search?: string;\\n}\\n\\nconst defaultText: Required<DropdownText> = {\\n    selectAll: \\\"Select all\\\",\\n    emptyList: \\\"List is empty\\\",\\n    noResult: \\\"No result\\\",\\n    search: \\\"Search...\\\",\\n};\\n\\nexport function getValueOfMultipleSelect(selectOptions: Array<HTMLOptionElement>): string[] {\\n    return Array.from(selectOptions)\\n        .filter((option) => option.selected)\\n        .map((option) => option.value);\\n}\\n\\n// This solution is meant to fix Gatsby build which complains that document and window doesn't exist in server-side rendering\\nconst safeDocument: Document | null = typeof document !== \\\"undefined\\\" ? document : null;\\nconst safeWindow: Window | null = typeof window !== \\\"undefined\\\" ? window : null;\\n\\nexport type DropdownProps = Omit<JSX.IntrinsicElements[\\\"select\\\"], \\\"value\\\"> & {\\n    /** Props for the select's wrapper (div) */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** The value of the dropdown */\\n    value?: string | string[];\\n    /** An event triggered when a select of type multiple is changed returning an array of the selected values */\\n    onMultipleChange?: (selected: string[]) => void;\\n    /** Allows searching throw the dropdown */\\n    searchable?: boolean;\\n    /** Allows clearing the dropdown with a clear button */\\n    clearable?: boolean;\\n    /** Allows setting custom label to be displayed for selected item */\\n    selectedLabel?: string | ((value: string | string[]) => string | string[]);\\n    /** Custom texts to be dispalyed in different parts of the dropdown */\\n    text?: DropdownText;\\n    /** Indicator for error, warning or success */\\n    indicator?: Indicator;\\n};\\n\\nexport const Dropdown: React.FC<DropdownProps> = React.forwardRef(\\n    ({ wrapperProps = {}, text = {}, onMultipleChange, searchable, clearable, selectedLabel, indicator, ...props }: DropdownProps, ref) => {\\n        const [toggleId] = React.useState<string>(randomId(\\\"ddt-\\\"));\\n        const [selectAllId] = React.useState<string>(randomId(\\\"sa-\\\"));\\n        const [show, setShow] = React.useState<boolean>(false);\\n        const [allSelected, setAllSelected] = React.useState<boolean>(false);\\n        const [searchKeyword, setSearchKeyword] = React.useState<string>(\\\"\\\");\\n        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});\\n        const [label, setLabel] = React.useState<string>();\\n        const [selectRef, setSelectRef] = React.useState<HTMLSelectElement>(null);\\n        const [selectRefOptions, setSelectRefOptions] = React.useState<Array<HTMLOptionElement>>([]);\\n        const searchRef = React.useRef<HTMLInputElement>();\\n        const menuRef = React.useRef<HTMLDivElement>();\\n        const dropdownRef = React.useRef<HTMLDivElement>();\\n\\n        const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\\n\\n        const handleChange = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>) => {\\n                if (props.multiple) {\\n                    const current = selectRefOptions.find((option) => option.value == e.target.value);\\n                    current.selected = !current.selected;\\n                } else {\\n                    selectRef.value = e.target.value;\\n                    setShow(false);\\n                }\\n                selectRef.dispatchEvent(new Event(\\\"change\\\", { bubbles: true }));\\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(selectRefOptions));\\n            },\\n            [isMobile, props.multiple, onMultipleChange, selectRefOptions]\\n        );\\n\\n        const selectAll = React.useCallback(\\n            (forceValue?: boolean | React.ChangeEvent<HTMLInputElement>) => {\\n                selectRefOptions.forEach((option: HTMLOptionElement) => {\\n                    if (!option.disabled) {\\n                        option.selected = typeof forceValue === \\\"boolean\\\" ? forceValue : !allSelected;\\n                    } else {\\n                        option.selected = false;\\n                    }\\n                });\\n                typeof forceValue === \\\"boolean\\\" && (selectRef.value = \\\"\\\");\\n                selectRef.dispatchEvent(new Event(\\\"change\\\", { bubbles: true }));\\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(selectRefOptions));\\n            },\\n            [allSelected, props.multiple, selectRefOptions, selectRef]\\n        );\\n\\n        const isAllSelected = React.useCallback((): boolean => {\\n            return selectRefOptions.every((option: HTMLOptionElement) => {\\n                return option.disabled ? true : option.selected;\\n            });\\n        }, [selectRefOptions]);\\n\\n        const toggleMenu = React.useCallback(\\n            (event: React.MouseEvent<HTMLButtonElement>) => {\\n                if (show) {\\n                    setShow(false);\\n                } else {\\n                    const rect = event.currentTarget.getBoundingClientRect();\\n                    const top: number = rect.top + rect.height;\\n                    const left: number = rect.left;\\n                    const bottom: number = window.innerHeight - rect.y + 4;\\n                    const minWidth: number = rect.width;\\n                    if (window.innerHeight - top < 200) {\\n                        setMenuStyle({ minWidth, bottom, left, maxHeight: rect.y - 10 });\\n                    } else {\\n                        setMenuStyle({ minWidth, top, left, maxHeight: window.innerHeight - top - 12 });\\n                    }\\n                    setShow(true);\\n                }\\n            },\\n            [show]\\n        );\\n\\n        const onChange = React.useCallback(\\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(Array.from(event.target.options)));\\n                props.onChange && props.onChange(event);\\n            },\\n            [props.multiple, props.onChange, onMultipleChange]\\n        );\\n\\n        /** TODO: Can be extracted to a component */\\n        const getOptions = () => {\\n            const list = React.Children.map(props.children, (Child) => {\\n                if (!React.isValidElement(Child)) {\\n                    return Child;\\n                } else {\\n                    const type: string = (Child.type as any)?.name || Child.type;\\n                    const filteredBySearch = (element: React.ReactElement<any>): boolean => {\\n                        if (searchKeyword) {\\n                            if (React.isValidElement<any>(element)) {\\n                                const keyword: string = searchKeyword.toLowerCase().trim();\\n                                const text: string = String(element.props?.children).toLowerCase().trim();\\n                                return text.indexOf(keyword) < 0;\\n                            } else {\\n                                return true;\\n                            }\\n                        }\\n                        return false;\\n                    };\\n                    /** Radio buttons should be grouped with a name */\\n                    const name: string = props.multiple ? null : toggleId;\\n                    switch (type) {\\n                        case \\\"option\\\":\\n                            return filteredBySearch(Child) ? null : (\\n                                <CustomDropdownItem\\n                                    {...Child.props}\\n                                    multiple={props.multiple}\\n                                    name={name}\\n                                    value={Child.props.value}\\n                                    checked={Array.isArray(props.value) ? props.value.includes(Child.props.value) : props.value == Child.props.value}\\n                                    onChange={handleChange}\\n                                >\\n                                    {Child.props.children}\\n                                </CustomDropdownItem>\\n                            );\\n                        case \\\"optgroup\\\":\\n                            const label = <label className=\\\"optgroup-label\\\">{Child.props?.label}</label>;\\n                            return [\\n                                searchKeyword ? null : label,\\n                                ...React.Children.toArray(Child.props.children).map((groupChild: React.ReactElement<any>) => {\\n                                    return filteredBySearch(groupChild) ? null : (\\n                                        <CustomDropdownItem\\n                                            {...groupChild.props}\\n                                            multiple={props.multiple}\\n                                            name={name}\\n                                            value={groupChild.props.value}\\n                                            checked={Array.isArray(props.value) ? props.value.includes(groupChild.props.value) : props.value == groupChild.props.value}\\n                                            onChange={handleChange}\\n                                        >\\n                                            {groupChild.props.children}\\n                                        </CustomDropdownItem>\\n                                    );\\n                                }),\\n                            ];\\n                        default:\\n                            return searchKeyword ? null : Child;\\n                    }\\n                }\\n            });\\n            return list?.length ? list : searchKeyword ? <p>{text.noResult || defaultText.noResult}</p> : <p>{text.emptyList || defaultText.emptyList}</p>;\\n        };\\n\\n        const measuredSelectRef = React.useCallback((node: HTMLSelectElement) => {\\n            if (typeof ref === \\\"function\\\") {\\n                // to pass ref back to parents\\n                ref(node);\\n            } else if (!!ref) {\\n                (ref as any).current = node;\\n            }\\n            if (node !== null) {\\n                setSelectRef(node);\\n            }\\n        }, []);\\n\\n        React.useEffect(() => {\\n            !isMobile && props.multiple && setAllSelected(isAllSelected());\\n        }, [props.value, props.multiple, isAllSelected]);\\n\\n        React.useEffect(() => {\\n            !searchable && setSearchKeyword(\\\"\\\");\\n        }, [searchable]);\\n\\n        React.useEffect(() => {\\n            if (!!selectRef) {\\n                setSelectRefOptions(Array.from(selectRef.options));\\n            }\\n        }, [selectRef]);\\n\\n        React.useEffect(() => {\\n            if (!isMobile) {\\n                const detectBlur = (event: MouseEvent) => {\\n                    if (!dropdownRef.current.contains(event.target as any) && !menuRef.current.contains(event.target as any)) {\\n                        setShow(false);\\n                    }\\n                };\\n                const handleScroll = (event: WheelEvent): void => {\\n                    if (!menuRef.current.contains(event.target as any)) {\\n                        setShow(false);\\n                    }\\n                };\\n\\n                if (show) {\\n                    searchRef.current?.focus();\\n                    document.addEventListener(\\\"click\\\", detectBlur);\\n                    window.addEventListener(\\\"wheel\\\", handleScroll);\\n                } else {\\n                    document.removeEventListener(\\\"click\\\", detectBlur);\\n                    window.removeEventListener(\\\"wheel\\\", handleScroll);\\n                }\\n\\n                return () => {\\n                    document.removeEventListener(\\\"click\\\", detectBlur);\\n                    window.removeEventListener(\\\"wheel\\\", handleScroll);\\n                };\\n            }\\n        }, [show]);\\n\\n        React.useEffect(() => {\\n            if (selectedLabel && typeof selectedLabel === \\\"string\\\") {\\n                !isMobile && setLabel(selectedLabel || props.placeholder);\\n            } else if (selectedLabel && typeof selectedLabel === \\\"function\\\") {\\n                const newLabel: string | string[] = selectedLabel(props.value);\\n                !isMobile && setLabel((Array.isArray(newLabel) ? newLabel.join(\\\", \\\") : newLabel) || props.placeholder);\\n            } else {\\n                !isMobile && setLabel((Array.isArray(props.value) ? props.value.join(\\\", \\\") : props.value) || props.placeholder);\\n            }\\n        }, [props.value, props.placeholder, selectedLabel]);\\n\\n        return (\\n            <div {...wrapperProps} className={classnames(\\\"rc custom-dropdown\\\", wrapperProps.className)}>\\n                {!isMobile && (\\n                    <div className={classnames(\\\"dropdown\\\", { show, clearable })} ref={dropdownRef}>\\n                        <FeedbackIndicator type={indicator?.type} message={null}>\\n                            <button\\n                                className=\\\"btn btn-secondary dropdown-toggle\\\"\\n                                type=\\\"button\\\"\\n                                id={toggleId}\\n                                data-toggle=\\\"dropdown\\\"\\n                                aria-haspopup=\\\"true\\\"\\n                                aria-expanded=\\\"false\\\"\\n                                onClick={toggleMenu}\\n                                disabled={props.disabled}\\n                            >\\n                                <span>{label}</span>\\n                            </button>\\n                        </FeedbackIndicator>\\n                        {clearable && <CloseButton onClick={() => selectAll(false)} disabled={props.disabled} />}\\n                        {!safeDocument\\n                            ? null\\n                            : createPortal(\\n                                  <div className={classnames(\\\"rc dropdown-menu\\\", { show })} aria-labelledby={toggleId} ref={menuRef} style={{ ...menuStyle }}>\\n                                      {searchable && (\\n                                          <input\\n                                              className=\\\"form-control\\\"\\n                                              type=\\\"search\\\"\\n                                              placeholder={text.search || defaultText.search}\\n                                              value={searchKeyword}\\n                                              onChange={(e) => setSearchKeyword(e.target.value)}\\n                                              ref={searchRef}\\n                                          />\\n                                      )}\\n                                      {/* Select all button */}\\n                                      {props.multiple && !searchKeyword ? (\\n                                          React.Children.count(props.children) ? (\\n                                              <>\\n                                                  <div className=\\\"custom-control custom-checkbox select-all\\\">\\n                                                      <input id={selectAllId} name=\\\"inline\\\" type=\\\"checkbox\\\" className=\\\"custom-control-input\\\" checked={allSelected} hidden onChange={selectAll} />\\n                                                      <label className=\\\"custom-control-label\\\" htmlFor={selectAllId}>\\n                                                          {text.selectAll || defaultText.selectAll}\\n                                                      </label>\\n                                                  </div>\\n                                                  <div className=\\\"dropdown-divider\\\" />\\n                                              </>\\n                                          ) : (\\n                                              text.emptyList || defaultText.emptyList\\n                                          )\\n                                      ) : null}\\n\\n                                      {getOptions()}\\n                                  </div>,\\n                                  safeDocument.body\\n                              )}\\n                    </div>\\n                )}\\n                <FeedbackIndicator type={indicator?.type} message={indicator?.message}>\\n                    <select {...props} ref={measuredSelectRef} onChange={onChange} className={classnames(\\\"custom-select\\\", props.className)} hidden={!isMobile}>\\n                        {/* select always picks the first item by default. Therefore the first needs to be initialized here */}\\n                        {!props.value && (\\n                            <option disabled value=\\\"\\\" hidden>\\n                                {props.placeholder}\\n                            </option>\\n                        )}\\n                        {React.Children.toArray(props.children).filter((Child: any) => [\\\"option\\\", \\\"optgroup\\\"].includes(Child.type))}\\n                    </select>\\n                </FeedbackIndicator>\\n\\n                {clearable && isMobile && <CloseButton onClick={() => selectAll(false)} disabled={props.disabled} />}\\n            </div>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","countries","regions","React","value","setValue","multiValue","setMultiValue","list","setList","useDynamicForm","key","items","label","controlType","description","renderControls","controls","newList","useGroups","group","forEach","country","i","push","Math","round","floor","useDividers","className","mainFile","example","multiple","onChange","e","target","onMultipleChange","placeholder","searchable","clearable","disabled","code","note","language"],"sourceRoot":""}