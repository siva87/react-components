{"version":3,"file":"component---src-pages-docs-radiobutton-tsx-9b8d4549c586e1fc3190.js","mappings":"uMAQMA,EAAuBC,EAAQ,OAa/BC,EAAsD,CACxD,CAAEC,IAAK,QAASC,MAAO,SAAUC,MAAO,SAAUC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAA8C,CAChD,CAAEN,IAAK,aAAcC,MAAO,aAAcC,MAAO,IAAKK,YAAa,iDACnE,CAAEP,IAAK,UAAWC,MAAO,UAAWC,MAAO,IAAKK,YAAa,gGAwFjE,UArFkC,WAC9B,MAA0BC,EAAAA,SAAgC,OAAnDN,EAAP,KAAcO,EAAd,KAEA,GAAuCC,EAAAA,EAAAA,GAAe,CAClD,CACIV,IAAK,WACLW,MAAO,CACH,CAAEX,IAAK,SAAUC,MAAO,SAAUW,YAAa,WAAYV,OAAO,EAAOK,YAAa,wBACtF,CAAEP,IAAK,WAAYC,MAAO,WAAYW,YAAa,WAAYV,OAAO,GACtE,CAAEF,IAAK,YAAaC,MAAO,YAAaW,YAAa,WAAYV,OAAO,GACxE,CACIF,IAAK,oBACLC,MAAO,oBACPW,YAAa,QACbC,SAAU,YACVC,WAAW,EACXC,QAAST,EACTJ,MAAOI,EAAkB,GAAGJ,OAEhC,CACIF,IAAK,gBACLC,MAAO,iBACPW,YAAa,QACbC,SAAU,YACVC,WAAW,EACXC,QAAShB,EACTG,MAAOH,EAAW,GAAGG,WAvB9Bc,EAAP,KAAyBC,EAAzB,KAAyBA,SA6BnBC,EAAuD,MAA/BD,EAASX,kBACjCa,EAAoD,MAA/BF,EAASX,kBAC9Bc,EAAuBZ,EAAAA,SAAc,WACvC,OAAOS,EAASG,UAAY,CAAEC,KAAMJ,EAASK,cAAeC,QAAS,qBAAwB,OAC9F,CAACN,EAASG,UAAWH,EAASK,gBAEjC,OACI,gBAAC,IAAD,CACIE,SAAU3B,EACV4B,QACI,uBAAKpB,UAAU,SACX,gBAAC,IAAD,CAAYqB,KAAK,aAAaxB,MAAOA,EAAOyB,SAAU,SAACC,GAAD,OAAOnB,EAASmB,EAAEC,OAAO3B,QAAQ4B,SAAUb,MAAAA,OAAF,EAAEA,EAAUa,SAAUV,UAAWD,EAAYC,EAAY,MACpJ,gBAAC,IAAD,CAAalB,MAAM,MAAME,aAAca,EAASc,OAAS,CAAE1B,UAAW,kBAAqB,GAAIe,UAAWF,EAAeE,EAAY,MAArI,MAEI,qBAAGf,UAAU,kBAAb,0BAEJ,gBAAC,IAAD,CAAaH,MAAM,KAAKE,aAAca,EAASc,OAAS,CAAE1B,UAAW,kBAAqB,IAA1F,MAGA,gBAAC,IAAD,CAAaH,MAAM,QAAQE,aAAca,EAASc,OAAS,CAAE1B,UAAW,kBAAqB,IAA7F,WAMZ2B,KAhFM,6tBAiFNf,SAAUD,IACViB,KACI,gCACI,yCACA,2IACmH,0CADnH,+CAES,yCAFT,OAEmC,yCAGnC,2BAEA,4DACA,qIAC6G,iCAD7G,uDAGA,gBAAC,IAAD,CAAa5B,UAAU,OAAO6B,SAAS,OAAvC,yG,6BCzGpB","sources":["webpack://react-components-docs/./src/pages/docs/radiobutton.tsx","webpack://react-components-docs/../lib/src/RadioButton/RadioButton.tsx?b732"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { RadioButton, RadioGroup } from \"@sebgroup/react-components/RadioButton\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\nimport { Checkbox } from \"@sebgroup/react-components/Checkbox\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/RadioButton/RadioButton\");\nconst code: string = `{/* Use them in our RadioGroup helper component */}\n<RadioGroup name=\"test-group\" value={value} onChange={(e) => setValue(e.target.value)}>\n    <RadioButton value=\"Yes\">Yes</RadioButton>\n    <RadioButton value=\"No\">No</RadioButton>\n    <RadioButton value=\"Maybe\">Maybe</RadioButton>\n</RadioGroup>\n\n{/* Use them individually */}\n<RadioButton name=\"group-name\" value=\"Yes\" checked={value === \"Yes\"} onChange={(e) => setValue(e.target.value)}>Yes</RadioButton>\n<RadioButton name=\"group-name\" value=\"No\" checked={value === \"No\"} onChange={(e) => setValue(e.target.value)}>No</RadioButton>\n<RadioButton name=\"group-name\" value=\"Maybe\" checked={value === \"Maybe\"} onChange={(e) => setValue(e.target.value)}>Maybe</RadioButton>`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst indicatorGrouping: Array<DynamicFormOption> = [\n    { key: \"individual\", label: \"Individual\", value: \"1\", description: \"Pass an indicator to individual radio buttons\" },\n    { key: \"grouped\", label: \"Grouped\", value: \"2\", description: \"Pass an indicator to a RadioGroup or wrap a group of radio buttons with a FeedbackIndicator\" },\n];\n\nconst RadioButtonPage: React.FC = () => {\n    const [value, setValue] = React.useState<React.ReactText>(\"Yes\");\n\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"inline\", label: \"inline\", controlType: \"Checkbox\", value: false, description: \"Displays them inline\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\", value: false },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", value: false },\n                {\n                    key: \"indicatorGrouping\",\n                    label: \"Indicator choices\",\n                    controlType: \"Radio\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    options: indicatorGrouping,\n                    value: indicatorGrouping[0].value,\n                },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    controlType: \"Radio\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    options: indicators,\n                    value: indicators[0].value,\n                },\n            ],\n        },\n    ]);\n\n    const isIndividual: boolean = controls.indicatorGrouping === \"1\";\n    const isGrouped: boolean = controls.indicatorGrouping === \"2\";\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <RadioGroup name=\"test-group\" value={value} onChange={(e) => setValue(e.target.value)} disabled={controls?.disabled} indicator={isGrouped ? indicator : null}>\n                        <RadioButton value=\"Yes\" wrapperProps={controls.inline ? { className: \"d-inline-block\" } : {}} indicator={isIndividual ? indicator : null}>\n                            Yes\n                            <p className=\"text-muted m-0\">Express yourself here</p>\n                        </RadioButton>\n                        <RadioButton value=\"No\" wrapperProps={controls.inline ? { className: \"d-inline-block\" } : {}}>\n                            No\n                        </RadioButton>\n                        <RadioButton value=\"Maybe\" wrapperProps={controls.inline ? { className: \"d-inline-block\" } : {}}>\n                            Maybe\n                        </RadioButton>\n                    </RadioGroup>\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n            note={\n                <>\n                    <h4>Radio group</h4>\n                    <p>\n                        We have exported a helper component that makes it easy for you to compose a radio group. The component is name <code>RadioGroup</code>. You can apply group level properties\n                        like <code>indicator</code> or <code>disabled</code>\n                    </p>\n\n                    <br />\n\n                    <h4>Radio buttons with description</h4>\n                    <p>\n                        Radio buttons can sometimes be rendered with a description, in order to do that, you can simply render a <code>p</code> tag as children. It will look something like this:\n                    </p>\n                    <CodeSnippet className=\"card\" language=\"jsx\">\n                        {`<RadioButton>\n    Label\n    <p className=\"text-muted m-0\">Description here</p>\n</RadioButton>`}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default RadioButtonPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./radio-button.scss\\\";\\n\\nexport type RadioButtonProps<T = React.ReactText> = Omit<JSX.IntrinsicElements[\\\"input\\\"], \\\"value\\\"> & {\\n    /** Radio button value */\\n    value?: T;\\n    indicator?: Indicator;\\n    /** Props for the div wrapper around the radio input element */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \\\"Yes\\\" or \\\"No\\\". */\\nexport const RadioButton: React.FC<RadioButtonProps> = React.forwardRef(({ children, indicator, wrapperProps = {}, ...props }: RadioButtonProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [id, setId] = React.useState<string>(\\\"\\\");\\n\\n    React.useEffect(() => setId(props.id || randomId(\\\"radiobtn-\\\")), [props.id]);\\n\\n    return (\\n        <FeedbackIndicator {...indicator}>\\n            <div {...wrapperProps} className={classnames(\\\"rc radio-button\\\", wrapperProps.className)}>\\n                <label htmlFor={id} className=\\\"rc custom-radio custom-control\\\">\\n                    <input {...props} ref={ref} className={classnames(\\\"custom-control-input\\\", props.className)} type=\\\"radio\\\" id={id} />\\n                    {children && (\\n                        <label htmlFor={id} className=\\\"custom-control-label\\\">\\n                            {children}\\n                        </label>\\n                    )}\\n                </label>\\n            </div>\\n        </FeedbackIndicator>\\n    );\\n});\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","indicatorGrouping","description","React","setValue","useDynamicForm","items","controlType","rulerKey","condition","options","renderControls","controls","isIndividual","isGrouped","indicator","type","indicatorType","message","mainFile","example","name","onChange","e","target","disabled","inline","code","note","language"],"sourceRoot":""}