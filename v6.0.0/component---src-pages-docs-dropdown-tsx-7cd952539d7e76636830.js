"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[4848],{53056:function(e,n,t){t.r(n);var l=t(4769),o=t(27378),a=t(45141),s=t(75236),r=t(57518),i=t(74710),c=t(9608),p=["Malaysia","China","Japan","Singapore","Iraq","Kuwait","Iran","Jordan","Slovenia","Germany","France","Spain","Nicaragua","Ecuador","Brazil","Argentina","Guinea","Nigeria","Morocco","Tanzania"],d=["Asia","Middle east","Europe","South America","Africa"];n.default=function(){var e=o.useState(),n=e[0],t=e[1],u=o.useState([]),h=u[0],m=u[1],f=o.useState([]),g=f[0],v=f[1],b=(0,r.b)([{key:"controls",items:[{key:"multiple",label:"multiple",controlType:"Checkbox",value:!1},{key:"searchable",label:"searchable",controlType:"Checkbox",value:!1},{key:"clearable",label:"clearable",controlType:"Checkbox",value:!1},{key:"disabled",label:"disabled",controlType:"Checkbox",value:!1},{key:"useGroups",label:"Render in groups",description:"Wrap dropdown items with optgroup to group them",controlType:"Checkbox",value:!1},{key:"useDividers",label:"Add dividers",description:"Dividers are added using div with className dropdown-divider",controlType:"Checkbox",value:!1}]}]),w=b[0],y=b[1].controls;return o.useEffect((function(){var e=[];if(y.useGroups){var n=[];p.forEach((function(t,a){n.push(o.createElement("option",{key:"item-"+a,value:t},t)),Math.round((a+1)/4)===(a+1)/4&&(e.push(o.createElement("optgroup",{key:"group-"+a,label:d[Math.floor(a/4)]},(0,l.Z)(n))),y.useDividers&&e.push(o.createElement("div",{key:"divider-"+a,className:"dropdown-divider"})),n=[])}))}else p.forEach((function(n,t){e.push(o.createElement("option",{key:"item-"+t,value:n},n)),y.useDividers&&Math.round((t+1)/4)===(t+1)/4&&e.push(o.createElement("div",{key:"divider-"+t,className:"dropdown-divider"}))}));v(e)}),[y.useGroups,y.useDividers]),o.createElement(a.Z,{mainFile:c,example:o.createElement("div",{className:"w-100"},o.createElement(s.L,{value:y.multiple?h:n,onChange:y.multiple?null:function(e){return t(e.target.value)},onMultipleChange:m,placeholder:"Select...",multiple:y.multiple,searchable:y.searchable,clearable:y.clearable,disabled:y.disabled},g)),code:'<Dropdown value={value} onChange={e => setValue(e.target.value)}>\n    <option value="first">First</option>\n    <option value="Second">Second</option>\n    <option value="third">Third</option>\n</Dropdown>',controls:w(),note:o.createElement(o.Fragment,null,o.createElement("h4",null,"Select multiple"),o.createElement("p",null,"The native select element exposes APIs similar to an HTML input element. Passing a value and retrieving a value from the element using the change event is all the same. However, if you are using the dropdown with ",o.createElement("code",null,"multiple")," enabled, the native APIs will change. To get a list of the selected options in a multi-select element, you need to do the following:"),o.createElement(i.O,{language:"typescript"},"function changeHandler(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const selectedOptions: string[] = Array.from(event.target.options)\n        .filter((option) => option.selected)\n        .map((option) => option.value);\n    \n    setValue(selectedOptions);\n}"),o.createElement("p",null,"This might not be as convenient to work with as the rest of the elements, therefore, we have provided 2 ways of simplifying this interaction"),o.createElement("ol",null,o.createElement("li",null,"Using ",o.createElement("code",null,"onMultipleChange"),":"),o.createElement("p",null,"Dropdown component allows you to pass your setter function to ",o.createElement("code",null,"onMultipleChange")," directly which returns an array of selected options like this:"),o.createElement(i.O,{language:"jsx"},'<Dropdown value={value} onMultipleChange={setValue} multiple>\n    <option value="1">First</option>\n    <option value="2">Second</option>\n    <option value="3">Third</option>\n    <option value="4">Fourth</option>\n</Dropdown>'),o.createElement("br",null),o.createElement("li",null,"Using ",o.createElement("code",null,"getValueOfMultipleSelect")),o.createElement("p",null,"We also exported a method ",o.createElement("code",null,"getValueOfMultipleSelect")," for you to use that will just do the extraction of the values for you. This is especially useful if you have a generic ",o.createElement("code",null,"changeHandler")," method. For example:"),o.createElement(i.O,{language:"typescript"},'function genericChangeHandler(event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void {\n    if (event.target.multiple) { // Dropdowns\n        setValue(getValueOfMultipleSelect(event.target));\n    } else if (event.target.type === "checkbox") { // Checkboxes\n        setValue(event.target.checked);\n    } else { // Everything else\n        setValue(event.target.value);\n    }\n}')))})}},9608:function(e,n,t){t.r(n),n.default='import React from "react";\nimport { createPortal } from "react-dom";\nimport classnames from "classnames";\nimport { useCombinedRefs } from "../hooks/useCombinedRef";\nimport { CloseButton } from "../CloseButton";\nimport { CustomDropdownItem } from "./CustomDropdownItem";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator/FeedbackIndicator";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\nimport "./dropdown.scss";\n\nexport interface DropdownText {\n    selectAll?: string;\n    noResult?: string;\n    emptyList?: string;\n    search?: string;\n}\n\nconst defaultText: Required<DropdownText> = {\n    selectAll: "Select all",\n    emptyList: "List is empty",\n    noResult: "No result",\n    search: "Search...",\n};\n\nexport function getValueOfMultipleSelect(selectOptions: Array<HTMLOptionElement>): string[] {\n    return Array.from(selectOptions)\n        .filter((option) => option.selected)\n        .map((option) => option.value);\n}\n\n// This solution is meant to fix Gatsby build which complains that document and window doesn\'t exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== "undefined" ? document : null;\nconst safeWindow: Window | null = typeof window !== "undefined" ? window : null;\n\nexport type DropdownProps = Omit<JSX.IntrinsicElements["select"], "value"> & {\n    /** Props for the select\'s wrapper (div) */\n    wrapperProps?: JSX.IntrinsicElements["div"];\n    /** The value of the dropdown */\n    value?: string | string[];\n    /** An event triggered when a select of type multiple is changed returning an array of the selected values */\n    onMultipleChange?: (selected: string[]) => void;\n    /** Allows searching throw the dropdown */\n    searchable?: boolean;\n    /** Allows clearing the dropdown with a clear button */\n    clearable?: boolean;\n    /** Allows setting custom label to be displayed for selected item */\n    selectedLabel?: string | ((value: string | string[]) => string | string[]);\n    /** Custom texts to be dispalyed in different parts of the dropdown */\n    text?: DropdownText;\n    /** Indicator for error, warning or success */\n    indicator?: Indicator;\n};\n\nexport const Dropdown: React.FC<DropdownProps> = React.forwardRef(\n    ({ wrapperProps = {}, text = {}, onMultipleChange, searchable, clearable, selectedLabel, indicator, ...props }: DropdownProps, ref) => {\n        const [toggleId] = React.useState<string>(randomId("ddt-"));\n        const [selectAllId] = React.useState<string>(randomId("sa-"));\n        const [show, setShow] = React.useState<boolean>(false);\n        const [allSelected, setAllSelected] = React.useState<boolean>(false);\n        const [searchKeyword, setSearchKeyword] = React.useState<string>("");\n        const [menuStyle, setMenuStyle] = React.useState<React.CSSProperties>({});\n        const [label, setLabel] = React.useState<string>();\n        const [selectRef, setSelectRef] = React.useState<HTMLSelectElement>(null);\n        const [selectRefOptions, setSelectRefOptions] = React.useState<Array<HTMLOptionElement>>([]);\n        const searchRef = React.useRef<HTMLInputElement>();\n        const menuRef = React.useRef<HTMLDivElement>();\n        const dropdownRef = React.useRef<HTMLDivElement>();\n\n        const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\n\n        const handleChange = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>) => {\n                if (props.multiple) {\n                    const current = selectRefOptions.find((option) => option.value == e.target.value);\n                    current.selected = !current.selected;\n                } else {\n                    selectRef.value = e.target.value;\n                    setShow(false);\n                }\n                selectRef.dispatchEvent(new Event("change", { bubbles: true }));\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(selectRefOptions));\n            },\n            [isMobile, props.multiple, onMultipleChange, selectRefOptions]\n        );\n\n        const selectAll = React.useCallback(\n            (forceValue?: boolean | React.ChangeEvent<HTMLInputElement>) => {\n                selectRefOptions.forEach((option: HTMLOptionElement) => {\n                    if (!option.disabled) {\n                        option.selected = typeof forceValue === "boolean" ? forceValue : !allSelected;\n                    } else {\n                        option.selected = false;\n                    }\n                });\n                typeof forceValue === "boolean" && (selectRef.value = "");\n                selectRef.dispatchEvent(new Event("change", { bubbles: true }));\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(selectRefOptions));\n            },\n            [allSelected, props.multiple, selectRefOptions, selectRef]\n        );\n\n        const isAllSelected = React.useCallback((): boolean => {\n            return selectRefOptions.every((option: HTMLOptionElement) => {\n                return option.disabled ? true : option.selected;\n            });\n        }, [selectRefOptions]);\n\n        const toggleMenu = React.useCallback(\n            (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (show) {\n                    setShow(false);\n                } else {\n                    const rect = event.currentTarget.getBoundingClientRect();\n                    const top: number = rect.top + rect.height;\n                    const left: number = rect.left;\n                    const bottom: number = window.innerHeight - rect.y + 4;\n                    const minWidth: number = rect.width;\n                    if (window.innerHeight - top < 200) {\n                        setMenuStyle({ minWidth, bottom, left, maxHeight: rect.y - 10 });\n                    } else {\n                        setMenuStyle({ minWidth, top, left, maxHeight: window.innerHeight - top - 12 });\n                    }\n                    setShow(true);\n                }\n            },\n            [show]\n        );\n\n        const onChange = React.useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                props.multiple && onMultipleChange && onMultipleChange(getValueOfMultipleSelect(Array.from(event.target.options)));\n                props.onChange && props.onChange(event);\n            },\n            [props.multiple, props.onChange, onMultipleChange]\n        );\n\n        /** TODO: Can be extracted to a component */\n        const getOptions = () => {\n            const list = React.Children.map(props.children, (Child) => {\n                if (!React.isValidElement(Child)) {\n                    return Child;\n                } else {\n                    const type: string = (Child.type as any)?.name || Child.type;\n                    const filteredBySearch = (element: React.ReactElement<any>): boolean => {\n                        if (searchKeyword) {\n                            if (React.isValidElement<any>(element)) {\n                                const keyword: string = searchKeyword.toLowerCase().trim();\n                                const text: string = String(element.props?.children).toLowerCase().trim();\n                                return text.indexOf(keyword) < 0;\n                            } else {\n                                return true;\n                            }\n                        }\n                        return false;\n                    };\n                    /** Radio buttons should be grouped with a name */\n                    const name: string = props.multiple ? null : toggleId;\n                    switch (type) {\n                        case "option":\n                            return filteredBySearch(Child) ? null : (\n                                <CustomDropdownItem\n                                    {...Child.props}\n                                    multiple={props.multiple}\n                                    name={name}\n                                    value={Child.props.value}\n                                    checked={Array.isArray(props.value) ? props.value.includes(Child.props.value) : props.value == Child.props.value}\n                                    onChange={handleChange}\n                                >\n                                    {Child.props.children}\n                                </CustomDropdownItem>\n                            );\n                        case "optgroup":\n                            const label = <label className="optgroup-label">{Child.props?.label}</label>;\n                            return [\n                                searchKeyword ? null : label,\n                                ...React.Children.toArray(Child.props.children).map((groupChild: React.ReactElement<any>) => {\n                                    return filteredBySearch(groupChild) ? null : (\n                                        <CustomDropdownItem\n                                            {...groupChild.props}\n                                            multiple={props.multiple}\n                                            name={name}\n                                            value={groupChild.props.value}\n                                            checked={Array.isArray(props.value) ? props.value.includes(groupChild.props.value) : props.value == groupChild.props.value}\n                                            onChange={handleChange}\n                                        >\n                                            {groupChild.props.children}\n                                        </CustomDropdownItem>\n                                    );\n                                }),\n                            ];\n                        default:\n                            return searchKeyword ? null : Child;\n                    }\n                }\n            });\n            return list?.length ? list : searchKeyword ? <p>{text.noResult || defaultText.noResult}</p> : <p>{text.emptyList || defaultText.emptyList}</p>;\n        };\n\n        const measuredSelectRef = React.useCallback((node: HTMLSelectElement) => {\n            if (typeof ref === "function") {\n                // to pass ref back to parents\n                ref(node);\n            } else if (!!ref) {\n                (ref as any).current = node;\n            }\n            if (node !== null) {\n                setSelectRef(node);\n            }\n        }, []);\n\n        React.useEffect(() => {\n            !isMobile && props.multiple && setAllSelected(isAllSelected());\n        }, [props.value, props.multiple, isAllSelected]);\n\n        React.useEffect(() => {\n            !searchable && setSearchKeyword("");\n        }, [searchable]);\n\n        React.useEffect(() => {\n            if (!!selectRef) {\n                setSelectRefOptions(Array.from(selectRef.options));\n            }\n        }, [selectRef]);\n\n        React.useEffect(() => {\n            if (!isMobile) {\n                const detectBlur = (event: MouseEvent) => {\n                    if (!dropdownRef.current.contains(event.target as any) && !menuRef.current.contains(event.target as any)) {\n                        setShow(false);\n                    }\n                };\n                const handleScroll = (event: WheelEvent): void => {\n                    if (!menuRef.current.contains(event.target as any)) {\n                        setShow(false);\n                    }\n                };\n\n                if (show) {\n                    searchRef.current?.focus();\n                    document.addEventListener("click", detectBlur);\n                    window.addEventListener("wheel", handleScroll);\n                } else {\n                    document.removeEventListener("click", detectBlur);\n                    window.removeEventListener("wheel", handleScroll);\n                }\n\n                return () => {\n                    document.removeEventListener("click", detectBlur);\n                    window.removeEventListener("wheel", handleScroll);\n                };\n            }\n        }, [show]);\n\n        React.useEffect(() => {\n            if (selectedLabel && typeof selectedLabel === "string") {\n                !isMobile && setLabel(selectedLabel || props.placeholder);\n            } else if (selectedLabel && typeof selectedLabel === "function") {\n                const newLabel: string | string[] = selectedLabel(props.value);\n                !isMobile && setLabel((Array.isArray(newLabel) ? newLabel.join(", ") : newLabel) || props.placeholder);\n            } else {\n                !isMobile && setLabel((Array.isArray(props.value) ? props.value.join(", ") : props.value) || props.placeholder);\n            }\n        }, [props.value, props.placeholder, selectedLabel]);\n\n        return (\n            <div {...wrapperProps} className={classnames("rc custom-dropdown", wrapperProps.className)}>\n                {!isMobile && (\n                    <div className={classnames("dropdown", { show, clearable })} ref={dropdownRef}>\n                        <FeedbackIndicator type={indicator?.type} message={null}>\n                            <button\n                                className="btn btn-secondary dropdown-toggle"\n                                type="button"\n                                id={toggleId}\n                                data-toggle="dropdown"\n                                aria-haspopup="true"\n                                aria-expanded="false"\n                                onClick={toggleMenu}\n                                disabled={props.disabled}\n                            >\n                                <span>{label}</span>\n                            </button>\n                        </FeedbackIndicator>\n                        {clearable && <CloseButton onClick={() => selectAll(false)} disabled={props.disabled} />}\n                        {!safeDocument\n                            ? null\n                            : createPortal(\n                                  <div className={classnames("rc dropdown-menu", { show })} aria-labelledby={toggleId} ref={menuRef} style={{ ...menuStyle }}>\n                                      {searchable && (\n                                          <input\n                                              className="form-control"\n                                              type="search"\n                                              placeholder={text.search || defaultText.search}\n                                              value={searchKeyword}\n                                              onChange={(e) => setSearchKeyword(e.target.value)}\n                                              ref={searchRef}\n                                          />\n                                      )}\n                                      {/* Select all button */}\n                                      {props.multiple && !searchKeyword ? (\n                                          React.Children.count(props.children) ? (\n                                              <>\n                                                  <div className="custom-control custom-checkbox select-all">\n                                                      <input id={selectAllId} name="inline" type="checkbox" className="custom-control-input" checked={allSelected} hidden onChange={selectAll} />\n                                                      <label className="custom-control-label" htmlFor={selectAllId}>\n                                                          {text.selectAll || defaultText.selectAll}\n                                                      </label>\n                                                  </div>\n                                                  <div className="dropdown-divider" />\n                                              </>\n                                          ) : (\n                                              text.emptyList || defaultText.emptyList\n                                          )\n                                      ) : null}\n\n                                      {getOptions()}\n                                  </div>,\n                                  safeDocument.body\n                              )}\n                    </div>\n                )}\n                <FeedbackIndicator type={indicator?.type} message={indicator?.message}>\n                    <select {...props} ref={measuredSelectRef} onChange={onChange} className={classnames("custom-select", props.className)} hidden={!isMobile}>\n                        {/* select always picks the first item by default. Therefore the first needs to be initialized here */}\n                        {!props.value && (\n                            <option disabled value="" hidden>\n                                {props.placeholder}\n                            </option>\n                        )}\n                        {React.Children.toArray(props.children).filter((Child: any) => ["option", "optgroup"].includes(Child.type))}\n                    </select>\n                </FeedbackIndicator>\n\n                {clearable && isMobile && <CloseButton onClick={() => selectAll(false)} disabled={props.disabled} />}\n            </div>\n        );\n    }\n);\n'}}]);
//# sourceMappingURL=component---src-pages-docs-dropdown-tsx-7cd952539d7e76636830.js.map