{"version":3,"file":"component---src-pages-docs-tooltip-tsx-ef0153df733461bc4123.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Tooltip/useOverlay.tsx","webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isSameObject/isSameObject.js","webpack://react-components-docs/../lib/src/Tooltip/Overlay.tsx","webpack://react-components-docs/../lib/src/Tooltip/Tooltip.tsx","webpack://react-components-docs/./src/pages/docs/tooltip.tsx","webpack://react-components-docs/../lib/src/Notification/Notification.tsx","webpack://react-components-docs/../lib/src/Tooltip/Tooltip.tsx?579f"],"sourcesContent":["import React from \"react\";\nimport { isSameObject } from \"@sebgroup/frontend-tools/isSameObject\";\n\nexport type ElementPosition = \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\";\n\nexport type ElementPlacements = {\n    [key in ElementPosition]: Partial<DOMRect>;\n};\n\nexport type OverlayConfig = {\n    disableAutoPosition?: boolean;\n};\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nfunction safeDOMRect(): Partial<DOMRect> {\n    return {\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0,\n        x: 0,\n        y: 0,\n    };\n}\n\nexport function useOverlay(reference: HTMLElement, overlayReference: HTMLElement, show: boolean, presetPosition: ElementPosition = \"top\", config: OverlayConfig = {}) {\n    const defaultPositionsList: Array<ElementPosition> = React.useMemo(\n        () => [\"top\", \"left\", \"right\", \"bottom\", \"bottom-left\", \"bottom-right\", \"left-bottom\", \"left-top\", \"right-bottom\", \"right-top\", \"top-left\", \"top-right\"],\n        []\n    );\n    const positionList: Array<ElementPosition> = React.useMemo(() => defaultPositionsList.filter((item: string) => item !== presetPosition), [presetPosition, defaultPositionsList]);\n    const [referenceRect, setReferenceRect] = React.useState<Partial<DOMRect>>(safeDOMRect());\n    const [overlayRect, setOverlayRect] = React.useState<Partial<DOMRect>>(safeDOMRect());\n    const [overlayStyle, setOverlayStyle] = React.useState<CSSStyleDeclaration>();\n    const [style, setStyle] = React.useState<React.CSSProperties>({});\n    const [currentPosition, setCurrentPosition] = React.useState<ElementPosition>(presetPosition);\n\n    const getBoundingClientRect = React.useCallback(() => {\n        return reference.getBoundingClientRect();\n    }, [reference]);\n\n    const debounce = React.useCallback((callback: () => void, delay: number) => {\n        let timer: NodeJS.Timeout;\n        return function () {\n            const self: any = this;\n            const args: IArguments = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(() => callback.apply(self, args), delay);\n        };\n    }, []);\n\n    const updateRect = React.useCallback(() => {\n        const newRect: DOMRect = getBoundingClientRect();\n        if (!isSameObject(referenceRect, newRect)) {\n            setReferenceRect(newRect);\n        }\n    }, [getBoundingClientRect, referenceRect]);\n\n    const debouncedUpdateRect = React.useCallback(debounce(updateRect, 10), [debounce, updateRect]);\n\n    const parseMargin = (margin: string) => (margin ? parseInt(margin, 10) : 0);\n\n    /**\n     * check if element is overflow on certain position\n     * @param position position\n     */\n    const isOverflow = React.useCallback(\n        (currentPosition: Partial<DOMRect>) => {\n            const width: number = overlayRect?.width || 0;\n            const height: number = overlayRect?.height || 0;\n            return (\n                config.disableAutoPosition ||\n                !currentPosition ||\n                currentPosition.left < 0 ||\n                currentPosition.top < 0 ||\n                currentPosition.left + width > window.innerWidth ||\n                currentPosition.top + height > window.innerHeight\n            );\n        },\n        [overlayRect, config.disableAutoPosition]\n    );\n\n    const getTopStartingPoint = React.useCallback(() => referenceRect.top - overlayRect.height - parseMargin(overlayStyle?.marginBottom), [referenceRect, overlayRect, overlayStyle]);\n\n    const getBottomStartingPoint = React.useCallback(() => referenceRect.bottom + parseMargin(overlayStyle?.marginTop), [referenceRect, overlayStyle]);\n\n    const getSideTopStartingPoint = React.useCallback(() => referenceRect.bottom - referenceRect.height, [referenceRect, overlayRect]);\n\n    const getSideBottomStartingPoint = React.useCallback(() => referenceRect.bottom - overlayRect.height, [referenceRect, overlayRect]);\n\n    const getLeftStartingPoint = React.useCallback(() => referenceRect.left - overlayRect.width - parseMargin(overlayStyle?.marginRight), [referenceRect, overlayRect, overlayStyle]);\n\n    const getRightStartingPoint = React.useCallback(() => referenceRect.right + parseMargin(overlayStyle?.marginLeft), [referenceRect, overlayStyle]);\n\n    const getVerticalLeftStartingPoint = React.useCallback(() => referenceRect.right - overlayRect.width, [referenceRect, overlayRect]);\n\n    const getVerticalCenterStartingPoint = React.useCallback(() => referenceRect.bottom - overlayRect.height / 2 - referenceRect.height / 2, [referenceRect, overlayRect]);\n\n    const getHorizontalCenterStartingPoint = React.useCallback(() => referenceRect.left - overlayRect.width / 2 + referenceRect.width / 2, [referenceRect, overlayRect]);\n\n    const getPosition = React.useCallback(\n        (position: ElementPosition) => {\n            switch (position) {\n                case \"top-left\":\n                    return { top: getTopStartingPoint(), left: getVerticalLeftStartingPoint() };\n                case \"top-right\":\n                    return { top: getTopStartingPoint(), left: referenceRect.left };\n                case \"left\":\n                    return { top: getVerticalCenterStartingPoint(), left: getLeftStartingPoint() };\n                case \"left-top\":\n                    return { top: getSideTopStartingPoint(), left: getLeftStartingPoint() };\n                case \"left-bottom\":\n                    return { top: getSideBottomStartingPoint(), left: getLeftStartingPoint() };\n                case \"right\":\n                    return { top: getVerticalCenterStartingPoint(), left: getRightStartingPoint() };\n                case \"right-top\":\n                    return { top: getSideTopStartingPoint(), left: getRightStartingPoint() };\n                case \"right-bottom\":\n                    return { top: getSideBottomStartingPoint(), left: getRightStartingPoint() };\n                case \"bottom\":\n                    return { top: getBottomStartingPoint(), left: getHorizontalCenterStartingPoint() };\n                case \"bottom-left\":\n                    return { top: getBottomStartingPoint(), left: getVerticalLeftStartingPoint() };\n                case \"bottom-right\":\n                    return { top: getBottomStartingPoint(), left: referenceRect.left };\n                default:\n                    return { top: getTopStartingPoint(), left: getHorizontalCenterStartingPoint() };\n            }\n        },\n        [\n            referenceRect,\n            overlayRect,\n            getTopStartingPoint,\n            getBottomStartingPoint,\n            getRightStartingPoint,\n            getVerticalLeftStartingPoint,\n            getLeftStartingPoint,\n            getVerticalCenterStartingPoint,\n            getHorizontalCenterStartingPoint,\n            getSideBottomStartingPoint,\n            getSideTopStartingPoint,\n        ]\n    );\n\n    const getOverlayPosition = React.useCallback(() => {\n        setStyle(() => {\n            let currentNewPosition: ElementPosition = presetPosition;\n            let currentPositionStyle: Partial<DOMRect> = getPosition(presetPosition);\n            if (isOverflow(currentPositionStyle)) {\n                positionList.some((item: ElementPosition) => {\n                    const alternatePosition: Partial<DOMRect> = getPosition(item);\n                    const isWithinViewport: boolean = !isOverflow(alternatePosition);\n                    if (isWithinViewport) {\n                        currentPositionStyle = alternatePosition;\n                        currentNewPosition = item;\n                    }\n                    return isWithinViewport;\n                });\n            }\n            setCurrentPosition(currentNewPosition);\n            return currentPositionStyle;\n        });\n    }, [getPosition, isOverflow, overlayRect, positionList, presetPosition]);\n\n    React.useEffect(() => {\n        if (!reference) {\n            return;\n        }\n        if (show) {\n            updateRect();\n            window.addEventListener(\"scroll\", debouncedUpdateRect, true);\n        } else {\n            window.removeEventListener(\"scroll\", debouncedUpdateRect, true);\n        }\n        return () => {\n            window.removeEventListener(\"scroll\", debouncedUpdateRect, true);\n        };\n    }, [reference, show, updateRect, debouncedUpdateRect]);\n\n    React.useEffect(() => {\n        if (!!overlayReference) {\n            debouncedUpdateRect();\n            setOverlayRect(overlayReference.getBoundingClientRect());\n            setOverlayStyle(window.getComputedStyle(overlayReference));\n        }\n    }, [overlayReference, debouncedUpdateRect]);\n\n    React.useEffect(() => {\n        setCurrentPosition(presetPosition);\n    }, [presetPosition]);\n\n    React.useEffect(() => {\n        if (show) {\n            getOverlayPosition();\n        }\n    }, [getOverlayPosition, show]);\n\n    return {\n        style,\n        currentPosition,\n    };\n}\n","function t(t, e, n) {\n  if (n) {\n    var _n = Object.keys(t),\n        r = Object.keys(e);\n\n    if (_n.length === r.length) {\n      for (var i = 0; i < _n.length; i++) {\n        if (t[_n[i]] !== e[r[i]]) return !1;\n      }\n\n      return !0;\n    }\n\n    return !1;\n  }\n\n  return JSON.stringify(t) === JSON.stringify(e);\n}\n\nexport { t as isSameObject };","import React from \"react\";\nimport classnames from \"classnames\";\nimport { createPortal } from \"react-dom\";\nimport { ElementPosition, useOverlay } from \"./useOverlay\";\nimport \"./overlay.scss\";\n\nexport type OverlayProps = React.PropsWithChildren<{\n    disableAutoPosition?: boolean;\n    overlayReference: () => HTMLDivElement;\n    className?: string;\n    onBlur: (event: React.FocusEvent<HTMLDivElement>) => void;\n    show: boolean;\n    position?: ElementPosition;\n    ref?: React.Ref<HTMLDivElement>;\n}>;\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\nexport const Overlay: React.FC<OverlayProps> = React.forwardRef(({ disableAutoPosition, ...props }: OverlayProps, ref: React.RefObject<HTMLDivElement>) => {\n    const [overlayContentRef, setOverlayContentRef] = React.useState<HTMLDivElement>(null);\n    const { style, currentPosition } = useOverlay(props.overlayReference(), overlayContentRef, props.show, props.position, { disableAutoPosition });\n\n    const getOverlayContentRef = React.useCallback((node: HTMLDivElement) => {\n        if (node) {\n            setOverlayContentRef(node);\n        }\n    }, []);\n\n    const onContentBlur = (e: React.FocusEvent<HTMLDivElement>): void => {\n        const triggeredNode: Node = (e.relatedTarget as Node) || document.activeElement;\n        const isWithinTriggerNode: boolean = props.overlayReference().contains(triggeredNode);\n        if (props.show && !isWithinTriggerNode) {\n            // to check if blur event is triggered from reference element\n            props.onBlur(e);\n        } else if (isWithinTriggerNode) {\n            overlayContentRef.focus();\n        }\n    };\n\n    React.useImperativeHandle(ref, () => ({\n        ...ref.current,\n        focus: () => overlayContentRef?.focus(),\n        blur: () => overlayContentRef?.blur(),\n    }));\n\n    React.useEffect(() => {\n        !!overlayContentRef && overlayContentRef.focus();\n    }, [overlayContentRef]);\n\n    return safeDocument && props.show\n        ? createPortal(\n              <div\n                  className={classnames(\"overlay-container\", props.className, currentPosition || \"top\", { show: props.show && overlayContentRef })}\n                  ref={getOverlayContentRef}\n                  tabIndex={-1}\n                  onBlur={onContentBlur}\n                  aria-hidden={!props.show}\n                  style={style}\n              >\n                  {props.children}\n              </div>,\n              safeDocument.body\n          )\n        : null;\n});\n","import React from \"react\";\nimport { Overlay } from \"./Overlay\";\nimport classnames from \"classnames\";\nimport { ElementPosition } from \"./useOverlay\";\nimport \"./tooltip.scss\";\n\nconst InfoCircleIcon: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zm-192-92c-15.464 0-28 12.536-28 28s12.536 28 28 28 28-12.536 28-28-12.536-28-28-28zm7.67-24h-16c-6.627 0-12-5.373-12-12v-.381c0-70.343 77.44-63.619 77.44-107.408 0-20.016-17.761-40.211-57.44-40.211-29.144 0-44.265 9.649-59.211 28.692-3.908 4.98-11.054 5.995-16.248 2.376l-13.134-9.15c-5.625-3.919-6.86-11.771-2.645-17.177C153.658 133.514 178.842 116 223.67 116c52.32 0 97.44 29.751 97.44 80.211 0 67.414-77.44 63.849-77.44 107.408V304c0 6.627-5.373 12-12 12z\" />\n    </svg>\n);\n\nexport type TooltipTrigger = \"hover\" | \"click\" | \"focus\";\nexport type TooltipTheme = \"default\" | \"light\" | \"primary\" | \"warning\" | \"success\" | \"danger\" | \"purple\";\nexport type TooltipPosition = ElementPosition;\n\nexport type TooltipProps = Omit<JSX.IntrinsicElements[\"div\"], \"ref\"> & {\n    /** Css style positions: top/bottom/left/right */\n    position?: TooltipPosition;\n    /** Based on SEB predefined colors */\n    theme?: TooltipTheme;\n    /** Tooltip content */\n    content?: string | React.ReactNode;\n    /** Tooltip trigger mode */\n    trigger?: TooltipTrigger;\n    /** Force tooltip to be at certain position */\n    disableAutoPosition?: boolean;\n    /** Force show tooltip */\n    forceShow?: boolean;\n    /** callback on tooltip visibility status change */\n    onVisibleChange?: (event: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLElement> | React.TouchEvent<HTMLDivElement>, visible: boolean) => void;\n    /** tooltip content wrapper props */\n    tooltipWrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n\n// This solution is meant to fix Gatsby build which complains that document and window doesn't exist in server-side rendering\nconst safeWindow: Window | null = typeof window !== \"undefined\" ? window : null;\n\nconst isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n    className,\n    position,\n    theme,\n    content,\n    trigger = \"click\",\n    disableAutoPosition,\n    forceShow,\n    onVisibleChange,\n    tooltipWrapperProps,\n    ...props\n}: TooltipProps) => {\n    const containerRef: React.RefObject<HTMLDivElement> = React.useRef();\n    const contentRef: React.RefObject<HTMLDivElement> = React.useRef();\n    const [show, setShow] = React.useState<boolean>(false);\n\n    /**\n     * toggle tooltip\n     * @param toggle boolean\n     * @param e event triggering the changes\n     */\n    const onTooltipToggle = (e?: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>, toggle?: boolean): void => {\n        const isVisible: boolean = toggle !== undefined ? toggle : !show;\n        setShow(isVisible);\n        onVisibleChange && onVisibleChange(e, isVisible);\n    };\n\n    const onTouch = (e: React.TouchEvent<HTMLDivElement>, toggleOn: boolean) => {\n        onTooltipToggle(e, toggleOn);\n    };\n\n    const onHover = (e: React.MouseEvent<HTMLDivElement>, toggleOn: boolean) => {\n        onTooltipToggle(e, toggleOn);\n    };\n\n    const onMouseEnterEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, true);\n    const onMouseLeaveEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, false);\n    const onTouchStartEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, true);\n    const onTouchEndEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, false);\n    const onFocusEvent = (e: React.FocusEvent<HTMLDivElement>) => onTooltipToggle(e, true);\n\n    return (\n        <div className={classnames(\"tooltip-container\", className)} {...props}>\n            <div\n                ref={containerRef}\n                className={classnames(\"tooltip-reference\", { cursor: trigger === \"click\" })}\n                tabIndex={-1}\n                onClick={trigger === \"click\" ? onTooltipToggle : null}\n                onMouseEnter={trigger === \"hover\" && !isMobile ? onMouseEnterEvent : null}\n                onMouseLeave={trigger === \"hover\" && !isMobile ? onMouseLeaveEvent : null}\n                onTouchStart={trigger === \"hover\" && isMobile ? onTouchStartEvent : null}\n                onTouchEnd={trigger === \"hover\" && isMobile ? onTouchEndEvent : null}\n                onFocus={trigger === \"focus\" ? onFocusEvent : null}\n            >\n                {props.children ? (\n                    React.Children.count(props.children) === 1 ? (\n                        React.Children.map(props.children, (Child: React.ReactElement) => {\n                            return Object(Child) !== Child ? <span className=\"text-help\">{Child}</span> : Child;\n                        })\n                    ) : (\n                        props.children\n                    )\n                ) : (\n                    <div className=\"default-content\">{InfoCircleIcon}</div>\n                )}\n            </div>\n            <TooltipContentContainer\n                {...tooltipWrapperProps}\n                position={position}\n                theme={theme}\n                content={content}\n                disableAutoPosition={disableAutoPosition}\n                ref={contentRef}\n                onContentBlur={() => setShow(false)}\n                show={show || forceShow}\n                tooltipReference={() => containerRef.current}\n            />\n        </div>\n    );\n};\n\ntype TooltipContentContainerProps = JSX.IntrinsicElements[\"div\"] &\n    Pick<TooltipProps, \"theme\" | \"position\" | \"content\" | \"disableAutoPosition\"> & {\n        show: boolean;\n        tooltipReference: () => HTMLDivElement;\n        onContentBlur: (event: React.FocusEvent<HTMLDivElement>) => void;\n    };\nconst TooltipContentContainer: React.FC<TooltipContentContainerProps> = React.forwardRef(\n    ({ show, tooltipReference, theme = \"default\", position, content, disableAutoPosition, onContentBlur, ...props }: TooltipContentContainerProps, forwardedRef: React.RefObject<HTMLDivElement>) => {\n        return (\n            <Overlay ref={forwardedRef} show={show} onBlur={onContentBlur} position={position} disableAutoPosition={disableAutoPosition} overlayReference={tooltipReference}>\n                <div className={classnames(`tooltip`, theme, { show: show }, props.className)} role=\"tooltip\" {...props}>\n                    <div className=\"tooltip-arrow\" />\n                    <div className=\"tooltip-inner\">{content}</div>\n                </div>\n            </Overlay>\n        );\n    }\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\nimport { Tooltip } from \"@sebgroup/react-components/Tooltip\";\nimport { Notification } from \"@sebgroup/react-components/Notification\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst TooltipPage: React.FC = () => {\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/Tooltip/Tooltip\");\n    const [notificationToggle, setNotifcationToggle] = React.useState<boolean>(false);\n    const defaultPosition: DynamicFormOption = { label: \"Top\", value: \"top\", key: \"top\" };\n    const defaultTheme: DynamicFormOption = { label: \"Primary\", value: \"primary\", key: \"primary\" };\n    const defaultTriggerMethod: DynamicFormOption = { label: \"Click\", value: \"click\", key: \"click\" };\n    const defaultTooltipContent: string = \"Tooltip content could be long, therefore, controlling the position and width is important\";\n    const nodeTooltipContent: React.ReactNode = (\n        <div>\n            <h1>Tooltip Header</h1>\n            <div>tooltip content</div>\n        </div>\n    );\n    const checkboxControls: Array<DynamicFormOption> = [\n        { label: \"Callback on visibility change\", value: \"isVisibleChanged\", key: \"isVisibleChanged\" },\n        { label: \"Disable autoposition\", value: \"disableAutoPosition\", key: \"disableAutoPosition\" },\n        { label: \"Force show tooltip\", value: \"forceShow\", key: \"forceShow\" },\n        { label: \"Render node as tooltip content\", value: \"isCustomContent\", key: \"isCustomContent\" },\n        { label: \"Define custom tooltip reference\", value: \"isCustomReference\", key: \"isCustomReference\" },\n    ];\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"position\",\n                    value: defaultPosition.value,\n                    label: \"Position\",\n                    options: [\n                        { label: \"Top\", value: \"top\", key: \"top\" },\n                        { label: \"Top-left\", value: \"top-left\", key: \"top-left\" },\n                        { label: \"Top-right\", value: \"top-right\", key: \"top-right\" },\n                        { label: \"Right\", value: \"right\", key: \"right\" },\n                        { label: \"Right-top\", value: \"right-top\", key: \"right-top\" },\n                        { label: \"Right-bottom\", value: \"right-bottom\", key: \"right-bottom\" },\n                        { label: \"Bottom\", value: \"bottom\", key: \"bottom\" },\n                        { label: \"Bottom-left\", value: \"bottom-left\", key: \"bottom-left\" },\n                        { label: \"Bottom-right\", value: \"bottom-right\", key: \"bottom-right\" },\n                        { label: \"Left\", value: \"left\", key: \"left\" },\n                        { label: \"Left-top\", value: \"left-top\", key: \"left-top\" },\n                        { label: \"Left-bottom\", value: \"left-bottom\", key: \"left-bottom\" },\n                    ],\n                    controlType: \"Dropdown\",\n                },\n                {\n                    key: \"theme\",\n                    value: defaultTheme.value,\n                    label: \"Theme\",\n                    options: [\n                        { label: \"Primary\", value: \"primary\", key: \"primary\" },\n                        { label: \"Danger\", value: \"danger\", key: \"danger\" },\n                        { label: \"Default\", value: \"default\", key: \"default\" },\n                        { label: \"Light\", value: \"light\", key: \"light\" },\n                        { label: \"Purple\", value: \"purple\", key: \"purple\" },\n                        { label: \"Success\", value: \"success\", key: \"success\" },\n                        { label: \"Warning\", value: \"warning\", key: \"warning\" },\n                    ],\n                    controlType: \"Dropdown\",\n                },\n                {\n                    key: \"trigger\",\n                    value: defaultTriggerMethod.value,\n                    label: \"Trigger method\",\n                    options: [\n                        { label: \"Click\", value: \"click\", key: \"click\" },\n                        { label: \"Hover\", value: \"hover\", key: \"hover\" },\n                        { label: \"Focus\", value: \"focus\", key: \"focus\" },\n                    ],\n                    controlType: \"Dropdown\",\n                },\n                {\n                    label: \"Optional configurations\",\n                    key: \"checkboxes\",\n                    controlType: \"Option\",\n                    options: checkboxControls,\n                },\n            ],\n        },\n    ];\n    const [renderForm, { controls }] = useDynamicForm(fields);\n    const code: string = `<Tooltip\n        content=\"Tooltip message could be long, therefore, controlling the position and width is important\"\n        position=\"right\"\n    />`;\n\n    /** check if key selected */\n    const checkSelectedKey = (key: string) => {\n        return controls.checkboxes?.find((item: string) => item === key);\n    };\n\n    return (\n        <>\n            <Docs\n                mainFile={importString}\n                example={\n                    <Tooltip\n                        content={checkSelectedKey(\"isCustomContent\") ? nodeTooltipContent : defaultTooltipContent}\n                        position={(controls as any)?.position}\n                        theme={(controls as any)?.theme}\n                        trigger={(controls as any)?.trigger}\n                        disableAutoPosition={checkSelectedKey(\"disableAutoPosition\")}\n                        forceShow={checkSelectedKey(\"forceShow\")}\n                        onVisibleChange={checkSelectedKey(\"isVisibleChanged\") && (() => setNotifcationToggle(true))}\n                    >\n                        {checkSelectedKey(\"isCustomReference\") && <abbr className=\"custom-tooltip text-help\">This is custom tooltip reference</abbr>}\n                    </Tooltip>\n                }\n                code={code}\n                note={\n                    <>\n                        <h4>To force show a tooltip</h4>\n                        <p>\n                            Developers are allowed to force show a tooltip by setting <code>forceShow</code> attribute. It will look something like this:\n                        </p>\n                        <CodeSnippet className=\"card\" language=\"jsx\">\n                            {`<Tooltip content=\"content\" forceShow>Reference</Tooltip>`}\n                        </CodeSnippet>\n                    </>\n                }\n                controls={renderForm()}\n            />\n            <Notification toggle={notificationToggle} type=\"slide\" dismissTimeout={3000} onDismiss={() => setNotifcationToggle(false)}>\n                <div>Tooltip visibility changed!</div>\n            </Notification>\n        </>\n    );\n};\n\nexport default TooltipPage;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport classnames from \"classnames\";\nimport \"./notification.scss\";\n\ntype CommonProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Automatic dismissal timeout in milliseconds (default: `5000`) */\n    dismissTimeout?: number;\n    /** Callback when notification is dismissed */\n    onDismiss?: (e: React.MouseEvent<HTMLButtonElement> | Event) => void;\n    /** Persist notification until dismissed (default: `false`) */\n    persist?: boolean;\n    /** Notification theme */\n    theme?: \"purple\" | \"primary\" | \"danger\" | \"success\" | \"warning\" | \"inverted\";\n    /** Property sets whether the notification is toggled */\n    toggle?: boolean;\n};\n\ninterface SlideNotification extends CommonProps {\n    /** Notification type: `slide` */\n    type?: \"slide\";\n    /** Notification position: `bottom-left` | `bottom-right` | `top-left` | `top-right` */\n    position?: \"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\";\n}\n\ninterface BarNotification extends CommonProps {\n    /** Notification type: `bar` */\n    type?: \"bar\";\n    /** Notification position: `top` | `bottom` */\n    position?: \"top\" | \"bottom\";\n}\n\nexport type NotificationProps = SlideNotification | BarNotification;\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\n/** An alert which pops up on the page to inform the user of an event which occured and optionally provide actions to perform. */\nexport const Notification: React.FC<NotificationProps> = React.forwardRef(\n    ({ toggle, type = \"slide\", theme = \"purple\", position = \"bottom-left\", onDismiss, dismissTimeout = 5000, persist, ...props }: NotificationProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const timerRef: React.MutableRefObject<any> = React.useRef();\n        const [disableAnimation, setDisableAnimation] = React.useState<boolean>(true);\n\n        React.useEffect(() => {\n            if (toggle) {\n                disableAnimation && setDisableAnimation(false);\n                if (!persist) {\n                    timerRef.current = setTimeout(() => {\n                        timerRef.current && onDismiss && onDismiss(new Event(\"dismiss\"));\n                        clearTimeout(timerRef.current);\n                    }, dismissTimeout);\n                }\n            } else {\n                clearTimeout(timerRef.current);\n            }\n        }, [toggle]);\n\n        React.useEffect(() => {\n            persist && clearTimeout(timerRef.current);\n        }, [persist]);\n\n        return !safeDocument\n            ? null\n            : createPortal(\n                  <div\n                      ref={ref}\n                      className={classnames(\n                          \"rc\",\n                          \"notification\",\n                          {\n                              show: toggle,\n                              hide: !toggle && !disableAnimation,\n                              [`theme-${theme}`]: theme,\n                              [`type-${type}`]: type,\n                          },\n                          position,\n                          props.className\n                      )}\n                      {...props}\n                      onAnimationEnd={(e) => {\n                          props.onAnimationEnd && props.onAnimationEnd(e);\n                          !toggle && setDisableAnimation(true);\n                      }}\n                  >\n                      <div className={classnames(`content-wrapper`, { clickable: props.onClick })} {...props}>\n                          {props.children}\n                          <button className=\"close\" onClick={onDismiss}></button>\n                      </div>\n                  </div>,\n                  safeDocument.body\n              );\n    }\n) as React.ForwardRefExoticComponent<React.PropsWithoutRef<SlideNotification & BarNotification> & React.RefAttributes<HTMLDivElement>>;\n","export default \"import React from \\\"react\\\";\\nimport { Overlay } from \\\"./Overlay\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { ElementPosition } from \\\"./useOverlay\\\";\\nimport \\\"./tooltip.scss\\\";\\n\\nconst InfoCircleIcon: JSX.Element = (\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\">\\n        <path d=\\\"M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zm-192-92c-15.464 0-28 12.536-28 28s12.536 28 28 28 28-12.536 28-28-12.536-28-28-28zm7.67-24h-16c-6.627 0-12-5.373-12-12v-.381c0-70.343 77.44-63.619 77.44-107.408 0-20.016-17.761-40.211-57.44-40.211-29.144 0-44.265 9.649-59.211 28.692-3.908 4.98-11.054 5.995-16.248 2.376l-13.134-9.15c-5.625-3.919-6.86-11.771-2.645-17.177C153.658 133.514 178.842 116 223.67 116c52.32 0 97.44 29.751 97.44 80.211 0 67.414-77.44 63.849-77.44 107.408V304c0 6.627-5.373 12-12 12z\\\" />\\n    </svg>\\n);\\n\\nexport type TooltipTrigger = \\\"hover\\\" | \\\"click\\\" | \\\"focus\\\";\\nexport type TooltipTheme = \\\"default\\\" | \\\"light\\\" | \\\"primary\\\" | \\\"warning\\\" | \\\"success\\\" | \\\"danger\\\" | \\\"purple\\\";\\nexport type TooltipPosition = ElementPosition;\\n\\nexport type TooltipProps = Omit<JSX.IntrinsicElements[\\\"div\\\"], \\\"ref\\\"> & {\\n    /** Css style positions: top/bottom/left/right */\\n    position?: TooltipPosition;\\n    /** Based on SEB predefined colors */\\n    theme?: TooltipTheme;\\n    /** Tooltip content */\\n    content?: string | React.ReactNode;\\n    /** Tooltip trigger mode */\\n    trigger?: TooltipTrigger;\\n    /** Force tooltip to be at certain position */\\n    disableAutoPosition?: boolean;\\n    /** Force show tooltip */\\n    forceShow?: boolean;\\n    /** callback on tooltip visibility status change */\\n    onVisibleChange?: (event: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLElement> | React.TouchEvent<HTMLDivElement>, visible: boolean) => void;\\n    /** tooltip content wrapper props */\\n    tooltipWrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n\\n// This solution is meant to fix Gatsby build which complains that document and window doesn't exist in server-side rendering\\nconst safeWindow: Window | null = typeof window !== \\\"undefined\\\" ? window : null;\\n\\nconst isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\\n\\nexport const Tooltip: React.FC<TooltipProps> = ({\\n    className,\\n    position,\\n    theme,\\n    content,\\n    trigger = \\\"click\\\",\\n    disableAutoPosition,\\n    forceShow,\\n    onVisibleChange,\\n    tooltipWrapperProps,\\n    ...props\\n}: TooltipProps) => {\\n    const containerRef: React.RefObject<HTMLDivElement> = React.useRef();\\n    const contentRef: React.RefObject<HTMLDivElement> = React.useRef();\\n    const [show, setShow] = React.useState<boolean>(false);\\n\\n    /**\\n     * toggle tooltip\\n     * @param toggle boolean\\n     * @param e event triggering the changes\\n     */\\n    const onTooltipToggle = (e?: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>, toggle?: boolean): void => {\\n        const isVisible: boolean = toggle !== undefined ? toggle : !show;\\n        setShow(isVisible);\\n        onVisibleChange && onVisibleChange(e, isVisible);\\n    };\\n\\n    const onTouch = (e: React.TouchEvent<HTMLDivElement>, toggleOn: boolean) => {\\n        onTooltipToggle(e, toggleOn);\\n    };\\n\\n    const onHover = (e: React.MouseEvent<HTMLDivElement>, toggleOn: boolean) => {\\n        onTooltipToggle(e, toggleOn);\\n    };\\n\\n    const onMouseEnterEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, true);\\n    const onMouseLeaveEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, false);\\n    const onTouchStartEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, true);\\n    const onTouchEndEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, false);\\n    const onFocusEvent = (e: React.FocusEvent<HTMLDivElement>) => onTooltipToggle(e, true);\\n\\n    return (\\n        <div className={classnames(\\\"tooltip-container\\\", className)} {...props}>\\n            <div\\n                ref={containerRef}\\n                className={classnames(\\\"tooltip-reference\\\", { cursor: trigger === \\\"click\\\" })}\\n                tabIndex={-1}\\n                onClick={trigger === \\\"click\\\" ? onTooltipToggle : null}\\n                onMouseEnter={trigger === \\\"hover\\\" && !isMobile ? onMouseEnterEvent : null}\\n                onMouseLeave={trigger === \\\"hover\\\" && !isMobile ? onMouseLeaveEvent : null}\\n                onTouchStart={trigger === \\\"hover\\\" && isMobile ? onTouchStartEvent : null}\\n                onTouchEnd={trigger === \\\"hover\\\" && isMobile ? onTouchEndEvent : null}\\n                onFocus={trigger === \\\"focus\\\" ? onFocusEvent : null}\\n            >\\n                {props.children ? (\\n                    React.Children.count(props.children) === 1 ? (\\n                        React.Children.map(props.children, (Child: React.ReactElement) => {\\n                            return Object(Child) !== Child ? <span className=\\\"text-help\\\">{Child}</span> : Child;\\n                        })\\n                    ) : (\\n                        props.children\\n                    )\\n                ) : (\\n                    <div className=\\\"default-content\\\">{InfoCircleIcon}</div>\\n                )}\\n            </div>\\n            <TooltipContentContainer\\n                {...tooltipWrapperProps}\\n                position={position}\\n                theme={theme}\\n                content={content}\\n                disableAutoPosition={disableAutoPosition}\\n                ref={contentRef}\\n                onContentBlur={() => setShow(false)}\\n                show={show || forceShow}\\n                tooltipReference={() => containerRef.current}\\n            />\\n        </div>\\n    );\\n};\\n\\ntype TooltipContentContainerProps = JSX.IntrinsicElements[\\\"div\\\"] &\\n    Pick<TooltipProps, \\\"theme\\\" | \\\"position\\\" | \\\"content\\\" | \\\"disableAutoPosition\\\"> & {\\n        show: boolean;\\n        tooltipReference: () => HTMLDivElement;\\n        onContentBlur: (event: React.FocusEvent<HTMLDivElement>) => void;\\n    };\\nconst TooltipContentContainer: React.FC<TooltipContentContainerProps> = React.forwardRef(\\n    ({ show, tooltipReference, theme = \\\"default\\\", position, content, disableAutoPosition, onContentBlur, ...props }: TooltipContentContainerProps, forwardedRef: React.RefObject<HTMLDivElement>) => {\\n        return (\\n            <Overlay ref={forwardedRef} show={show} onBlur={onContentBlur} position={position} disableAutoPosition={disableAutoPosition} overlayReference={tooltipReference}>\\n                <div className={classnames(`tooltip`, theme, { show: show }, props.className)} role=\\\"tooltip\\\" {...props}>\\n                    <div className=\\\"tooltip-arrow\\\" />\\n                    <div className=\\\"tooltip-inner\\\">{content}</div>\\n                </div>\\n            </Overlay>\\n        );\\n    }\\n);\\n\";"],"names":["useOverlay","reference","overlayReference","show","presetPosition","config","defaultPositionsList","React","positionList","filter","item","bottom","height","left","right","top","width","x","y","referenceRect","setReferenceRect","overlayRect","setOverlayRect","overlayStyle","setOverlayStyle","style","setStyle","currentPosition","setCurrentPosition","getBoundingClientRect","debounce","callback","delay","timer","self","this","args","arguments","clearTimeout","setTimeout","apply","updateRect","newRect","t","e","n","_n","Object","keys","r","length","i","JSON","stringify","isSameObject","debouncedUpdateRect","parseMargin","margin","parseInt","isOverflow","disableAutoPosition","window","innerWidth","innerHeight","getTopStartingPoint","marginBottom","getBottomStartingPoint","marginTop","getSideTopStartingPoint","getSideBottomStartingPoint","getLeftStartingPoint","marginRight","getRightStartingPoint","marginLeft","getVerticalLeftStartingPoint","getVerticalCenterStartingPoint","getHorizontalCenterStartingPoint","getPosition","position","getOverlayPosition","currentNewPosition","currentPositionStyle","some","alternatePosition","isWithinViewport","addEventListener","removeEventListener","getComputedStyle","safeDocument","document","Overlay","ref","props","overlayContentRef","setOverlayContentRef","getOverlayContentRef","node","current","focus","blur","createPortal","className","classnames","tabIndex","onBlur","triggeredNode","relatedTarget","activeElement","isWithinTriggerNode","contains","children","body","InfoCircleIcon","xmlns","viewBox","d","safeWindow","isMobile","test","navigator","userAgent","Tooltip","theme","content","trigger","forceShow","onVisibleChange","tooltipWrapperProps","containerRef","contentRef","setShow","onTooltipToggle","toggle","isVisible","undefined","onTouch","toggleOn","onHover","cursor","onClick","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","onFocus","Child","TooltipContentContainer","onContentBlur","tooltipReference","forwardedRef","role","importString","require","notificationToggle","setNotifcationToggle","nodeTooltipContent","fields","key","items","value","label","options","controlType","useDynamicForm","renderForm","controls","checkSelectedKey","checkboxes","find","Docs","mainFile","example","code","note","CodeSnippet","language","Notification","type","dismissTimeout","onDismiss","persist","timerRef","disableAnimation","setDisableAnimation","Event","hide","onAnimationEnd","clickable"],"sourceRoot":""}