{"version":3,"file":"component---src-pages-docs-carousel-tsx-45013fdaf6351c4f04a1.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Carousel/CarouselIndicators.tsx","webpack://react-components-docs/../lib/src/Carousel/CarouselNavs.tsx","webpack://react-components-docs/../lib/src/Carousel/Carousel.tsx","webpack://react-components-docs/../lib/src/Carousel/CarouselItem.tsx","webpack://react-components-docs/./src/pages/docs/carousel.tsx","webpack://react-components-docs/../lib/src/Image/Img.tsx","webpack://react-components-docs/../lib/src/hooks/useCombinedRef.ts","webpack://react-components-docs/../lib/src/Carousel/Carousel.tsx?1c30"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type CarouselIndicatorsProps = JSX.IntrinsicElements[\"ol\"] & {\n    /** Active state. (Managed by Carousel) */\n    active?: number;\n    /** The full size of the carousel. (Managed by Carousel) */\n    size?: number;\n    /** The parent ID, used to enable accessibility features. (Managed by Carousel) */\n    parentId?: string;\n    /** A event handler triggered when and indicator is clicked. (Managed by Carousel) */\n    onIndicatorClicked?: React.MouseEventHandler<HTMLLIElement>;\n};\n\nexport const CarouselIndicators: React.FC<CarouselIndicatorsProps> = React.memo(\n    React.forwardRef(({ active, size, parentId, onIndicatorClicked, ...props }: CarouselIndicatorsProps, ref: React.ForwardedRef<HTMLOListElement>) => {\n        const [className, setClassName] = React.useState<string>(\"carousel-indicators\");\n\n        React.useEffect(() => setClassName(classnames(\"carousel-indicators\", props.className)), [props.className]);\n\n        return (\n            <ol {...props} ref={ref} className={className}>\n                {[...Array(size)].map((v: undefined, i: number) => (\n                    <li key={i} data-target={parentId ? `#${parentId}` : null} data-slide-to={i} className={classnames({ active: active === i })} onClick={active !== i ? onIndicatorClicked : null} />\n                ))}\n            </ol>\n        );\n    })\n);\n","import React from \"react\";\n\nexport interface CarouselNavsProps {\n    onNavigate: React.EventHandler<React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent<HTMLAnchorElement>>;\n    parentId: string;\n    previousText?: string;\n    nextText?: string;\n}\n\nexport const CarouselNavs: React.FC<CarouselNavsProps> = React.memo((props: CarouselNavsProps) => (\n    <>\n        <a className=\"carousel-control-prev\" href={`#${props.parentId}`} role=\"button\" draggable={false} data-slide=\"prev\" onClick={props.onNavigate} onKeyUp={props.onNavigate}>\n            <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\" data-slide=\"prev\" />\n            <span className=\"sr-only\">{props.previousText || \"Previous\"}</span>\n        </a>\n        <a className=\"carousel-control-next\" href={`#${props.parentId}`} role=\"button\" draggable={false} data-slide=\"next\" onClick={props.onNavigate} onKeyUp={props.onNavigate}>\n            <span className=\"carousel-control-next-icon\" aria-hidden=\"true\" data-slide=\"next\" />\n            <span className=\"sr-only\">{props.nextText || \"Next\"}</span>\n        </a>\n    </>\n));\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { CarouselItemProps, AfterSlideEvent } from \"./CarouselItem\";\nimport { CarouselIndicators } from \"./CarouselIndicators\";\nimport { CarouselNavs } from \"./CarouselNavs\";\nimport \"./carousel.scss\";\nimport { useCombinedRefs } from \"../hooks\";\n\nexport type CarouselProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Event handler triggered after change have happened to the carousel returning the index of the new active carousel slide */\n    afterChange?: (e: AfterSlideEvent) => void;\n    /** The duration (in milliseconds) it takes to transition from one slide to another. Default is `600` */\n    transitionDuration?: number;\n    /** Transition style. Supported styles: `slide` and `fade` */\n    transitionStyle?: \"slide\" | \"fade\";\n    /** Enables infinite scrolling */\n    infinite?: boolean;\n    /** Shows clickable indicators at the bottom */\n    showIndicators?: boolean;\n    /** The index of default active slide */\n    defaultValue?: number;\n    /** Enables autoplay slides */\n    autoplay?: boolean;\n    /** Autoplay speed in milliseconds. Default is `5000` */\n    autoplaySpeed?: number;\n};\n\nexport const defaultTransitionDuration: number = 600;\nexport const defaultAutoplaySpeed: number = 5000;\nexport type NavigationDirection = \"next\" | \"prev\";\ntype NavigateTrigger = React.MouseEvent<HTMLLIElement | HTMLAnchorElement | HTMLDivElement> | React.TouchEvent<HTMLDivElement> | React.KeyboardEvent<HTMLAnchorElement>;\ntype SwipeEvent = React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>;\n\nexport const Carousel: React.FC<CarouselProps> = React.forwardRef(\n    (\n        {\n            afterChange,\n            transitionDuration = defaultTransitionDuration,\n            transitionStyle = \"slide\",\n            infinite = true,\n            showIndicators,\n            autoplay = false,\n            autoplaySpeed = defaultAutoplaySpeed,\n            ...props\n        }: CarouselProps,\n        ref: React.ForwardedRef<HTMLDivElement>\n    ) => {\n        const [active, setActive] = React.useState<number>(0);\n        const [nav, setNav] = React.useState<NavigationDirection>(\"next\");\n        const [id, setId] = React.useState<string>(\"\");\n        const [className, setClassName] = React.useState<string>(\"carousel\");\n        const [swipePos, setSwipePos] = React.useState<number>();\n        const carouselRef = useCombinedRefs<HTMLDivElement>(ref);\n        const interrupted: React.MutableRefObject<boolean> = React.useRef<boolean>(false);\n        const timer: React.MutableRefObject<NodeJS.Timeout | number> = React.useRef<NodeJS.Timeout | number>();\n\n        const size: number = React.Children.toArray(props.children).length;\n\n        /** ----- Utilities ----- */\n\n        const findNewActive = React.useCallback(\n            (newNav: NavigationDirection): number => {\n                const isInfinite: boolean = infinite || infinite === undefined;\n                switch (newNav) {\n                    case \"prev\":\n                        return active === 0 ? (isInfinite ? size - 1 : undefined) : active - 1;\n                    case \"next\":\n                        return active === size - 1 ? (isInfinite ? 0 : undefined) : active + 1;\n                }\n            },\n            [infinite, active, size]\n        );\n\n        /**\n         * Handles navigating to a slide\n         * @param {NavigateTrigger} e Navigation trigger event\n         */\n        const goToSlide = React.useCallback(\n            (e: NavigateTrigger, slideTo?: NavigationDirection): void => {\n                e.cancelable && e.preventDefault();\n                let newActive: number;\n                let newNav: NavigationDirection;\n                const target: EventTarget & HTMLElement = e.target as any;\n                if ([\"mousedown\", \"touchstart\"].some((val: string) => val === e.type)) {\n                    /** Swipe gesture */\n                    newNav = slideTo;\n                    newActive = findNewActive(newNav);\n                } else {\n                    if (e.type === \"click\") {\n                        newNav = target.tagName === \"LI\" ? (Number(target.dataset.slideTo) > active ? \"next\" : \"prev\") : (target.dataset.slide as NavigationDirection);\n                    } else {\n                        switch ((e as React.KeyboardEvent<HTMLAnchorElement>).key.toLowerCase()) {\n                            case \"arrowleft\":\n                                newNav = \"prev\";\n                                break;\n                            case \"arrowright\":\n                                newNav = \"next\";\n                                break;\n                            case \"space\":\n                            case \" \":\n                                newNav = target.dataset.slide as NavigationDirection;\n                        }\n                    }\n                    newActive = target.tagName === \"LI\" ? Number(target.dataset.slideTo) : findNewActive(newNav);\n                }\n                if ([newNav, newActive].every((val) => val !== undefined)) {\n                    newNav !== nav && setNav(newNav);\n                    newActive !== active && setActive(newActive);\n                }\n            },\n            [active, infinite, nav, findNewActive]\n        );\n\n        const triggerAutoplay = (): void => {\n            if (autoplay && !interrupted.current) {\n                timer.current && clearTimeout(timer.current as number);\n\n                timer.current = setTimeout(() => {\n                    if (!interrupted.current) {\n                        goToSlide(new MouseEvent(\"mousedown\", { bubbles: true }) as any, \"next\");\n                    }\n                }, autoplaySpeed);\n            }\n        };\n\n        /** ----- Event handlers ----- */\n        /** An event handler triggered after a transition has ended */\n        const afterTransition = React.useCallback(\n            (e: AfterSlideEvent): void => {\n                triggerAutoplay();\n                afterChange && afterChange(e);\n            },\n            [afterChange, triggerAutoplay]\n        );\n\n        /**\n         * Handles swipe events\n         * @param e Touch or mouse event\n         */\n        const handleSwipe = React.useCallback(\n            (e: SwipeEvent): void => {\n                e.persist();\n                const isTouch: boolean = e.type === \"touchstart\";\n                const startingPos: number = isTouch ? (e as React.TouchEvent).touches.item(0).clientX : (e as React.MouseEvent).clientX;\n                const parentWidth: number = e.currentTarget.clientWidth;\n                let xMovement: number;\n\n                const movementHandler: (ev: TouchEvent | MouseEvent) => void = (ev: TouchEvent | MouseEvent) => {\n                    xMovement = isTouch ? (ev as TouchEvent).touches.item(0).clientX : (ev as MouseEvent).clientX;\n                    if (xMovement !== swipePos) {\n                        setSwipePos(xMovement - startingPos);\n                    }\n                };\n\n                const endingHandler: VoidFunction = () => {\n                    if (Math.abs(xMovement - startingPos) > parentWidth / 4) {\n                        goToSlide(e, xMovement - startingPos < 0 ? \"next\" : \"prev\");\n                    }\n                    setSwipePos(undefined);\n                    document.body.removeEventListener(isTouch ? \"touchmove\" : \"mousemove\", movementHandler);\n                    document.body.removeEventListener(isTouch ? \"touchend\" : \"mouseup\", endingHandler);\n                };\n\n                document.body.addEventListener(isTouch ? \"touchmove\" : \"mousemove\", movementHandler);\n                document.body.addEventListener(isTouch ? \"touchend\" : \"mouseup\", endingHandler);\n                isTouch ? props.onTouchStart && props.onTouchStart(e as React.TouchEvent<HTMLDivElement>) : props.onMouseDown && props.onMouseDown(e as React.MouseEvent<HTMLDivElement>);\n            },\n            [swipePos, props.onTouchStart, props.onMouseDown, goToSlide, setSwipePos]\n        );\n\n        const interruptionHandler = (e: React.MouseEvent<HTMLDivElement>): void => {\n            switch (e.type as keyof HTMLElementEventMap) {\n                case \"mouseenter\":\n                    interrupted.current = true;\n                    props.onMouseEnter && props.onMouseEnter(e);\n                    break;\n                case \"mouseleave\":\n                    interrupted.current = false;\n                    triggerAutoplay();\n                    props.onMouseLeave && props.onMouseLeave(e);\n                    break;\n            }\n        };\n\n        /** ----- Effects ----- */\n        /** Set a custom ID if there is none */\n        React.useEffect(() => setId(props.id || randomId(\"carousel-\")), [props.id]);\n        /** Sets the default value, if any. Otherwise default to the first item */\n        React.useEffect(() => setActive(props.defaultValue || 0), [props.defaultValue]);\n        /** Set class names */\n        React.useEffect(() => setClassName(classnames(\"rc\", \"carousel\", { \"carousel-fade\": transitionStyle === \"fade\" }, props.className)), [props.className, transitionStyle]);\n        /** Triggers autoplay if enabled */\n        React.useEffect(() => triggerAutoplay(), [autoplay]);\n        /** Clearing timeout */\n        React.useEffect(() => {\n            return () => {\n                timer.current && clearTimeout(timer.current as number);\n            };\n        }, []);\n\n        return (\n            <div\n                {...props}\n                ref={carouselRef}\n                id={id}\n                className={className}\n                data-ride=\"carousel\"\n                onMouseDown={handleSwipe}\n                onTouchStart={handleSwipe}\n                onMouseEnter={interruptionHandler}\n                onMouseLeave={interruptionHandler}\n            >\n                {showIndicators && <CarouselIndicators active={active} size={size} parentId={id} onIndicatorClicked={goToSlide} />}\n                <div className=\"carousel-inner\">\n                    {React.Children.map(props.children, (Child: React.ReactElement<CarouselItemProps>, i: number) =>\n                        React.isValidElement<CarouselItemProps>(Child)\n                            ? React.cloneElement<any>(Child, {\n                                  \"data-index-number\": i,\n                                  defaultChecked: active === i,\n                                  nav,\n                                  transitionDuration,\n                                  afterTransition,\n                                  translateX: transitionStyle === \"slide\" && active === i ? swipePos : undefined,\n                              })\n                            : Child\n                    )}\n                </div>\n                <CarouselNavs onNavigate={goToSlide} parentId={id} />\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { NavigationDirection, defaultTransitionDuration } from \"./Carousel\";\n\nexport type CarouselItemProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Navigation direction, whether the next slide is next in line or previous. (Managed by Carousel) */\n    nav?: NavigationDirection;\n    /** The duration it takes (in milliseconds) the carousel to transition to the next. (Managed by Carousel) */\n    transitionDuration?: number;\n    /** An event handler triggered after a transition ended. (Managed by Carousel) */\n    afterTransition?: (e: AfterSlideEvent) => void;\n    /** Translate distance when swipe. (Managed by Carousel) */\n    translateX?: number;\n};\n\nexport type TransitionDirection = \"right\" | \"left\";\nexport type AfterSlideEvent = React.AnimationEvent<HTMLDivElement> | React.TransitionEvent<HTMLDivElement>;\n\nexport const CarouselItem: React.FC<CarouselItemProps> = React.memo(\n    React.forwardRef(({ nav, transitionDuration, afterTransition, translateX, ...props }: CarouselItemProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const [className, setClassName] = React.useState<string>(\"carousel-item\");\n        const [style, setStyle] = React.useState<React.CSSProperties>({});\n\n        /**\n         * Handles resetting class name after transition or animation ends\n         * @param {AfterSlideEvent} e Animation or transition end event\n         */\n        const afterSlidehandler = React.useCallback(\n            (e: AfterSlideEvent) => {\n                setClassName(classnames(\"carousel-item\", { active: props.defaultChecked }, props.className));\n                if (props.defaultChecked && afterTransition) {\n                    e.persist();\n                    afterTransition(e);\n                }\n                if (e.type === \"transitionend\") {\n                    props.onTransitionEnd && props.onTransitionEnd(e as React.TransitionEvent<HTMLDivElement>);\n                } else {\n                    props.onAnimationEnd && props.onAnimationEnd(e as React.AnimationEvent<HTMLDivElement>);\n                }\n            },\n            [props.defaultChecked, props.className, afterTransition, props.onTransitionEnd, props.onAnimationEnd]\n        );\n\n        /** Handles transitioning a slide in or out */\n        React.useEffect(() => {\n            const direction: TransitionDirection = nav === \"next\" ? \"left\" : \"right\";\n            setClassName(classnames(\"carousel-item\", `carousel-item-${direction}`, { [`carousel-item-${nav}`]: props.defaultChecked }, { active: !props.defaultChecked }, props.className));\n        }, [nav, props.defaultChecked, props.className]);\n\n        React.useEffect(() => setClassName(classnames(\"carousel-item\", { active: props.defaultChecked }, props.className)), []);\n        React.useEffect(() => {\n            const animationDuration: string = (transitionDuration || defaultTransitionDuration) + \"ms\";\n            const transform: string = translateX && props.defaultChecked ? `translate3d(${translateX}px, 0, 0)` : null;\n            setStyle({\n                transitionDuration: transform ? \"0s\" : animationDuration,\n                animationDuration,\n                transform,\n            });\n        }, [transitionDuration, props.defaultChecked, translateX]);\n\n        return (\n            <div {...props} ref={ref} className={className} style={style} onTransitionEnd={afterSlidehandler} onAnimationEnd={afterSlidehandler}>\n                {props.children}\n            </div>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { withPrefix } from \"gatsby\";\nimport { Carousel, CarouselItem, CarouselProps } from \"@sebgroup/react-components/Carousel\";\nimport { Img } from \"@sebgroup/react-components/Image\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst images = [\"/images/painting-1.jpg\", \"/images/painting-2.jpg\", \"/images/painting-3.jpg\", \"/images/painting-4.jpg\"];\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Carousel/Carousel\");\nconst code: string = `<Carousel>\n    <CarouselItem><Img type=\"div\" src=\"first.jpg\" /></CarouselItem>\n    <CarouselItem><Img type=\"div\" src=\"second.jpg\" /></CarouselItem>\n</Carousel>`;\n\nconst transitionStyles: Array<DynamicFormOption<CarouselProps[\"transitionStyle\"]>> = [\n    { key: \"slide\", label: \"slide\", value: \"slide\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"fade\", label: \"fade\", value: \"fade\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst CarouselPage: React.FC = (): React.ReactElement<void> => {\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"autoplaySpeed\", label: \"autoplaySpeed\", controlType: \"Text\", value: 2000 },\n                { key: \"transitionDuration\", label: \"transitionDuration\", controlType: \"Text\", value: 500 },\n                { key: \"infinite\", label: \"infinite\", controlType: \"Checkbox\", value: false },\n                { key: \"autoplay\", label: \"autoplay\", controlType: \"Checkbox\", value: false },\n                { key: \"showIndicators\", label: \"showIndicators\", controlType: \"Checkbox\" },\n                { key: \"transitionStyle\", label: \"transitionStyle\", controlType: \"Radio\", options: transitionStyles, value: transitionStyles[0].value },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100 d-flex justify-content-center\">\n                    <Carousel\n                        autoplaySpeed={controls.autoplaySpeed}\n                        transitionDuration={controls.transitionDuration}\n                        showIndicators={controls.showIndicators}\n                        autoplay={controls.autoplay}\n                        infinite={controls.infinite}\n                        transitionStyle={controls.transitionStyle}\n                    >\n                        {images.map((image, i) => (\n                            <CarouselItem key={i}>\n                                <Img src={withPrefix(image)} responsive width=\"100%\" />\n                            </CarouselItem>\n                        ))}\n                    </Carousel>\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default CarouselPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./img.scss\";\n\ninterface CommonProps {\n    /** Making the image responsive and adaptive to its parent size */\n    responsive?: boolean;\n    /** Adds default border radius */\n    rounded?: boolean;\n    /** Thumbnail layout */\n    thumbnail?: boolean;\n}\n\ntype ImageProps = JSX.IntrinsicElements[\"img\"] &\n    CommonProps & {\n        type?: \"img\";\n    };\n\ntype DivImageProps = JSX.IntrinsicElements[\"div\"] &\n    CommonProps & {\n        type?: \"div\";\n        /** Sets the background attachment to fixed to allow parallax effect */\n        bgFixed?: boolean;\n        /** Image Source */\n        src?: string;\n        /** Image width */\n        width?: React.ReactText;\n        /** Image height */\n        height?: React.ReactText;\n    };\n\nexport type ImgProps = ImageProps | DivImageProps;\n\n/** Image component that uses native `img` element */\nexport const Img: React.FC<ImgProps> = React.memo(\n    React.forwardRef(\n        ({ type, responsive, rounded, thumbnail, bgFixed, src, width, height, children, ...props }: ImageProps & DivImageProps, ref: React.ForwardedRef<HTMLDivElement | HTMLImageElement>) => {\n            if (type === \"div\") {\n                const [naturalWidth, setNaturalWidth] = React.useState<number>();\n                const [naturalHeight, setNaturalHeight] = React.useState<number>();\n\n                /**\n                 * Retreives the image's meta information\n                 * @param {string} url The image URL\n                 */\n                const getMeta = React.useCallback(\n                    (url: string): void => {\n                        if (url) {\n                            var img: HTMLImageElement = new Image();\n                            img.onload = (ev: Event) => {\n                                const target: HTMLImageElement = ev.currentTarget as any;\n                                setNaturalWidth(target.naturalWidth);\n                                setNaturalHeight(target.naturalHeight);\n                                props.onLoad && props.onLoad(ev as any);\n                            };\n                            img.onerror = props.onError as any;\n                            img.src = url;\n                        }\n                    },\n                    [props.onLoad, props.onError]\n                );\n\n                React.useEffect(() => getMeta(src), [src]);\n\n                return (\n                    <div\n                        {...(props as DivImageProps)}\n                        ref={ref}\n                        className={classnames(\n                            \"rc\",\n                            \"img\",\n                            {\n                                \"img-fluid\": responsive,\n                                \"img-rounded\": rounded,\n                                \"img-thumbnail\": thumbnail,\n                                \"img-fixed\": bgFixed,\n                            },\n                            props.className\n                        )}\n                        style={{\n                            ...props.style,\n                            width: width || props.style?.width || naturalWidth,\n                            height: height || props.style?.height || React.Children.toArray(children).length ? \"auto\" : responsive || thumbnail ? \"100%\" : naturalHeight,\n                            backgroundImage: props.style?.backgroundImage || `url(${src})`,\n                        }}\n                    >\n                        {children}\n                    </div>\n                );\n            } else {\n                return (\n                    <img\n                        src={src}\n                        ref={ref as React.ForwardedRef<HTMLImageElement>}\n                        width={width}\n                        height={height}\n                        {...(props as ImageProps)}\n                        className={classnames(\n                            \"rc\",\n                            \"img\",\n                            {\n                                \"img-fluid\": responsive,\n                                \"img-rounded\": rounded,\n                                \"img-thumbnail\": thumbnail,\n                            },\n                            props.className\n                        )}\n                    />\n                );\n            }\n        }\n    )\n);\n","import React from \"react\";\n\n/**\n * Allows you to use the ref as well as forward it to parent component to use\n * @param refs The refs to forward to. Usually the forwarded ref\n */\nexport function useCombinedRefs<T>(...refs: Array<React.LegacyRef<T> | React.RefObject<T>>): React.MutableRefObject<T> {\n    const targetRef = React.useRef<T>();\n\n    React.useEffect(() => {\n        refs.forEach((ref) => {\n            if (!ref) return;\n\n            if (typeof ref === \"function\") {\n                ref(targetRef.current);\n            } else {\n                (ref as any).current = targetRef.current;\n            }\n        });\n    }, [refs]);\n\n    return targetRef;\n}\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport { CarouselItemProps, AfterSlideEvent } from \\\"./CarouselItem\\\";\\nimport { CarouselIndicators } from \\\"./CarouselIndicators\\\";\\nimport { CarouselNavs } from \\\"./CarouselNavs\\\";\\nimport \\\"./carousel.scss\\\";\\nimport { useCombinedRefs } from \\\"../hooks\\\";\\n\\nexport type CarouselProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Event handler triggered after change have happened to the carousel returning the index of the new active carousel slide */\\n    afterChange?: (e: AfterSlideEvent) => void;\\n    /** The duration (in milliseconds) it takes to transition from one slide to another. Default is `600` */\\n    transitionDuration?: number;\\n    /** Transition style. Supported styles: `slide` and `fade` */\\n    transitionStyle?: \\\"slide\\\" | \\\"fade\\\";\\n    /** Enables infinite scrolling */\\n    infinite?: boolean;\\n    /** Shows clickable indicators at the bottom */\\n    showIndicators?: boolean;\\n    /** The index of default active slide */\\n    defaultValue?: number;\\n    /** Enables autoplay slides */\\n    autoplay?: boolean;\\n    /** Autoplay speed in milliseconds. Default is `5000` */\\n    autoplaySpeed?: number;\\n};\\n\\nexport const defaultTransitionDuration: number = 600;\\nexport const defaultAutoplaySpeed: number = 5000;\\nexport type NavigationDirection = \\\"next\\\" | \\\"prev\\\";\\ntype NavigateTrigger = React.MouseEvent<HTMLLIElement | HTMLAnchorElement | HTMLDivElement> | React.TouchEvent<HTMLDivElement> | React.KeyboardEvent<HTMLAnchorElement>;\\ntype SwipeEvent = React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>;\\n\\nexport const Carousel: React.FC<CarouselProps> = React.forwardRef(\\n    (\\n        {\\n            afterChange,\\n            transitionDuration = defaultTransitionDuration,\\n            transitionStyle = \\\"slide\\\",\\n            infinite = true,\\n            showIndicators,\\n            autoplay = false,\\n            autoplaySpeed = defaultAutoplaySpeed,\\n            ...props\\n        }: CarouselProps,\\n        ref: React.ForwardedRef<HTMLDivElement>\\n    ) => {\\n        const [active, setActive] = React.useState<number>(0);\\n        const [nav, setNav] = React.useState<NavigationDirection>(\\\"next\\\");\\n        const [id, setId] = React.useState<string>(\\\"\\\");\\n        const [className, setClassName] = React.useState<string>(\\\"carousel\\\");\\n        const [swipePos, setSwipePos] = React.useState<number>();\\n        const carouselRef = useCombinedRefs<HTMLDivElement>(ref);\\n        const interrupted: React.MutableRefObject<boolean> = React.useRef<boolean>(false);\\n        const timer: React.MutableRefObject<NodeJS.Timeout | number> = React.useRef<NodeJS.Timeout | number>();\\n\\n        const size: number = React.Children.toArray(props.children).length;\\n\\n        /** ----- Utilities ----- */\\n\\n        const findNewActive = React.useCallback(\\n            (newNav: NavigationDirection): number => {\\n                const isInfinite: boolean = infinite || infinite === undefined;\\n                switch (newNav) {\\n                    case \\\"prev\\\":\\n                        return active === 0 ? (isInfinite ? size - 1 : undefined) : active - 1;\\n                    case \\\"next\\\":\\n                        return active === size - 1 ? (isInfinite ? 0 : undefined) : active + 1;\\n                }\\n            },\\n            [infinite, active, size]\\n        );\\n\\n        /**\\n         * Handles navigating to a slide\\n         * @param {NavigateTrigger} e Navigation trigger event\\n         */\\n        const goToSlide = React.useCallback(\\n            (e: NavigateTrigger, slideTo?: NavigationDirection): void => {\\n                e.cancelable && e.preventDefault();\\n                let newActive: number;\\n                let newNav: NavigationDirection;\\n                const target: EventTarget & HTMLElement = e.target as any;\\n                if ([\\\"mousedown\\\", \\\"touchstart\\\"].some((val: string) => val === e.type)) {\\n                    /** Swipe gesture */\\n                    newNav = slideTo;\\n                    newActive = findNewActive(newNav);\\n                } else {\\n                    if (e.type === \\\"click\\\") {\\n                        newNav = target.tagName === \\\"LI\\\" ? (Number(target.dataset.slideTo) > active ? \\\"next\\\" : \\\"prev\\\") : (target.dataset.slide as NavigationDirection);\\n                    } else {\\n                        switch ((e as React.KeyboardEvent<HTMLAnchorElement>).key.toLowerCase()) {\\n                            case \\\"arrowleft\\\":\\n                                newNav = \\\"prev\\\";\\n                                break;\\n                            case \\\"arrowright\\\":\\n                                newNav = \\\"next\\\";\\n                                break;\\n                            case \\\"space\\\":\\n                            case \\\" \\\":\\n                                newNav = target.dataset.slide as NavigationDirection;\\n                        }\\n                    }\\n                    newActive = target.tagName === \\\"LI\\\" ? Number(target.dataset.slideTo) : findNewActive(newNav);\\n                }\\n                if ([newNav, newActive].every((val) => val !== undefined)) {\\n                    newNav !== nav && setNav(newNav);\\n                    newActive !== active && setActive(newActive);\\n                }\\n            },\\n            [active, infinite, nav, findNewActive]\\n        );\\n\\n        const triggerAutoplay = (): void => {\\n            if (autoplay && !interrupted.current) {\\n                timer.current && clearTimeout(timer.current as number);\\n\\n                timer.current = setTimeout(() => {\\n                    if (!interrupted.current) {\\n                        goToSlide(new MouseEvent(\\\"mousedown\\\", { bubbles: true }) as any, \\\"next\\\");\\n                    }\\n                }, autoplaySpeed);\\n            }\\n        };\\n\\n        /** ----- Event handlers ----- */\\n        /** An event handler triggered after a transition has ended */\\n        const afterTransition = React.useCallback(\\n            (e: AfterSlideEvent): void => {\\n                triggerAutoplay();\\n                afterChange && afterChange(e);\\n            },\\n            [afterChange, triggerAutoplay]\\n        );\\n\\n        /**\\n         * Handles swipe events\\n         * @param e Touch or mouse event\\n         */\\n        const handleSwipe = React.useCallback(\\n            (e: SwipeEvent): void => {\\n                e.persist();\\n                const isTouch: boolean = e.type === \\\"touchstart\\\";\\n                const startingPos: number = isTouch ? (e as React.TouchEvent).touches.item(0).clientX : (e as React.MouseEvent).clientX;\\n                const parentWidth: number = e.currentTarget.clientWidth;\\n                let xMovement: number;\\n\\n                const movementHandler: (ev: TouchEvent | MouseEvent) => void = (ev: TouchEvent | MouseEvent) => {\\n                    xMovement = isTouch ? (ev as TouchEvent).touches.item(0).clientX : (ev as MouseEvent).clientX;\\n                    if (xMovement !== swipePos) {\\n                        setSwipePos(xMovement - startingPos);\\n                    }\\n                };\\n\\n                const endingHandler: VoidFunction = () => {\\n                    if (Math.abs(xMovement - startingPos) > parentWidth / 4) {\\n                        goToSlide(e, xMovement - startingPos < 0 ? \\\"next\\\" : \\\"prev\\\");\\n                    }\\n                    setSwipePos(undefined);\\n                    document.body.removeEventListener(isTouch ? \\\"touchmove\\\" : \\\"mousemove\\\", movementHandler);\\n                    document.body.removeEventListener(isTouch ? \\\"touchend\\\" : \\\"mouseup\\\", endingHandler);\\n                };\\n\\n                document.body.addEventListener(isTouch ? \\\"touchmove\\\" : \\\"mousemove\\\", movementHandler);\\n                document.body.addEventListener(isTouch ? \\\"touchend\\\" : \\\"mouseup\\\", endingHandler);\\n                isTouch ? props.onTouchStart && props.onTouchStart(e as React.TouchEvent<HTMLDivElement>) : props.onMouseDown && props.onMouseDown(e as React.MouseEvent<HTMLDivElement>);\\n            },\\n            [swipePos, props.onTouchStart, props.onMouseDown, goToSlide, setSwipePos]\\n        );\\n\\n        const interruptionHandler = (e: React.MouseEvent<HTMLDivElement>): void => {\\n            switch (e.type as keyof HTMLElementEventMap) {\\n                case \\\"mouseenter\\\":\\n                    interrupted.current = true;\\n                    props.onMouseEnter && props.onMouseEnter(e);\\n                    break;\\n                case \\\"mouseleave\\\":\\n                    interrupted.current = false;\\n                    triggerAutoplay();\\n                    props.onMouseLeave && props.onMouseLeave(e);\\n                    break;\\n            }\\n        };\\n\\n        /** ----- Effects ----- */\\n        /** Set a custom ID if there is none */\\n        React.useEffect(() => setId(props.id || randomId(\\\"carousel-\\\")), [props.id]);\\n        /** Sets the default value, if any. Otherwise default to the first item */\\n        React.useEffect(() => setActive(props.defaultValue || 0), [props.defaultValue]);\\n        /** Set class names */\\n        React.useEffect(() => setClassName(classnames(\\\"rc\\\", \\\"carousel\\\", { \\\"carousel-fade\\\": transitionStyle === \\\"fade\\\" }, props.className)), [props.className, transitionStyle]);\\n        /** Triggers autoplay if enabled */\\n        React.useEffect(() => triggerAutoplay(), [autoplay]);\\n        /** Clearing timeout */\\n        React.useEffect(() => {\\n            return () => {\\n                timer.current && clearTimeout(timer.current as number);\\n            };\\n        }, []);\\n\\n        return (\\n            <div\\n                {...props}\\n                ref={carouselRef}\\n                id={id}\\n                className={className}\\n                data-ride=\\\"carousel\\\"\\n                onMouseDown={handleSwipe}\\n                onTouchStart={handleSwipe}\\n                onMouseEnter={interruptionHandler}\\n                onMouseLeave={interruptionHandler}\\n            >\\n                {showIndicators && <CarouselIndicators active={active} size={size} parentId={id} onIndicatorClicked={goToSlide} />}\\n                <div className=\\\"carousel-inner\\\">\\n                    {React.Children.map(props.children, (Child: React.ReactElement<CarouselItemProps>, i: number) =>\\n                        React.isValidElement<CarouselItemProps>(Child)\\n                            ? React.cloneElement<any>(Child, {\\n                                  \\\"data-index-number\\\": i,\\n                                  defaultChecked: active === i,\\n                                  nav,\\n                                  transitionDuration,\\n                                  afterTransition,\\n                                  translateX: transitionStyle === \\\"slide\\\" && active === i ? swipePos : undefined,\\n                              })\\n                            : Child\\n                    )}\\n                </div>\\n                <CarouselNavs onNavigate={goToSlide} parentId={id} />\\n            </div>\\n        );\\n    }\\n);\\n\";"],"names":["CarouselIndicators","React","ref","active","size","parentId","onIndicatorClicked","props","className","setClassName","classnames","Array","map","v","i","key","onClick","CarouselNavs","href","role","draggable","onNavigate","onKeyUp","previousText","nextText","Carousel","afterChange","transitionDuration","transitionStyle","infinite","showIndicators","autoplay","autoplaySpeed","setActive","nav","setNav","id","setId","swipePos","setSwipePos","carouselRef","useCombinedRefs","interrupted","timer","children","length","findNewActive","newNav","isInfinite","undefined","goToSlide","e","slideTo","newActive","cancelable","preventDefault","target","some","val","type","tagName","Number","dataset","slide","toLowerCase","every","triggerAutoplay","current","clearTimeout","setTimeout","MouseEvent","bubbles","afterTransition","handleSwipe","persist","xMovement","isTouch","startingPos","touches","item","clientX","parentWidth","currentTarget","clientWidth","movementHandler","ev","document","body","addEventListener","endingHandler","Math","abs","removeEventListener","onTouchStart","onMouseDown","interruptionHandler","onMouseEnter","onMouseLeave","randomId","defaultValue","Child","defaultChecked","translateX","CarouselItem","style","setStyle","afterSlidehandler","onTransitionEnd","onAnimationEnd","direction","animationDuration","transform","images","importString","require","transitionStyles","label","value","additionalProps","wrapperProps","useDynamicForm","items","controlType","options","renderControls","controls","Docs","mainFile","example","image","Img","src","withPrefix","responsive","width","code","rounded","thumbnail","bgFixed","height","naturalWidth","setNaturalWidth","naturalHeight","setNaturalHeight","getMeta","url","img","Image","onload","onLoad","onerror","onError","backgroundImage","refs","targetRef","forEach"],"sourceRoot":""}