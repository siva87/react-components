"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[3186],{22150:function(t,n,e){e.r(n),e.d(n,{default:function(){return d}});var r=e(27378),i=e(45141),o=e(30808),a=e(88863),s=(e(40205),e(508)),c=e.n(s),l=["callback","duration"],u=function(t){function n(n){var e;return(e=t.call(this,n)||this).state={timer:"00:00"},e}(0,a.Z)(n,t);var e=n.prototype;return e.startInterval=function(t){var n=this;this.setState({timer:this.convertMStoTime(t)},(function(){n.clearInterval(),n.innerInterval=setInterval((function(){t>0&&(t-=1e3,n.setState({timer:n.convertMStoTime(t)},(function(){0===t&&(n.props.callback(),n.clearInterval())})))}),1e3)}))},e.clearInterval=function(){this.innerInterval&&(clearTimeout(this.innerInterval),this.innerInterval=null)},e.convertMStoTime=function(t){var n=new Date(t);return(n.getUTCHours()>0?n.getUTCHours()+":":"")+(n.getUTCMinutes()<10?"0"+n.getUTCMinutes():n.getUTCMinutes())+":"+(n.getUTCSeconds()<10?"0"+n.getUTCSeconds():n.getUTCSeconds())},e.componentDidMount=function(){null!==this.props.duration&&void 0!==this.props.duration&&this.startInterval(this.props.duration)},e.componentWillUnmount=function(){this.clearInterval()},e.componentDidUpdate=function(t){t.duration!==this.props.duration&&null!==this.props.duration&&void 0!==this.props.duration&&this.startInterval(this.props.duration)},e.render=function(){var t=this.props,n=(t.callback,t.duration,(0,o.Z)(t,l));return r.createElement("div",Object.assign({className:c()("custom-timer",n.className)},n),this.state.timer)},n}(r.Component),p=e(57518),m=e(12240),d=function(){var t=[{key:"controls",items:[{key:"duration",value:9e4,label:"Duration (ms)",placeholder:"Duration",controlType:"Text"}]}],n=(0,p.b)(t),e=n[0],o=n[1].controls;return r.createElement(i.Z,{mainFile:m,example:r.createElement(u,{duration:o.duration||9e4,callback:function(){}}),code:'<Timer duration={90000} callback={() => { console.log("TIMER ENDED callback"); }} />',controls:e()})}},12240:function(t,n,e){e.r(n),n.default='import React from "react";\nimport classnames from "classnames";\n\nexport type TimerProps = JSX.IntrinsicElements["div"] & {\n    /** Callback when timer ends */\n    callback?: VoidFunction;\n    /** Timer\'s duration in milliseconds */\n    duration?: number;\n};\n\ninterface TimerState {\n    timer: string;\n}\n/** A timer is a component for measuring time intervals */\nexport class Timer extends React.Component<TimerProps, TimerState> {\n    private innerInterval: any;\n    constructor(props: TimerProps) {\n        super(props);\n\n        this.state = {\n            timer: "00:00",\n        };\n    }\n\n    startInterval(timeout: number): void {\n        this.setState({ timer: this.convertMStoTime(timeout) }, () => {\n            this.clearInterval();\n            this.innerInterval = setInterval(() => {\n                if (timeout > 0) {\n                    timeout = timeout - 1000;\n                    this.setState({ timer: this.convertMStoTime(timeout) }, () => {\n                        if (timeout === 0) {\n                            this.props.callback();\n                            this.clearInterval();\n                        }\n                    });\n                }\n            }, 1000);\n        });\n    }\n\n    clearInterval(): void {\n        if (this.innerInterval) {\n            clearTimeout(this.innerInterval);\n            this.innerInterval = null;\n        }\n    }\n\n    convertMStoTime(value: number): string {\n        const date: Date = new Date(value);\n        return (\n            (date.getUTCHours() > 0 ? date.getUTCHours() + ":" : "") +\n            (date.getUTCMinutes() < 10 ? "0" + date.getUTCMinutes() : date.getUTCMinutes()) +\n            ":" +\n            (date.getUTCSeconds() < 10 ? "0" + date.getUTCSeconds() : date.getUTCSeconds())\n        );\n    }\n\n    componentDidMount() {\n        if (this.props.duration !== null && this.props.duration !== undefined) {\n            this.startInterval(this.props.duration);\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    componentDidUpdate(prevProps: TimerProps): void {\n        if (prevProps.duration !== this.props.duration) {\n            if (this.props.duration !== null && this.props.duration !== undefined) {\n                this.startInterval(this.props.duration);\n            }\n        }\n    }\n\n    render(): React.ReactNode {\n        const { callback, duration, ...props } = this.props;\n        return (\n            <div className={classnames("custom-timer", props.className)} {...props}>\n                {this.state.timer}\n            </div>\n        );\n    }\n}\n'}}]);
//# sourceMappingURL=component---src-pages-docs-timer-tsx-0f55f1b68c1fdd76904d.js.map