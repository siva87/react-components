"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[2579],{82956:function(e,n,a){a.r(n);var t=a(27378),l=a(45141),s=a(32809),i=a(57518),r=a(27751),o=[{key:"inverted",label:"Inverted",value:"inverted"},{key:"danger",label:"Danger",value:"danger"},{key:"primary",label:"Primary",value:"primary"},{key:"purple",label:"Purple",value:"purple"},{key:"success",label:"Success",value:"success"},{key:"warning",label:"Warning",value:"warning"}],c=[{key:"error",label:"danger",value:"danger",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"success",label:"success",value:"success",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"warning",label:"warning",value:"warning",additionalProps:{wrapperProps:{className:"d-inline-block"}}}];n.default=function(){var e=t.useState(1),n=e[0],a=e[1],u=(0,i.b)([{key:"controls",items:[{key:"theme",label:"Theme",options:o,value:"primary",controlType:"Dropdown",additionalProps:{className:"indent pl-3 pt-2"}},{key:"tooltipTheme",label:"Tooltip theme",options:o,value:"inverted",controlType:"Dropdown",additionalProps:{className:"indent pl-3 pt-2"}},{key:"min",label:"Min",controlType:"Text",value:1,valueType:"number"},{key:"max",label:"Max",controlType:"Text",value:100,valueType:"number"},{key:"step",label:"Step",controlType:"Text",value:1,valueType:"number"},{key:"alternative",label:"alternative",controlType:"Checkbox",value:!1,description:"Render with an alternative style"},{key:"alwaysShowTooltip",label:"alwaysShowTooltip",controlType:"Checkbox",value:!1},{key:"disabled",label:"disabled",controlType:"Checkbox",value:!1},{key:"indicator",label:"indicator",controlType:"Checkbox",value:!1},{key:"indicatorType",label:"Indicator type",controlType:"Radio",rulerKey:"indicator",condition:!0,options:c,value:c[0].value,formElementAdditionalProps:{className:"indent pl-3 pt-2"}},{key:"labels",label:"labels",controlType:"Checkbox",value:!1,description:"Pass a list of positions and labels to be mapped"},{key:"showTicks",label:"showTicks",controlType:"Checkbox",value:!1,description:"Show ticks for the lables",rulerKey:"labels",condition:!0,formElementAdditionalProps:{className:"indent pl-3 pt-2"}}]}]),m=u[0],p=u[1].controls,d=Math.floor((p.max-p.min)/2)+p.min,b=[{position:p.min,label:p.min},{position:d,label:d},{position:p.max,label:p.max}],h=t.useMemo((function(){return p.indicator?{type:p.indicatorType,message:"Indicator message"}:null}),[p.indicator,p.indicatorType]);return t.createElement(l.Z,{mainFile:r,example:t.createElement("div",{className:"w-100"},t.createElement(s.i,Object.assign({},p,{value:n,indicator:h,onChange:function(e){return a(Number(e.target.value))},labels:p.labels?b:null}))),code:"<Slider value={value} onChange={e => setValue(parseInt(e.target.value))} />",controls:m()})}},32809:function(e,n,a){a.d(n,{i:function(){return m}});var t=a(30808),l=a(27378),s=a(508),i=a.n(s),r=a(58923),o=["alwaysShowTooltip","label","labels","max","min","showTicks","step","theme","alternative","tooltipTheme","tooltipValue","indicator"],c=l.createElement("svg",{name:"angle-left",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 192 512"},l.createElement("path",{d:"M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z"})),u=l.createElement("svg",{name:"angle-right",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 192 512"},l.createElement("path",{d:"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z"})),m=l.forwardRef((function(e,n){var a=e.alwaysShowTooltip,s=e.label,m=e.labels,p=e.max,d=e.min,b=e.showTicks,h=e.step,v=e.theme,f=void 0===v?"primary":v,y=e.alternative,w=e.tooltipTheme,g=void 0===w?"inverted":w,x=e.tooltipValue,T=e.indicator,S=(0,t.Z)(e,o),k=l.useState(d||0),P=k[0],V=k[1],N=l.useState(p||100),E=N[0],z=N[1],M=l.useState(0),R=M[0],C=M[1],A=l.useState([]),I=A[0],L=A[1],$=l.useState(0),F=$[0],O=$[1],B=l.useState({}),j=B[0],D=B[1],Y={alternative:{width:"27px",offset:"56px"},normal:{width:"5px",offset:"24px"}},_=y?"alternative":"normal";function J(){if(S.value<=P)return 0;if(S.value>=E)return 100;var e=Math.abs(S.value-P);return R?e/R*100:0}l.useEffect((function(){var e="number"!=typeof d?0:d,n="number"!=typeof p?100:p;V(e),z(n),C(function(e,n){return n>e?n-e:(console.warn("The max value of the slider should be larger than the min value (Max:"+n+", Min: "+e),e-n)}(e,n))}),[d,p]),l.useEffect((function(){if(m&&m.length){var e=[];m.map((function(n){e.push(function(e){if(e>=E)return 100;if(e<=P)return 0;return Math.abs((e-P)/(E-P)*100)}(n.position)+"%")})),L(e)}}),[m,P,E]),l.useEffect((function(){O(J()),D(X())}),[S.value,P,E,R,_]);var X=l.useCallback((function(){var e,n=J(),a=Y[_],t=a.width,l=a.offset,s={};return P>=0?(e=0,s.left=e+"%",s.width="calc("+n+"% + "+t+")"):E<=0?(e=100,s.left="calc("+e+"% + "+l+")",s.width="calc("+(100-n)+"% + "+t+")",s.transform="rotateY(180deg)"):S.value<=0?(e=R?Math.abs(P/R*100):0,s.left="calc("+e+"% + "+t+")",s.width=e-n+"%",s.transform="rotateY(180deg)"):(e=R?Math.abs(100-E/R*100):0,s.left="calc("+e+"% + "+t+")",s.width=n-e+"%"),s}),[_,S.value,J]);return l.createElement(r.a,Object.assign({},T,{noBorder:!0}),l.createElement("div",{className:i()("rc custom-slider",S.className,{disabled:S.disabled})},s&&l.createElement("label",{className:"custom-label"},s),l.createElement("div",{className:i()("input-field",_,{"has-labels":m&&m.length})},l.createElement("input",Object.assign({},S,{ref:n,type:"range",min:P,max:E,step:h})),l.createElement("div",{className:i()("custom-slider-holder",f)},l.createElement("div",{className:i()("custom-slider-track",{"with-transitions":R/h<=30})},l.createElement("div",{className:"custom-slider-slider-before"}),l.createElement("div",{className:"custom-slider-slider-after",style:j}),l.createElement("div",{className:"custom-slider-thumb",style:{left:F+"%"}},l.createElement("div",{className:i()("custom-slider-preview",g,{"always-show":a})},x||S.value),"alternative"===_?l.createElement(l.Fragment,null,l.createElement("span",{className:"custom-slider-icon-left"},c),l.createElement("span",{className:"custom-slider-icon-right"},u)):null),m&&m.length?m.map((function(e,n){return l.createElement("div",{key:n,className:i()("custom-slider-label",{"show-ticks":b}),style:{left:I[n]}},l.createElement("span",null,e.label))})):null)))))}))},27751:function(e,n,a){a.r(n),n.default='import React from "react";\nimport classnames from "classnames";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator";\nimport "./slider.scss";\n\nconst angleLeftIcon: JSX.Element = (\n    <svg name="angle-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512">\n        <path d="M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z" />\n    </svg>\n);\nconst angleRightIcon: JSX.Element = (\n    <svg name="angle-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512">\n        <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z" />\n    </svg>\n);\n\nexport type SliderTheme = "primary" | "inverted" | "success" | "danger" | "warning" | "purple";\nexport type SliderAppearance = "normal" | "alternative";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements["input"], "value"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** maximum value for range */\n    max?: number;\n    /** minimum value for range */\n    min?: number;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** step per increment or decrement */\n    step?: number;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\ntype AppearanceStyleMap = {\n    [key in SliderAppearance]: {\n        width: string;\n        offset: string;\n    };\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = "primary", alternative, tooltipTheme = "inverted", tooltipValue, indicator, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const [minValue, setMinValue] = React.useState<number>(min || 0);\n        const [maxValue, setMaxValue] = React.useState<number>(max || 100);\n        const [size, setSize] = React.useState<number>(0);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [thumbPosition, setThumbPosition] = React.useState<number>(0);\n        const [activeTrackStyles, setActiveTrackStyles] = React.useState<React.CSSProperties>({});\n        const appearanceSizesMap: AppearanceStyleMap = {\n            alternative: { width: "27px", offset: "56px" },\n            normal: { width: "5px", offset: "24px" },\n        };\n        const appearance: SliderAppearance = alternative ? "alternative" : "normal";\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== "number" ? 0 : min;\n            const maxValue: number = typeof max !== "number" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n            setSize(getSize(minValue, maxValue));\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + "%");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setThumbPosition(getPercentage());\n            setActiveTrackStyles(getActiveTrackStyles());\n        }, [props.value, minValue, maxValue, size, appearance]);\n\n        /**\n         * Finds the size between two numbers\n         * @param {number} minValue The minimum value\n         * @param {number} maxValue The maximum value\n         * @returns {number} The size\n         */\n        function getSize(minValue: number, maxValue: number): number {\n            if (maxValue > minValue) {\n                return maxValue - minValue;\n            } else {\n                // Will calculate the size anyway, but it will show a warning since the min is larger than the max\n                console.warn(`The max value of the slider should be larger than the min value (Max:${maxValue}, Min: ${minValue}`);\n                return minValue - maxValue;\n            }\n        }\n\n        /**\n         * Converts the current value to percentage based on min and max\n         * @returns {number} The precentage\n         */\n        function getPercentage(): number {\n            if (props.value <= minValue) {\n                return 0;\n            } else if (props.value >= maxValue) {\n                return 100;\n            } else {\n                const distanceFromMin: number = Math.abs(props.value - minValue);\n                return size ? (distanceFromMin / size) * 100 : 0;\n            }\n        }\n\n        /**\n         * Calculates the styles needed for the active track\n         * @returns {React.CSSProperties} The active track styles object\n         */\n        const getActiveTrackStyles: () => React.CSSProperties = React.useCallback(() => {\n            const calculatedThumbPosition: number = getPercentage();\n            let zeroPosition: number;\n            const { width, offset }: AppearanceStyleMap[keyof AppearanceStyleMap] = appearanceSizesMap[appearance];\n            const style: React.CSSProperties = {};\n            if (minValue >= 0) {\n                zeroPosition = 0;\n                style.left = `${zeroPosition}%`;\n                style.width = `calc(${calculatedThumbPosition}% + ${width})`;\n            } else if (maxValue <= 0) {\n                zeroPosition = 100;\n                style.left = `calc(${zeroPosition}% + ${offset})`;\n                style.width = `calc(${100 - calculatedThumbPosition}% + ${width})`;\n                style.transform = "rotateY(180deg)";\n            } else {\n                if (props.value <= 0) {\n                    zeroPosition = size ? Math.abs((minValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = zeroPosition - calculatedThumbPosition + "%";\n                    style.transform = "rotateY(180deg)";\n                } else {\n                    zeroPosition = size ? Math.abs(100 - (maxValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = calculatedThumbPosition - zeroPosition + "%";\n                }\n            }\n            return style;\n        }, [appearance, props.value, getPercentage]);\n\n        /**\n         * Calculating the position of the label based on it\'s value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        /**\n         * Determines whether to enable or disable CSS transitions based on the total amount of steps\n         * This is fix for a performance impact caused by rapidly updating the state when sliding\n         * @var maxNumberOfStepsToAllowTransition represents the maximum number of steps to have the\n         * transitions enabled. Transitions would be disabled when exceeding that number;\n         * @returns {boolean} `True` if it should transition\n         */\n        function shouldEnableTransition(): boolean {\n            const maxNumberOfStepsToAllowTransition: number = 30;\n            return size / step <= maxNumberOfStepsToAllowTransition;\n        }\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames("rc custom-slider", props.className, { disabled: props.disabled })}>\n                    {label && <label className="custom-label">{label}</label>}\n                    <div className={classnames("input-field", appearance, { "has-labels": labels && labels.length })}>\n                        <input {...props} ref={ref} type="range" min={minValue} max={maxValue} step={step} />\n                        <div className={classnames("custom-slider-holder", theme)}>\n                            <div className={classnames("custom-slider-track", { "with-transitions": shouldEnableTransition() })}>\n                                <div className="custom-slider-slider-before" />\n                                <div className="custom-slider-slider-after" style={activeTrackStyles} />\n                                <div className="custom-slider-thumb" style={{ left: thumbPosition + "%" }}>\n                                    <div className={classnames("custom-slider-preview", tooltipTheme, { "always-show": alwaysShowTooltip })}>{tooltipValue || props.value}</div>\n                                    {appearance === "alternative" ? (\n                                        <>\n                                            <span className="custom-slider-icon-left">{angleLeftIcon}</span>\n                                            <span className="custom-slider-icon-right">{angleRightIcon}</span>\n                                        </>\n                                    ) : null}\n                                </div>\n                                {labels && labels.length\n                                    ? labels.map((label: SliderLabel, i: number) => (\n                                          <div key={i} className={classnames("custom-slider-label", { "show-ticks": showTicks })} style={{ left: labelsPositions[i] }}>\n                                              <span>{label.label}</span>\n                                          </div>\n                                      ))\n                                    : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n'}}]);
//# sourceMappingURL=component---src-pages-docs-slider-tsx-78dfc68916241c8e1a7e.js.map