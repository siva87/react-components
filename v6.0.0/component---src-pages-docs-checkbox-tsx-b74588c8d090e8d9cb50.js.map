{"version":3,"file":"component---src-pages-docs-checkbox-tsx-b74588c8d090e8d9cb50.js","mappings":"kNAOMA,EAAuBC,EAAQ,OAO/BC,EAAsD,CACxD,CAAEC,IAAK,QAASC,MAAO,SAAUC,MAAO,SAAUC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAA8C,CAChD,CAAEN,IAAK,aAAcC,MAAO,aAAcC,MAAO,IAAKK,YAAa,8CACnE,CAAEP,IAAK,UAAWC,MAAO,UAAWC,MAAO,IAAKK,YAAa,wDAwEjE,UArE+B,WAC3B,OAAuCC,EAAAA,EAAAA,GAAe,CAClD,CACIR,IAAK,WACLS,MAAO,CACH,CAAET,IAAK,SAAUC,MAAO,SAAUS,YAAa,WAAYR,OAAO,GAClE,CAAEF,IAAK,YAAaC,MAAO,YAAaS,YAAa,WAAYR,OAAO,GACxE,CACIF,IAAK,gBACLW,SAAU,YACVC,WAAW,EACXX,MAAO,iBACPY,QAASd,EACTW,YAAa,QACbR,MAAOH,EAAW,GAAGG,MACrBY,2BAA4B,CAAET,UAAW,qBAE7C,CACIL,IAAK,oBACLC,MAAO,oBACPS,YAAa,QACbC,SAAU,YACVC,WAAW,EACXC,QAASP,EACTJ,MAAOI,EAAkB,GAAGJ,MAC5BY,2BAA4B,CAAET,UAAW,yBAxBlDU,EAAP,KAAyBC,EAAzB,KAAyBA,SA8BnBC,EAAuD,MAA/BD,EAASV,kBACjCY,EAAoD,MAA/BF,EAASV,kBAC9Ba,EAAuBC,EAAAA,SAAc,WACvC,OAAOJ,EAASG,UAAY,CAAEE,KAAML,EAASM,cAAeC,QAAS,qBAAwB,OAC9F,CAACP,EAASG,UAAWH,EAASM,gBAEjC,OACI,gBAAC,IAAD,CACIE,SAAU3B,EACV4B,QACI,uBAAKpB,UAAU,SACX,gBAAC,IAAD,CAAmBgB,KAAMH,EAAYC,MAAAA,OAAH,EAAGA,EAAWE,KAAO,KAAME,QAASL,EAAYC,MAAAA,OAAH,EAAGA,EAAWI,QAAU,MACnG,gBAAC,IAAD,CAAUG,OAAQV,EAASU,OAAQP,UAAWF,EAAeE,EAAY,MAAzE,QAEI,qBAAGd,UAAU,kBAAb,0BAEJ,gBAAC,IAAD,CAAUqB,OAAQV,EAASU,QAA3B,YAIZC,KApEM,kCAqENX,SAAUD,IACVa,KACI,gCACI,yDACA,kIAC0G,iCAD1G,uDAIA,gBAAC,IAAD,CAAavB,UAAU,OAAOwB,SAAS,OA5ElB,kH,6BCTzC","sources":["webpack://react-components-docs/./src/pages/docs/checkbox.tsx","webpack://react-components-docs/../lib/src/Checkbox/Checkbox.tsx?bab3"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Checkbox } from \"@sebgroup/react-components/Checkbox/Checkbox\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { FeedbackIndicator, Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Checkbox/Checkbox\");\nconst code: string = `<Checkbox>Label here</Checkbox>`;\nconst checkboxWithDescriptionCode: string = `<Checkbox>\n    Your label here\n    <p className=\"text-muted m-0\">Explain yourself here</p>\n</Checkbox>`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst indicatorGrouping: Array<DynamicFormOption> = [\n    { key: \"individual\", label: \"Individual\", value: \"1\", description: \"Pass an indicator to individual checkboxes\" },\n    { key: \"grouped\", label: \"Grouped\", value: \"2\", description: \"Wrap a group of checkboxes with a FeedbackIndicator\" },\n];\n\nconst CheckboxPage: React.FC = (): React.ReactElement<void> => {\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"inline\", label: \"inline\", controlType: \"Checkbox\", value: false },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", value: false },\n                {\n                    key: \"indicatorType\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    value: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n                {\n                    key: \"indicatorGrouping\",\n                    label: \"Indicator choices\",\n                    controlType: \"Radio\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    options: indicatorGrouping,\n                    value: indicatorGrouping[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    const isIndividual: boolean = controls.indicatorGrouping === \"1\";\n    const isGrouped: boolean = controls.indicatorGrouping === \"2\";\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <FeedbackIndicator type={isGrouped ? indicator?.type : null} message={isGrouped ? indicator?.message : null}>\n                        <Checkbox inline={controls.inline} indicator={isIndividual ? indicator : null}>\n                            First\n                            <p className=\"text-muted m-0\">Express yourself here</p>\n                        </Checkbox>\n                        <Checkbox inline={controls.inline}>Second</Checkbox>\n                    </FeedbackIndicator>\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n            note={\n                <>\n                    <h4>Checkboxes with description</h4>\n                    <p>\n                        Checkboxes can sometimes be rendered with a description, in order to do that, you can simply render a <code>p</code> tag as children. It will look something like this:\n                    </p>\n\n                    <CodeSnippet className=\"card\" language=\"jsx\">\n                        {checkboxWithDescriptionCode}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default CheckboxPage;\n","export default \"import React from \\\"react\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator/FeedbackIndicator\\\";\\nimport \\\"./checkbox.scss\\\";\\n\\nexport type CheckboxProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Displays the checkbox inline */\\n    inline?: boolean;\\n    /** Div wrapper props */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** Indicator for error, warning or success */\\n    indicator?: Indicator;\\n};\\n\\nexport const Checkbox: React.FC<CheckboxProps> = React.forwardRef(({ inline, wrapperProps, indicator, children, ...props }: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [id, setId] = React.useState<string>(props.id);\\n\\n    React.useEffect(() => setId(props.id || (children ? props.id || randomId(\\\"checkbox-\\\") : null)), [props.id, children]);\\n\\n    return (\\n        <FeedbackIndicator {...indicator}>\\n            <div {...wrapperProps} className={classnames(\\\"rc\\\", \\\"checkbox\\\", { inline }, wrapperProps?.className)}>\\n                <label htmlFor={id} className={classnames(\\\"custom-control\\\", \\\"custom-checkbox\\\", { \\\"custom-control-inline\\\": inline })}>\\n                    <input {...props} type=\\\"checkbox\\\" id={id} className={classnames(\\\"custom-control-input\\\", props.className)} ref={ref} />\\n                    <label htmlFor={id} className=\\\"custom-control-label\\\">\\n                        {children}\\n                    </label>\\n                </label>\\n            </div>\\n        </FeedbackIndicator>\\n    );\\n});\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","indicatorGrouping","description","useDynamicForm","items","controlType","rulerKey","condition","options","formElementAdditionalProps","renderControls","controls","isIndividual","isGrouped","indicator","React","type","indicatorType","message","mainFile","example","inline","code","note","language"],"sourceRoot":""}