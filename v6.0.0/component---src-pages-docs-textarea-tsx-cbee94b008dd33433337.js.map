{"version":3,"file":"component---src-pages-docs-textarea-tsx-cbee94b008dd33433337.js","mappings":"4LAMMA,EAAuBC,EAAQ,OAG/BC,EAAsD,CACxD,CAAEC,IAAK,QAASC,MAAO,SAAUC,MAAO,SAAUC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAAyBC,EAAAA,MAAW,WACtC,MAA0BA,EAAAA,SAAuB,IAA1CL,EAAP,KAAcM,EAAd,KAEA,GAAmCC,EAAAA,EAAAA,GAAe,CAC9C,CACIT,IAAK,WACLU,MAAO,CACH,CAAEV,IAAK,WAAYC,MAAO,WAAYU,YAAa,YACnD,CAAEX,IAAK,YAAaC,MAAO,YAAaU,YAAa,WAAYT,OAAO,GACxE,CAAEF,IAAK,YAAaC,MAAO,YAAaU,YAAa,YACrD,CACIX,IAAK,gBACLY,SAAU,YACVC,WAAW,EACXZ,MAAO,iBACPa,QAASf,EACTY,YAAa,QACbT,MAAOH,EAAW,GAAGG,MACrBa,2BAA4B,CAAEV,UAAW,yBAflDW,EAAP,KAAqBC,EAArB,KAAqBA,SAqBfC,EAAuBX,EAAAA,SAAc,WACvC,OAAOU,EAASC,UAAY,CAAEC,KAAMF,EAASG,cAAeC,QAAS,qBAAwB,OAC9F,CAACJ,EAASC,UAAWD,EAASG,gBAEjC,OACI,gBAAC,IAAD,CACIE,SAAUzB,EACV0B,QACI,gBAAC,IAAD,CACIC,KAAK,OACLtB,MAAOA,EACPD,MAAM,gBACNwB,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAOnB,EAASmB,EAAEC,OAAO1B,QACnC2B,SAAUZ,EAASY,SACnBC,SAAUb,EAASc,SACnBC,UAAWf,EAASe,UACpBd,UAAWA,IAGnBe,KApDM,+DAqDNhB,SAAUD,SAKtB,a,6BCjEA","sources":["webpack://react-components-docs/./src/pages/docs/textarea.tsx","webpack://react-components-docs/../lib/src/Textarea/Textarea.tsx?e118"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Textarea } from \"@sebgroup/react-components/Textarea\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Textarea/Textarea\");\nconst code: string = `<Textarea value=\"Some text value\" label=\"Some text label\" />`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst TextareaPage: React.FC = React.memo(() => {\n    const [value, setValue] = React.useState<string>(\"\");\n\n    const [renderForm, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" },\n                { key: \"resizable\", label: \"resizable\", controlType: \"Checkbox\", value: true },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\" },\n                {\n                    key: \"indicatorType\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    value: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <Textarea\n                    name=\"test\"\n                    value={value}\n                    label=\"Element label\"\n                    placeholder=\"Placeholder...\"\n                    onChange={(e) => setValue(e.target.value)}\n                    disabled={controls.disabled}\n                    readOnly={controls.readonly}\n                    resizable={controls.resizable}\n                    indicator={indicator}\n                />\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default TextareaPage;\n","export default \"import React from \\\"react\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./textarea.scss\\\";\\n\\nexport type TextareaProps = JSX.IntrinsicElements[\\\"textarea\\\"] & {\\n    /** Element label */\\n    label?: string;\\n    /** Property sets whether textarea is resizable */\\n    resizable?: boolean;\\n    /** Form indicator */\\n    indicator?: Indicator;\\n    /** Wrapper props (div) */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n/** Textarea is a component that allows user to add or edit text in multiline */\\nexport const Textarea: React.FC<TextareaProps> = React.forwardRef(({ indicator, label, resizable, wrapperProps = {}, ...props }: TextareaProps, ref: React.ForwardedRef<HTMLTextAreaElement>) => {\\n    const [id, setId] = React.useState<string>();\\n\\n    React.useEffect(() => setId(props.id ? props.id : label ? randomId(\\\"textarea-\\\") : null), [props.id, label]);\\n\\n    return (\\n        <div {...wrapperProps} className={classnames(\\\"rc text-area input-field\\\", wrapperProps.className)}>\\n            {label && <label htmlFor={id}>{label}</label>}\\n            <FeedbackIndicator {...indicator}>\\n                <textarea {...props} ref={ref} className={classnames(\\\"form-control\\\", { resizable }, props.className)} />\\n            </FeedbackIndicator>\\n        </div>\\n    );\\n});\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","TextareaPage","React","setValue","useDynamicForm","items","controlType","rulerKey","condition","options","formElementAdditionalProps","renderForm","controls","indicator","type","indicatorType","message","mainFile","example","name","placeholder","onChange","e","target","disabled","readOnly","readonly","resizable","code"],"sourceRoot":""}