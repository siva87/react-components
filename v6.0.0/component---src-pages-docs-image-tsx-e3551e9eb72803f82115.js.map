{"version":3,"file":"component---src-pages-docs-image-tsx-e3551e9eb72803f82115.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/image.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/Image/Img.tsx","webpack://react-components-docs/../lib/src/Image/Img.tsx?a511"],"sourcesContent":["import React from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport Docs from \"@common/Docs\";\nimport { Img, ImgProps } from \"@sebgroup/react-components/Image/Img\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Button } from \"@sebgroup/react-components/Button\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Image/Img\");\nconst code: string = `<Img src={imageSrc} />`;\n\nconst imgTypes: Array<DynamicFormOption<ImgProps[\"type\"]>> = [\n    { key: \"img\", value: \"img\", label: \"img\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"div\", value: \"div\", label: \"div\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst ImagePage: React.FC = (): React.ReactElement<void> => {\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"imgType\",\n                    label: \"Image type\",\n                    description: \"The image can be rendered as a native img tag or div tag. Each has pros and cons.\",\n                    controlType: \"Radio\",\n                    options: imgTypes,\n                    value: imgTypes[0].value,\n                },\n                {\n                    key: \"bgFixed\",\n                    label: \"bgFixed\",\n                    rulerKey: \"imgType\",\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                    condition: imgTypes[1].value,\n                    description: \"Fixing the background allows it to have parallax effect when scrolling. Only available for div image type.\",\n                    controlType: \"Checkbox\",\n                },\n                {\n                    key: \"showChildren\",\n                    label: \"Render children inside div image\",\n                    rulerKey: \"imgType\",\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                    condition: imgTypes[1].value,\n                    description: \"One advantage of a div image is that you can render children inside the image\",\n                    controlType: \"Checkbox\",\n                },\n                { key: \"rounded\", label: \"rounded\", controlType: \"Checkbox\" },\n                { key: \"thumbnail\", label: \"thumbnail\", description: \"Thumbnail images are also responsive\", controlType: \"Checkbox\" },\n                { key: \"responsive\", label: \"responsive\", description: \"Makes sure that the image scales with it's container\", value: true, controlType: \"Checkbox\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100 h-100\">\n                    <Img\n                        src={withPrefix(\"/images/rabbit-on-the-spot.jpg\")}\n                        type={controls.imgType}\n                        width={controls.width}\n                        height={controls.height}\n                        rounded={controls.rounded}\n                        thumbnail={controls.thumbnail}\n                        responsive={controls.responsive}\n                        bgFixed={controls.bgFixed}\n                    >\n                        {controls.showChildren && (\n                            <div className=\"p-3\">\n                                <h4>Labore rerum id quis rerum voluptatibus et nesciunt.</h4>\n                                <p>\n                                    A sapiente et et sequi. Unde deleniti recusandae at eligendi id reiciendis tempore et. Ut ab sunt tempora aut fuga asperiores provident. Delectus earum earum quae\n                                    voluptates impedit veritatis quos ut in. Omnis unde beatae. Quo eos ducimus necessitatibus laborum.\n                                </p>\n                                <h4>Quisquam vel nesciunt consequatur quia ratione aut qui adipisci qui.</h4>\n                                <p>\n                                    Tenetur reprehenderit architecto. Consequuntur blanditiis consequatur non quod laborum magni. Aut distinctio ducimus laudantium asperiores. Aut repudiandae\n                                    similique tempora commodi dolor.\n                                </p>\n                                <Button>A button</Button>\n                            </div>\n                        )}\n                    </Img>\n                    {controls.bgFixed && (\n                        <>\n                            <br />\n                            <h3>Scroll to see the effect</h3>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptas dignissimos eligendi et, similique enim dicta expedita aspernatur doloribus pariatur dolorem\n                                reiciendis cupiditate temporibus iste suscipit nobis adipisci laudantium, hic ad?\n                            </p>\n                            <p>\n                                Lorem ipsum dolor sit amet consectetur adipisicing elit. In obcaecati inventore nulla magnam, veritatis temporibus tenetur quidem dolores nobis, rerum alias reiciendis\n                                illo facere assumenda distinctio reprehenderit nostrum vitae natus.\n                            </p>\n                            <p>\n                                Lorem ipsum dolor sit amet consectetur adipisicing elit. In obcaecati inventore nulla magnam, veritatis temporibus tenetur quidem dolores nobis, rerum alias reiciendis\n                                illo facere assumenda distinctio reprehenderit nostrum vitae natus.\n                            </p>\n                            <p>\n                                Lorem ipsum dolor sit amet consectetur adipisicing elit. In obcaecati inventore nulla magnam, veritatis temporibus tenetur quidem dolores nobis, rerum alias reiciendis\n                                illo facere assumenda distinctio reprehenderit nostrum vitae natus.\n                            </p>\n                        </>\n                    )}\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default ImagePage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./img.scss\";\n\ninterface CommonProps {\n    /** Making the image responsive and adaptive to its parent size */\n    responsive?: boolean;\n    /** Adds default border radius */\n    rounded?: boolean;\n    /** Thumbnail layout */\n    thumbnail?: boolean;\n}\n\ntype ImageProps = JSX.IntrinsicElements[\"img\"] &\n    CommonProps & {\n        type?: \"img\";\n    };\n\ntype DivImageProps = JSX.IntrinsicElements[\"div\"] &\n    CommonProps & {\n        type?: \"div\";\n        /** Sets the background attachment to fixed to allow parallax effect */\n        bgFixed?: boolean;\n        /** Image Source */\n        src?: string;\n        /** Image width */\n        width?: React.ReactText;\n        /** Image height */\n        height?: React.ReactText;\n    };\n\nexport type ImgProps = ImageProps | DivImageProps;\n\n/** Image component that uses native `img` element */\nexport const Img: React.FC<ImgProps> = React.memo(\n    React.forwardRef(\n        ({ type, responsive, rounded, thumbnail, bgFixed, src, width, height, children, ...props }: ImageProps & DivImageProps, ref: React.ForwardedRef<HTMLDivElement | HTMLImageElement>) => {\n            if (type === \"div\") {\n                const [naturalWidth, setNaturalWidth] = React.useState<number>();\n                const [naturalHeight, setNaturalHeight] = React.useState<number>();\n\n                /**\n                 * Retreives the image's meta information\n                 * @param {string} url The image URL\n                 */\n                const getMeta = React.useCallback(\n                    (url: string): void => {\n                        if (url) {\n                            var img: HTMLImageElement = new Image();\n                            img.onload = (ev: Event) => {\n                                const target: HTMLImageElement = ev.currentTarget as any;\n                                setNaturalWidth(target.naturalWidth);\n                                setNaturalHeight(target.naturalHeight);\n                                props.onLoad && props.onLoad(ev as any);\n                            };\n                            img.onerror = props.onError as any;\n                            img.src = url;\n                        }\n                    },\n                    [props.onLoad, props.onError]\n                );\n\n                React.useEffect(() => getMeta(src), [src]);\n\n                return (\n                    <div\n                        {...(props as DivImageProps)}\n                        ref={ref}\n                        className={classnames(\n                            \"rc\",\n                            \"img\",\n                            {\n                                \"img-fluid\": responsive,\n                                \"img-rounded\": rounded,\n                                \"img-thumbnail\": thumbnail,\n                                \"img-fixed\": bgFixed,\n                            },\n                            props.className\n                        )}\n                        style={{\n                            ...props.style,\n                            width: width || props.style?.width || naturalWidth,\n                            height: height || props.style?.height || React.Children.toArray(children).length ? \"auto\" : responsive || thumbnail ? \"100%\" : naturalHeight,\n                            backgroundImage: props.style?.backgroundImage || `url(${src})`,\n                        }}\n                    >\n                        {children}\n                    </div>\n                );\n            } else {\n                return (\n                    <img\n                        src={src}\n                        ref={ref as React.ForwardedRef<HTMLImageElement>}\n                        width={width}\n                        height={height}\n                        {...(props as ImageProps)}\n                        className={classnames(\n                            \"rc\",\n                            \"img\",\n                            {\n                                \"img-fluid\": responsive,\n                                \"img-rounded\": rounded,\n                                \"img-thumbnail\": thumbnail,\n                            },\n                            props.className\n                        )}\n                    />\n                );\n            }\n        }\n    )\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./img.scss\\\";\\n\\ninterface CommonProps {\\n    /** Making the image responsive and adaptive to its parent size */\\n    responsive?: boolean;\\n    /** Adds default border radius */\\n    rounded?: boolean;\\n    /** Thumbnail layout */\\n    thumbnail?: boolean;\\n}\\n\\ntype ImageProps = JSX.IntrinsicElements[\\\"img\\\"] &\\n    CommonProps & {\\n        type?: \\\"img\\\";\\n    };\\n\\ntype DivImageProps = JSX.IntrinsicElements[\\\"div\\\"] &\\n    CommonProps & {\\n        type?: \\\"div\\\";\\n        /** Sets the background attachment to fixed to allow parallax effect */\\n        bgFixed?: boolean;\\n        /** Image Source */\\n        src?: string;\\n        /** Image width */\\n        width?: React.ReactText;\\n        /** Image height */\\n        height?: React.ReactText;\\n    };\\n\\nexport type ImgProps = ImageProps | DivImageProps;\\n\\n/** Image component that uses native `img` element */\\nexport const Img: React.FC<ImgProps> = React.memo(\\n    React.forwardRef(\\n        ({ type, responsive, rounded, thumbnail, bgFixed, src, width, height, children, ...props }: ImageProps & DivImageProps, ref: React.ForwardedRef<HTMLDivElement | HTMLImageElement>) => {\\n            if (type === \\\"div\\\") {\\n                const [naturalWidth, setNaturalWidth] = React.useState<number>();\\n                const [naturalHeight, setNaturalHeight] = React.useState<number>();\\n\\n                /**\\n                 * Retreives the image's meta information\\n                 * @param {string} url The image URL\\n                 */\\n                const getMeta = React.useCallback(\\n                    (url: string): void => {\\n                        if (url) {\\n                            var img: HTMLImageElement = new Image();\\n                            img.onload = (ev: Event) => {\\n                                const target: HTMLImageElement = ev.currentTarget as any;\\n                                setNaturalWidth(target.naturalWidth);\\n                                setNaturalHeight(target.naturalHeight);\\n                                props.onLoad && props.onLoad(ev as any);\\n                            };\\n                            img.onerror = props.onError as any;\\n                            img.src = url;\\n                        }\\n                    },\\n                    [props.onLoad, props.onError]\\n                );\\n\\n                React.useEffect(() => getMeta(src), [src]);\\n\\n                return (\\n                    <div\\n                        {...(props as DivImageProps)}\\n                        ref={ref}\\n                        className={classnames(\\n                            \\\"rc\\\",\\n                            \\\"img\\\",\\n                            {\\n                                \\\"img-fluid\\\": responsive,\\n                                \\\"img-rounded\\\": rounded,\\n                                \\\"img-thumbnail\\\": thumbnail,\\n                                \\\"img-fixed\\\": bgFixed,\\n                            },\\n                            props.className\\n                        )}\\n                        style={{\\n                            ...props.style,\\n                            width: width || props.style?.width || naturalWidth,\\n                            height: height || props.style?.height || React.Children.toArray(children).length ? \\\"auto\\\" : responsive || thumbnail ? \\\"100%\\\" : naturalHeight,\\n                            backgroundImage: props.style?.backgroundImage || `url(${src})`,\\n                        }}\\n                    >\\n                        {children}\\n                    </div>\\n                );\\n            } else {\\n                return (\\n                    <img\\n                        src={src}\\n                        ref={ref as React.ForwardedRef<HTMLImageElement>}\\n                        width={width}\\n                        height={height}\\n                        {...(props as ImageProps)}\\n                        className={classnames(\\n                            \\\"rc\\\",\\n                            \\\"img\\\",\\n                            {\\n                                \\\"img-fluid\\\": responsive,\\n                                \\\"img-rounded\\\": rounded,\\n                                \\\"img-thumbnail\\\": thumbnail,\\n                            },\\n                            props.className\\n                        )}\\n                    />\\n                );\\n            }\\n        }\\n    )\\n);\\n\";"],"names":["importString","require","imgTypes","key","value","label","additionalProps","wrapperProps","className","useDynamicForm","items","description","controlType","options","rulerKey","formElementAdditionalProps","condition","renderControls","controls","mainFile","example","src","withPrefix","type","imgType","width","height","rounded","thumbnail","responsive","bgFixed","showChildren","code","Button","React","ref","theme","size","block","props","classnames","children","Img","naturalWidth","setNaturalWidth","naturalHeight","setNaturalHeight","getMeta","url","img","Image","onload","ev","target","currentTarget","onLoad","onerror","onError","style","length","backgroundImage"],"sourceRoot":""}