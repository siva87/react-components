"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[6226],{9361:function(e,n,a){a.r(n);var r=a(27378),s=a(45141),t=a(57518),o=a(26556),l=a(63675),p=[{key:"error",label:"danger",value:"danger",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"success",label:"success",value:"success",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"warning",label:"warning",value:"warning",additionalProps:{wrapperProps:{className:"d-inline-block"}}}],i=r.memo((function(){var e=r.useState(0),n=e[0],a=e[1],i=(0,t.b)([{key:"controls",items:[{key:"min",value:0,min:0,max:100,label:"Min",controlType:"Stepper"},{key:"max",value:10,min:0,max:100,label:"Max",controlType:"Stepper"},{key:"disabled",label:"disabled",controlType:"Checkbox"},{key:"indicator",label:"indicator",controlType:"Checkbox"},{key:"indicatorType",rulerKey:"indicator",condition:!0,label:"Indicator type",options:p,controlType:"Radio",value:p[0].value,formElementAdditionalProps:{className:"indent pl-3 pt-2"}}]}]),c=i[0],d=i[1].controls,m=r.useMemo((function(){return d.indicator?{type:d.indicatorType,message:"Indicator message"}:null}),[d.indicator,d.indicatorType]);return r.createElement(s.Z,{mainFile:l,example:r.createElement("div",{className:"w-100"},r.createElement(o.v,{label:"Element label",min:d.min,max:d.max,onIncrease:function(){return a(n+1)},onDecrease:function(){return a(n-1)},disabled:d.disabled,value:n,indicator:m})),code:'<Stepper\n    label={"stepper label"}\n    min={0}\n    max={100}\n    onIncrease={null}\n    onDecrease={null}\n    value={0}\n/>',controls:c()})}));n.default=i},63675:function(e,n,a){a.r(n),n.default='import React from "react";\nimport classnames from "classnames";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator";\nimport "./stepper.scss";\n\nexport type StepperProps = JSX.IntrinsicElements["input"] & {\n    /** Element label */\n    label?: string;\n    /** callback when element value is decreased */\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** callback when element value is increased */\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** Feedback indicator */\n    indicator?: Indicator;\n    /** Props for the wrapper element (div) */\n    wrapperProps?: JSX.IntrinsicElements["div"];\n};\n\n/** A stepper makes it easier to input values that are in a narrow range */\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\n    ({ label, onDecrease, onIncrease, indicator, wrapperProps = {}, ...props }: StepperProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n        const [id, setId] = React.useState<string>("");\n\n        React.useEffect(() => {\n            setId(props.id ? props.id : randomId("stepper-"));\n        }, [props.id]);\n\n        return (\n            <div {...wrapperProps} className={classnames("rc custom-stepper", wrapperProps.className)}>\n                {label && <label className="custom-label">{label}</label>}\n                <FeedbackIndicator {...indicator}>\n                    <div className={"stepper-container" + (props.disabled ? " disabled" : "")}>\n                        <button\n                            className={"stepper-decrement" + (props.value === props.min ? " disabled" : "")}\n                            onClick={props.value > props.min && !props.disabled ? onDecrease : null}\n                            aria-controls={id}\n                            aria-labelledby="decrement"\n                        >\n                            <span>&#8722;</span>\n                        </button>\n                        <div className="stepper-preview">\n                            <span>{props.value}</span>\n                        </div>\n                        <button\n                            className={"stepper-increment" + (props.value === props.max ? " disabled" : "")}\n                            onClick={props.value < props.max && !props.disabled ? onIncrease : null}\n                            aria-controls={id}\n                            aria-labelledby="increment"\n                        >\n                            <span>&#43;</span>\n                        </button>\n                    </div>\n                </FeedbackIndicator>\n                <input {...props} ref={ref} id={id} type="number" readOnly={true} className={classnames("stepper-input", props.className)} aria-live="assertive" />\n            </div>\n        );\n    }\n);\n'}}]);
//# sourceMappingURL=component---src-pages-docs-stepper-tsx-074eb22977f117af1a09.js.map