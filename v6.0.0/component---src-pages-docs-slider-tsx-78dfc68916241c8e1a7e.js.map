{"version":3,"file":"component---src-pages-docs-slider-tsx-78dfc68916241c8e1a7e.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/slider.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx?0b8e"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { SliderLabel, Slider, SliderTheme } from \"@sebgroup/react-components/Slider\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Slider/Slider\");\nconst code: string = `<Slider value={value} onChange={e => setValue(parseInt(e.target.value))} />`;\n\nconst tooltipThemes: Array<DynamicFormOption<SliderTheme>> = [\n    { key: \"inverted\", label: \"Inverted\", value: \"inverted\" },\n    { key: \"danger\", label: \"Danger\", value: \"danger\" },\n    { key: \"primary\", label: \"Primary\", value: \"primary\" },\n    { key: \"purple\", label: \"Purple\", value: \"purple\" },\n    { key: \"success\", label: \"Success\", value: \"success\" },\n    { key: \"warning\", label: \"Warning\", value: \"warning\" },\n];\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst SliderPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<number>(1);\n\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"theme\", label: \"Theme\", options: tooltipThemes, value: \"primary\", controlType: \"Dropdown\", additionalProps: { className: \"indent pl-3 pt-2\" } },\n                { key: \"tooltipTheme\", label: \"Tooltip theme\", options: tooltipThemes, value: \"inverted\", controlType: \"Dropdown\", additionalProps: { className: \"indent pl-3 pt-2\" } },\n                { key: \"min\", label: \"Min\", controlType: \"Text\", value: 1, valueType: \"number\" },\n                { key: \"max\", label: \"Max\", controlType: \"Text\", value: 100, valueType: \"number\" },\n                { key: \"step\", label: \"Step\", controlType: \"Text\", value: 1, valueType: \"number\" },\n                { key: \"alternative\", label: \"alternative\", controlType: \"Checkbox\", value: false, description: \"Render with an alternative style\" },\n                { key: \"alwaysShowTooltip\", label: \"alwaysShowTooltip\", controlType: \"Checkbox\", value: false },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\", value: false },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", value: false },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    controlType: \"Radio\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    options: indicators,\n                    value: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n                { key: \"labels\", label: \"labels\", controlType: \"Checkbox\", value: false, description: \"Pass a list of positions and labels to be mapped\" },\n                {\n                    key: \"showTicks\",\n                    label: \"showTicks\",\n                    controlType: \"Checkbox\",\n                    value: false,\n                    description: \"Show ticks for the lables\",\n                    rulerKey: \"labels\",\n                    condition: true,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    const center: number = Math.floor((controls.max - controls.min) / 2) + controls.min;\n\n    const labels: SliderLabel[] = [\n        { position: controls.min, label: controls.min },\n        { position: center, label: center },\n        { position: controls.max, label: controls.max },\n    ];\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Slider {...controls} value={value} indicator={indicator} onChange={(e) => setValue(Number(e.target.value))} labels={controls.labels ? labels : null} />\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default SliderPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./slider.scss\";\n\nconst angleLeftIcon: JSX.Element = (\n    <svg name=\"angle-left\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z\" />\n    </svg>\n);\nconst angleRightIcon: JSX.Element = (\n    <svg name=\"angle-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\" />\n    </svg>\n);\n\nexport type SliderTheme = \"primary\" | \"inverted\" | \"success\" | \"danger\" | \"warning\" | \"purple\";\nexport type SliderAppearance = \"normal\" | \"alternative\";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** maximum value for range */\n    max?: number;\n    /** minimum value for range */\n    min?: number;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** step per increment or decrement */\n    step?: number;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\ntype AppearanceStyleMap = {\n    [key in SliderAppearance]: {\n        width: string;\n        offset: string;\n    };\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \"primary\", alternative, tooltipTheme = \"inverted\", tooltipValue, indicator, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const [minValue, setMinValue] = React.useState<number>(min || 0);\n        const [maxValue, setMaxValue] = React.useState<number>(max || 100);\n        const [size, setSize] = React.useState<number>(0);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [thumbPosition, setThumbPosition] = React.useState<number>(0);\n        const [activeTrackStyles, setActiveTrackStyles] = React.useState<React.CSSProperties>({});\n        const appearanceSizesMap: AppearanceStyleMap = {\n            alternative: { width: \"27px\", offset: \"56px\" },\n            normal: { width: \"5px\", offset: \"24px\" },\n        };\n        const appearance: SliderAppearance = alternative ? \"alternative\" : \"normal\";\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== \"number\" ? 0 : min;\n            const maxValue: number = typeof max !== \"number\" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n            setSize(getSize(minValue, maxValue));\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + \"%\");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setThumbPosition(getPercentage());\n            setActiveTrackStyles(getActiveTrackStyles());\n        }, [props.value, minValue, maxValue, size, appearance]);\n\n        /**\n         * Finds the size between two numbers\n         * @param {number} minValue The minimum value\n         * @param {number} maxValue The maximum value\n         * @returns {number} The size\n         */\n        function getSize(minValue: number, maxValue: number): number {\n            if (maxValue > minValue) {\n                return maxValue - minValue;\n            } else {\n                // Will calculate the size anyway, but it will show a warning since the min is larger than the max\n                console.warn(`The max value of the slider should be larger than the min value (Max:${maxValue}, Min: ${minValue}`);\n                return minValue - maxValue;\n            }\n        }\n\n        /**\n         * Converts the current value to percentage based on min and max\n         * @returns {number} The precentage\n         */\n        function getPercentage(): number {\n            if (props.value <= minValue) {\n                return 0;\n            } else if (props.value >= maxValue) {\n                return 100;\n            } else {\n                const distanceFromMin: number = Math.abs(props.value - minValue);\n                return size ? (distanceFromMin / size) * 100 : 0;\n            }\n        }\n\n        /**\n         * Calculates the styles needed for the active track\n         * @returns {React.CSSProperties} The active track styles object\n         */\n        const getActiveTrackStyles: () => React.CSSProperties = React.useCallback(() => {\n            const calculatedThumbPosition: number = getPercentage();\n            let zeroPosition: number;\n            const { width, offset }: AppearanceStyleMap[keyof AppearanceStyleMap] = appearanceSizesMap[appearance];\n            const style: React.CSSProperties = {};\n            if (minValue >= 0) {\n                zeroPosition = 0;\n                style.left = `${zeroPosition}%`;\n                style.width = `calc(${calculatedThumbPosition}% + ${width})`;\n            } else if (maxValue <= 0) {\n                zeroPosition = 100;\n                style.left = `calc(${zeroPosition}% + ${offset})`;\n                style.width = `calc(${100 - calculatedThumbPosition}% + ${width})`;\n                style.transform = \"rotateY(180deg)\";\n            } else {\n                if (props.value <= 0) {\n                    zeroPosition = size ? Math.abs((minValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = zeroPosition - calculatedThumbPosition + \"%\";\n                    style.transform = \"rotateY(180deg)\";\n                } else {\n                    zeroPosition = size ? Math.abs(100 - (maxValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = calculatedThumbPosition - zeroPosition + \"%\";\n                }\n            }\n            return style;\n        }, [appearance, props.value, getPercentage]);\n\n        /**\n         * Calculating the position of the label based on it's value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        /**\n         * Determines whether to enable or disable CSS transitions based on the total amount of steps\n         * This is fix for a performance impact caused by rapidly updating the state when sliding\n         * @var maxNumberOfStepsToAllowTransition represents the maximum number of steps to have the\n         * transitions enabled. Transitions would be disabled when exceeding that number;\n         * @returns {boolean} `True` if it should transition\n         */\n        function shouldEnableTransition(): boolean {\n            const maxNumberOfStepsToAllowTransition: number = 30;\n            return size / step <= maxNumberOfStepsToAllowTransition;\n        }\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames(\"rc custom-slider\", props.className, { disabled: props.disabled })}>\n                    {label && <label className=\"custom-label\">{label}</label>}\n                    <div className={classnames(\"input-field\", appearance, { \"has-labels\": labels && labels.length })}>\n                        <input {...props} ref={ref} type=\"range\" min={minValue} max={maxValue} step={step} />\n                        <div className={classnames(\"custom-slider-holder\", theme)}>\n                            <div className={classnames(\"custom-slider-track\", { \"with-transitions\": shouldEnableTransition() })}>\n                                <div className=\"custom-slider-slider-before\" />\n                                <div className=\"custom-slider-slider-after\" style={activeTrackStyles} />\n                                <div className=\"custom-slider-thumb\" style={{ left: thumbPosition + \"%\" }}>\n                                    <div className={classnames(\"custom-slider-preview\", tooltipTheme, { \"always-show\": alwaysShowTooltip })}>{tooltipValue || props.value}</div>\n                                    {appearance === \"alternative\" ? (\n                                        <>\n                                            <span className=\"custom-slider-icon-left\">{angleLeftIcon}</span>\n                                            <span className=\"custom-slider-icon-right\">{angleRightIcon}</span>\n                                        </>\n                                    ) : null}\n                                </div>\n                                {labels && labels.length\n                                    ? labels.map((label: SliderLabel, i: number) => (\n                                          <div key={i} className={classnames(\"custom-slider-label\", { \"show-ticks\": showTicks })} style={{ left: labelsPositions[i] }}>\n                                              <span>{label.label}</span>\n                                          </div>\n                                      ))\n                                    : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./slider.scss\\\";\\n\\nconst angleLeftIcon: JSX.Element = (\\n    <svg name=\\\"angle-left\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 192 512\\\">\\n        <path d=\\\"M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z\\\" />\\n    </svg>\\n);\\nconst angleRightIcon: JSX.Element = (\\n    <svg name=\\\"angle-right\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 192 512\\\">\\n        <path d=\\\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\\\" />\\n    </svg>\\n);\\n\\nexport type SliderTheme = \\\"primary\\\" | \\\"inverted\\\" | \\\"success\\\" | \\\"danger\\\" | \\\"warning\\\" | \\\"purple\\\";\\nexport type SliderAppearance = \\\"normal\\\" | \\\"alternative\\\";\\n\\nexport interface SliderLabel {\\n    position: number;\\n    label: React.ReactNode;\\n}\\n\\nexport type SliderProps = Omit<JSX.IntrinsicElements[\\\"input\\\"], \\\"value\\\"> & {\\n    /** set to always show tooltip */\\n    alwaysShowTooltip?: boolean;\\n    /** field label */\\n    label?: string;\\n    /** range slider labels */\\n    labels?: Array<SliderLabel>;\\n    /** maximum value for range */\\n    max?: number;\\n    /** minimum value for range */\\n    min?: number;\\n    /** set to show ticks */\\n    showTicks?: boolean;\\n    /** step per increment or decrement */\\n    step?: number;\\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\\n    theme?: SliderTheme;\\n    /** set to show alternative theme */\\n    alternative?: boolean;\\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\\n    tooltipTheme?: SliderTheme;\\n    /** tooltip value */\\n    tooltipValue?: string;\\n    /** field value */\\n    value: number;\\n    /** Indicator type and message */\\n    indicator?: Indicator;\\n};\\n\\ntype AppearanceStyleMap = {\\n    [key in SliderAppearance]: {\\n        width: string;\\n        offset: string;\\n    };\\n};\\n\\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\\n    (\\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \\\"primary\\\", alternative, tooltipTheme = \\\"inverted\\\", tooltipValue, indicator, ...props }: SliderProps,\\n        ref: React.ForwardedRef<HTMLInputElement>\\n    ) => {\\n        const [minValue, setMinValue] = React.useState<number>(min || 0);\\n        const [maxValue, setMaxValue] = React.useState<number>(max || 100);\\n        const [size, setSize] = React.useState<number>(0);\\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\\n        const [thumbPosition, setThumbPosition] = React.useState<number>(0);\\n        const [activeTrackStyles, setActiveTrackStyles] = React.useState<React.CSSProperties>({});\\n        const appearanceSizesMap: AppearanceStyleMap = {\\n            alternative: { width: \\\"27px\\\", offset: \\\"56px\\\" },\\n            normal: { width: \\\"5px\\\", offset: \\\"24px\\\" },\\n        };\\n        const appearance: SliderAppearance = alternative ? \\\"alternative\\\" : \\\"normal\\\";\\n\\n        React.useEffect(() => {\\n            // Checking if the min or max are not numbers, null value or undefined\\n            const minValue: number = typeof min !== \\\"number\\\" ? 0 : min;\\n            const maxValue: number = typeof max !== \\\"number\\\" ? 100 : max;\\n            setMinValue(minValue);\\n            setMaxValue(maxValue);\\n            setSize(getSize(minValue, maxValue));\\n        }, [min, max]);\\n\\n        React.useEffect(() => {\\n            if (labels && labels.length) {\\n                const positions: Array<string> = [];\\n                labels.map((label: SliderLabel) => {\\n                    positions.push(getLabelPosition(label.position) + \\\"%\\\");\\n                });\\n                setLabelsPositions(positions);\\n            }\\n        }, [labels, minValue, maxValue]);\\n\\n        React.useEffect(() => {\\n            setThumbPosition(getPercentage());\\n            setActiveTrackStyles(getActiveTrackStyles());\\n        }, [props.value, minValue, maxValue, size, appearance]);\\n\\n        /**\\n         * Finds the size between two numbers\\n         * @param {number} minValue The minimum value\\n         * @param {number} maxValue The maximum value\\n         * @returns {number} The size\\n         */\\n        function getSize(minValue: number, maxValue: number): number {\\n            if (maxValue > minValue) {\\n                return maxValue - minValue;\\n            } else {\\n                // Will calculate the size anyway, but it will show a warning since the min is larger than the max\\n                console.warn(`The max value of the slider should be larger than the min value (Max:${maxValue}, Min: ${minValue}`);\\n                return minValue - maxValue;\\n            }\\n        }\\n\\n        /**\\n         * Converts the current value to percentage based on min and max\\n         * @returns {number} The precentage\\n         */\\n        function getPercentage(): number {\\n            if (props.value <= minValue) {\\n                return 0;\\n            } else if (props.value >= maxValue) {\\n                return 100;\\n            } else {\\n                const distanceFromMin: number = Math.abs(props.value - minValue);\\n                return size ? (distanceFromMin / size) * 100 : 0;\\n            }\\n        }\\n\\n        /**\\n         * Calculates the styles needed for the active track\\n         * @returns {React.CSSProperties} The active track styles object\\n         */\\n        const getActiveTrackStyles: () => React.CSSProperties = React.useCallback(() => {\\n            const calculatedThumbPosition: number = getPercentage();\\n            let zeroPosition: number;\\n            const { width, offset }: AppearanceStyleMap[keyof AppearanceStyleMap] = appearanceSizesMap[appearance];\\n            const style: React.CSSProperties = {};\\n            if (minValue >= 0) {\\n                zeroPosition = 0;\\n                style.left = `${zeroPosition}%`;\\n                style.width = `calc(${calculatedThumbPosition}% + ${width})`;\\n            } else if (maxValue <= 0) {\\n                zeroPosition = 100;\\n                style.left = `calc(${zeroPosition}% + ${offset})`;\\n                style.width = `calc(${100 - calculatedThumbPosition}% + ${width})`;\\n                style.transform = \\\"rotateY(180deg)\\\";\\n            } else {\\n                if (props.value <= 0) {\\n                    zeroPosition = size ? Math.abs((minValue / size) * 100) : 0;\\n                    style.left = `calc(${zeroPosition}% + ${width})`;\\n                    style.width = zeroPosition - calculatedThumbPosition + \\\"%\\\";\\n                    style.transform = \\\"rotateY(180deg)\\\";\\n                } else {\\n                    zeroPosition = size ? Math.abs(100 - (maxValue / size) * 100) : 0;\\n                    style.left = `calc(${zeroPosition}% + ${width})`;\\n                    style.width = calculatedThumbPosition - zeroPosition + \\\"%\\\";\\n                }\\n            }\\n            return style;\\n        }, [appearance, props.value, getPercentage]);\\n\\n        /**\\n         * Calculating the position of the label based on it's value\\n         * @param {number} value The Slider value\\n         * @returns {number} The position of the label in percentage\\n         */\\n        function getLabelPosition(value: number): number {\\n            if (value >= maxValue) {\\n                return 100;\\n            } else if (value <= minValue) {\\n                return 0;\\n            }\\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\\n        }\\n\\n        /**\\n         * Determines whether to enable or disable CSS transitions based on the total amount of steps\\n         * This is fix for a performance impact caused by rapidly updating the state when sliding\\n         * @var maxNumberOfStepsToAllowTransition represents the maximum number of steps to have the\\n         * transitions enabled. Transitions would be disabled when exceeding that number;\\n         * @returns {boolean} `True` if it should transition\\n         */\\n        function shouldEnableTransition(): boolean {\\n            const maxNumberOfStepsToAllowTransition: number = 30;\\n            return size / step <= maxNumberOfStepsToAllowTransition;\\n        }\\n\\n        return (\\n            <FeedbackIndicator {...indicator} noBorder>\\n                <div className={classnames(\\\"rc custom-slider\\\", props.className, { disabled: props.disabled })}>\\n                    {label && <label className=\\\"custom-label\\\">{label}</label>}\\n                    <div className={classnames(\\\"input-field\\\", appearance, { \\\"has-labels\\\": labels && labels.length })}>\\n                        <input {...props} ref={ref} type=\\\"range\\\" min={minValue} max={maxValue} step={step} />\\n                        <div className={classnames(\\\"custom-slider-holder\\\", theme)}>\\n                            <div className={classnames(\\\"custom-slider-track\\\", { \\\"with-transitions\\\": shouldEnableTransition() })}>\\n                                <div className=\\\"custom-slider-slider-before\\\" />\\n                                <div className=\\\"custom-slider-slider-after\\\" style={activeTrackStyles} />\\n                                <div className=\\\"custom-slider-thumb\\\" style={{ left: thumbPosition + \\\"%\\\" }}>\\n                                    <div className={classnames(\\\"custom-slider-preview\\\", tooltipTheme, { \\\"always-show\\\": alwaysShowTooltip })}>{tooltipValue || props.value}</div>\\n                                    {appearance === \\\"alternative\\\" ? (\\n                                        <>\\n                                            <span className=\\\"custom-slider-icon-left\\\">{angleLeftIcon}</span>\\n                                            <span className=\\\"custom-slider-icon-right\\\">{angleRightIcon}</span>\\n                                        </>\\n                                    ) : null}\\n                                </div>\\n                                {labels && labels.length\\n                                    ? labels.map((label: SliderLabel, i: number) => (\\n                                          <div key={i} className={classnames(\\\"custom-slider-label\\\", { \\\"show-ticks\\\": showTicks })} style={{ left: labelsPositions[i] }}>\\n                                              <span>{label.label}</span>\\n                                          </div>\\n                                      ))\\n                                    : null}\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </FeedbackIndicator>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","tooltipThemes","key","label","value","indicators","additionalProps","wrapperProps","className","React","setValue","useDynamicForm","items","options","controlType","valueType","description","rulerKey","condition","formElementAdditionalProps","renderControls","controls","center","Math","floor","max","min","labels","position","indicator","type","indicatorType","message","mainFile","example","onChange","e","Number","target","code","angleLeftIcon","name","xmlns","viewBox","d","angleRightIcon","Slider","ref","alwaysShowTooltip","showTicks","step","theme","alternative","tooltipTheme","tooltipValue","props","minValue","setMinValue","maxValue","setMaxValue","size","setSize","labelsPositions","setLabelsPositions","thumbPosition","setThumbPosition","activeTrackStyles","setActiveTrackStyles","appearanceSizesMap","width","offset","normal","appearance","getPercentage","distanceFromMin","abs","console","warn","getSize","length","positions","map","push","getLabelPosition","getActiveTrackStyles","zeroPosition","calculatedThumbPosition","style","left","transform","FeedbackIndicator","noBorder","classnames","disabled","i"],"sourceRoot":""}