{"version":3,"file":"component---src-pages-docs-closebutton-tsx-88109144262c761fa5af.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/closebutton.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx","webpack://react-components-docs/../lib/src/CloseButton/CloseButton.tsx?b666"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { CloseButton } from \"@sebgroup/react-components/CloseButton\";\nimport { Slider } from \"@sebgroup/react-components/Slider\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/CloseButton/CloseButton\");\nconst code: string = `<CloseButton />`;\n\nconst ChipPage: React.FC = (): React.ReactElement<void> => {\n    const [size, setSize] = React.useState<number>(30);\n\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" }],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100 d-flex justify-content-center\">\n                    <CloseButton style={{ fontSize: size }} onClick={() => console.log(\"Clicked\")} disabled={controls.disabled} />\n                </div>\n            }\n            code={code}\n            controls={\n                <>\n                    <p>You can scale up/down the size of the button using font-size</p>\n                    <Slider min={10} max={50} step={10} value={size} onChange={(e) => setSize(parseInt(e.target.value))} />\n                    {renderControls()}\n                </>\n            }\n        />\n    );\n};\n\nexport default ChipPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./slider.scss\";\n\nconst angleLeftIcon: JSX.Element = (\n    <svg name=\"angle-left\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z\" />\n    </svg>\n);\nconst angleRightIcon: JSX.Element = (\n    <svg name=\"angle-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\" />\n    </svg>\n);\n\nexport type SliderTheme = \"primary\" | \"inverted\" | \"success\" | \"danger\" | \"warning\" | \"purple\";\nexport type SliderAppearance = \"normal\" | \"alternative\";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** maximum value for range */\n    max?: number;\n    /** minimum value for range */\n    min?: number;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** step per increment or decrement */\n    step?: number;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\ntype AppearanceStyleMap = {\n    [key in SliderAppearance]: {\n        width: string;\n        offset: string;\n    };\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \"primary\", alternative, tooltipTheme = \"inverted\", tooltipValue, indicator, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const [minValue, setMinValue] = React.useState<number>(min || 0);\n        const [maxValue, setMaxValue] = React.useState<number>(max || 100);\n        const [size, setSize] = React.useState<number>(0);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [thumbPosition, setThumbPosition] = React.useState<number>(0);\n        const [activeTrackStyles, setActiveTrackStyles] = React.useState<React.CSSProperties>({});\n        const appearanceSizesMap: AppearanceStyleMap = {\n            alternative: { width: \"27px\", offset: \"56px\" },\n            normal: { width: \"5px\", offset: \"24px\" },\n        };\n        const appearance: SliderAppearance = alternative ? \"alternative\" : \"normal\";\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== \"number\" ? 0 : min;\n            const maxValue: number = typeof max !== \"number\" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n            setSize(getSize(minValue, maxValue));\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + \"%\");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setThumbPosition(getPercentage());\n            setActiveTrackStyles(getActiveTrackStyles());\n        }, [props.value, minValue, maxValue, size, appearance]);\n\n        /**\n         * Finds the size between two numbers\n         * @param {number} minValue The minimum value\n         * @param {number} maxValue The maximum value\n         * @returns {number} The size\n         */\n        function getSize(minValue: number, maxValue: number): number {\n            if (maxValue > minValue) {\n                return maxValue - minValue;\n            } else {\n                // Will calculate the size anyway, but it will show a warning since the min is larger than the max\n                console.warn(`The max value of the slider should be larger than the min value (Max:${maxValue}, Min: ${minValue}`);\n                return minValue - maxValue;\n            }\n        }\n\n        /**\n         * Converts the current value to percentage based on min and max\n         * @returns {number} The precentage\n         */\n        function getPercentage(): number {\n            if (props.value <= minValue) {\n                return 0;\n            } else if (props.value >= maxValue) {\n                return 100;\n            } else {\n                const distanceFromMin: number = Math.abs(props.value - minValue);\n                return size ? (distanceFromMin / size) * 100 : 0;\n            }\n        }\n\n        /**\n         * Calculates the styles needed for the active track\n         * @returns {React.CSSProperties} The active track styles object\n         */\n        const getActiveTrackStyles: () => React.CSSProperties = React.useCallback(() => {\n            const calculatedThumbPosition: number = getPercentage();\n            let zeroPosition: number;\n            const { width, offset }: AppearanceStyleMap[keyof AppearanceStyleMap] = appearanceSizesMap[appearance];\n            const style: React.CSSProperties = {};\n            if (minValue >= 0) {\n                zeroPosition = 0;\n                style.left = `${zeroPosition}%`;\n                style.width = `calc(${calculatedThumbPosition}% + ${width})`;\n            } else if (maxValue <= 0) {\n                zeroPosition = 100;\n                style.left = `calc(${zeroPosition}% + ${offset})`;\n                style.width = `calc(${100 - calculatedThumbPosition}% + ${width})`;\n                style.transform = \"rotateY(180deg)\";\n            } else {\n                if (props.value <= 0) {\n                    zeroPosition = size ? Math.abs((minValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = zeroPosition - calculatedThumbPosition + \"%\";\n                    style.transform = \"rotateY(180deg)\";\n                } else {\n                    zeroPosition = size ? Math.abs(100 - (maxValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = calculatedThumbPosition - zeroPosition + \"%\";\n                }\n            }\n            return style;\n        }, [appearance, props.value, getPercentage]);\n\n        /**\n         * Calculating the position of the label based on it's value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        /**\n         * Determines whether to enable or disable CSS transitions based on the total amount of steps\n         * This is fix for a performance impact caused by rapidly updating the state when sliding\n         * @var maxNumberOfStepsToAllowTransition represents the maximum number of steps to have the\n         * transitions enabled. Transitions would be disabled when exceeding that number;\n         * @returns {boolean} `True` if it should transition\n         */\n        function shouldEnableTransition(): boolean {\n            const maxNumberOfStepsToAllowTransition: number = 30;\n            return size / step <= maxNumberOfStepsToAllowTransition;\n        }\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames(\"rc custom-slider\", props.className, { disabled: props.disabled })}>\n                    {label && <label className=\"custom-label\">{label}</label>}\n                    <div className={classnames(\"input-field\", appearance, { \"has-labels\": labels && labels.length })}>\n                        <input {...props} ref={ref} type=\"range\" min={minValue} max={maxValue} step={step} />\n                        <div className={classnames(\"custom-slider-holder\", theme)}>\n                            <div className={classnames(\"custom-slider-track\", { \"with-transitions\": shouldEnableTransition() })}>\n                                <div className=\"custom-slider-slider-before\" />\n                                <div className=\"custom-slider-slider-after\" style={activeTrackStyles} />\n                                <div className=\"custom-slider-thumb\" style={{ left: thumbPosition + \"%\" }}>\n                                    <div className={classnames(\"custom-slider-preview\", tooltipTheme, { \"always-show\": alwaysShowTooltip })}>{tooltipValue || props.value}</div>\n                                    {appearance === \"alternative\" ? (\n                                        <>\n                                            <span className=\"custom-slider-icon-left\">{angleLeftIcon}</span>\n                                            <span className=\"custom-slider-icon-right\">{angleRightIcon}</span>\n                                        </>\n                                    ) : null}\n                                </div>\n                                {labels && labels.length\n                                    ? labels.map((label: SliderLabel, i: number) => (\n                                          <div key={i} className={classnames(\"custom-slider-label\", { \"show-ticks\": showTicks })} style={{ left: labelsPositions[i] }}>\n                                              <span>{label.label}</span>\n                                          </div>\n                                      ))\n                                    : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./close-button.scss\\\";\\n\\n/**\\n * TODO: This is a component that fixes the broken `.close` element provided by Bootstrap\\n * This component should be replaced by the element from Bootstrap when this PR is merged:\\n * https://github.com/sebgroup/bootstrap/pull/533\\n */\\n\\nexport const CloseButton: React.FC<JSX.IntrinsicElements[\\\"button\\\"]> = React.memo(\\n    React.forwardRef((props: JSX.IntrinsicElements[\\\"button\\\"], ref: React.ForwardedRef<HTMLButtonElement>) => {\\n        return <button ref={ref} {...props} className={classnames(\\\"rc close-btn\\\", props.className)} />;\\n    })\\n);\\n\";"],"names":["importString","require","React","size","setSize","useDynamicForm","key","items","label","controlType","renderControls","controls","mainFile","example","className","style","fontSize","onClick","console","log","disabled","code","min","max","step","value","onChange","e","parseInt","target","angleLeftIcon","name","xmlns","viewBox","d","angleRightIcon","Slider","ref","alwaysShowTooltip","labels","showTicks","theme","alternative","tooltipTheme","tooltipValue","indicator","props","minValue","setMinValue","maxValue","setMaxValue","labelsPositions","setLabelsPositions","thumbPosition","setThumbPosition","activeTrackStyles","setActiveTrackStyles","appearanceSizesMap","width","offset","normal","appearance","getPercentage","distanceFromMin","Math","abs","warn","getSize","length","positions","map","push","getLabelPosition","position","getActiveTrackStyles","zeroPosition","calculatedThumbPosition","left","transform","FeedbackIndicator","noBorder","classnames","type","i"],"sourceRoot":""}