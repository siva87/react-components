{"version":3,"file":"component---src-pages-docs-steptracker-tsx-5991994e46fcdd81c3c8.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/StepTracker/StepLabel.tsx","webpack://react-components-docs/../lib/src/StepTracker/StepTracker.tsx","webpack://react-components-docs/./src/pages/docs/steptracker.tsx","webpack://react-components-docs/../lib/src/StepTracker/StepTracker.tsx?6934"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type StepLabelProps = JSX.IntrinsicElements[\"div\"] & {\n    isActive?: boolean;\n    label: React.ReactNode;\n};\n\nconst StepLabel: React.FC<StepLabelProps> = React.forwardRef(({ label, isActive, ...props }: StepLabelProps, ref: React.RefObject<HTMLDivElement>) => {\n    return (\n        <div ref={ref} className={classnames(\"text\", { active: isActive })} {...props}>\n            <div className=\"name\">{label}</div>\n        </div>\n    );\n});\n\nexport default StepLabel;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./steptracker.scss\";\nimport StepLabel, { StepLabelProps } from \"./StepLabel\";\n\nconst checkIcon: JSX.Element = (\n    <svg name=\"check\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n        <path d=\"M413.505 91.951L133.49 371.966l-98.995-98.995c-4.686-4.686-12.284-4.686-16.971 0L6.211 284.284c-4.686 4.686-4.686 12.284 0 16.971l118.794 118.794c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-11.314-11.314c-4.686-4.686-12.284-4.686-16.97 0z\" />\n    </svg>\n);\n\nexport type StepTrackerLabelPosition = \"right\" | \"left\" | \"bottom\" | \"top\";\nexport type StepTrackerLabelOrientation = \"horizontal\" | \"vertical\";\n\nexport type StepTrackerProps = Omit<JSX.IntrinsicElements[\"div\"], \"onClick\"> & {\n    /** Position of label in step tracker */\n    labelPosition?: StepTrackerLabelPosition;\n    /** list of item in step tracker */\n    list?: Array<StepLabelProps>;\n    /** callback when step tracker item clicked */\n    onClick?: (index: number) => void;\n    /** To display step tracker vertically or horizontally */\n    orientation?: StepTrackerLabelOrientation;\n    /** Current/ active step */\n    step: number;\n    /** Use numbers for each step */\n    useNumbers?: boolean;\n};\n/** Step trackers illustrate the steps in a multi step process */\nexport const StepTracker: React.FC<StepTrackerProps> = React.memo(\n    React.forwardRef(({ labelPosition = \"bottom\", list, onClick, orientation = \"horizontal\", step, useNumbers, ...props }: StepTrackerProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const [isVertical, setIsVertical] = React.useState<boolean>(orientation === \"vertical\");\n        const [stepList, setStepList] = React.useState<Array<number>>([]);\n\n        const getProgress = React.useCallback(\n            (pos: number): string => {\n                return (100 / (stepList.length - 1)) * pos + \"%\";\n            },\n            [stepList]\n        );\n\n        const getStyles = React.useCallback(\n            (key: keyof React.CSSProperties, pos: number): React.CSSProperties => {\n                return { [key]: getProgress(pos) };\n            },\n            [getProgress]\n        );\n\n        React.useEffect(() => {\n            setIsVertical(orientation === \"vertical\");\n        }, [orientation]);\n\n        React.useEffect(() => {\n            setStepList((list ? list : React.Children.toArray(props.children)).map((value: null, i: number) => i));\n        }, [props.children, list]);\n\n        return (\n            <div {...props} ref={ref} className={classnames(\"rc step-tracker\", orientation, labelPosition, props.className, { clickable: onClick })}>\n                <div className=\"step-wrapper\">\n                    <div className=\"line\">\n                        <div className=\"progress\" style={getStyles(isVertical ? \"height\" : \"width\", step)} />\n                    </div>\n                    {stepList.map((i: number) => (\n                        <div\n                            className={\"step\" + (step === i ? \" active\" : \"\") + (useNumbers ? \" numbered\" : \"\")}\n                            style={getStyles(isVertical ? \"top\" : \"left\", i)}\n                            onClick={() => onClick && onClick(i)}\n                            key={i}\n                        >\n                            <div className=\"step-border\" />\n                            {checkIcon}\n                            <div className=\"number\">{i + 1}</div>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"text-wrapper\">\n                    {list?.map((item: StepLabelProps, i: number) => (\n                        <StepLabel key={i} isActive={step === i} style={isVertical ? null : getStyles(\"width\", 1)} {...item} />\n                    ))}\n                    {React.Children.map(props.children, (Child: React.ReactElement<StepLabelProps>, i: number) =>\n                        React.isValidElement<React.FC<StepLabelProps>>(Child)\n                            ? React.cloneElement<any>(Child, {\n                                  isActive: step === i,\n                                  style: isVertical ? null : getStyles(\"width\", 1),\n                              })\n                            : Child\n                    )}\n                </div>\n            </div>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { StepTracker } from \"@sebgroup/react-components/StepTracker\";\nimport StepLabel, { StepLabelProps } from \"@sebgroup/react-components/StepTracker/StepLabel\";\n\nconst StepTrackerPage: React.FC = React.memo(() => {\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/StepTracker/StepTracker\");\n    const stepList: Array<StepLabelProps> = [{ label: \"First\" }, { label: \"Second\" }, { label: \"Third\" }, { label: \"Forth\" }];\n    const orientationList: Array<DynamicFormOption> = [\n        { label: \"vertical\", value: \"vertical\", key: \"vertical\" },\n        { label: \"horizontal\", value: \"horizontal\", key: \"horizontal\" },\n    ];\n    const directionlist: Array<DynamicFormOption> = [\n        { label: \"bottom\", value: \"bottom\", key: \"bottom\" },\n        { label: \"top\", value: \"top\", key: \"top\" },\n        { label: \"right\", value: \"right\", key: \"right\" },\n        { label: \"left\", value: \"left\", key: \"left\" },\n    ];\n    const [value, setValue] = React.useState<number>(0);\n    const fields: Array<DynamicFormSection> = React.useMemo(\n        () => [\n            {\n                key: \"controls\",\n                items: [\n                    {\n                        key: \"orientation\",\n                        value: orientationList[0].value,\n                        label: \"Orientation\",\n                        options: orientationList,\n                        controlType: \"Dropdown\",\n                    },\n                    {\n                        key: \"direction\",\n                        value: directionlist[0].value,\n                        label: \"Direction\",\n                        options: directionlist,\n                        controlType: \"Dropdown\",\n                    },\n                    {\n                        key: \"step\",\n                        value: value,\n                        min: 0,\n                        max: 3,\n                        label: \"Step\",\n                        controlType: \"Stepper\",\n                    },\n                    {\n                        label: \"Use numbers\",\n                        key: \"useNumbers\",\n                        value: false,\n                        controlType: \"Checkbox\",\n                    },\n                ],\n            },\n        ],\n        [value]\n    );\n    const [renderForm, form, setForm] = useDynamicForm(fields);\n    const code: string = `<StepTracker list={[{ label: \"hello\" }]} step={0} onClick={null} />`;\n\n    React.useEffect(() => {\n        setValue((form.controls as any)?.step);\n    }, [(form.controls as any)?.step]);\n\n    React.useEffect(() => {\n        if (value !== form.controls.step) {\n            setForm({\n                ...form,\n                controls: {\n                    ...form.controls,\n                    step: value,\n                },\n            });\n        }\n    }, [value]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <StepTracker\n                    step={value}\n                    onClick={setValue}\n                    orientation={(form.controls as any)?.orientation}\n                    labelPosition={(form.controls as any)?.direction}\n                    useNumbers={(form.controls as any)?.useNumbers}\n                >\n                    {stepList.map((item, i) => (\n                        <StepLabel label={item.label} key={i} />\n                    ))}\n                </StepTracker>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default StepTrackerPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./steptracker.scss\\\";\\nimport StepLabel, { StepLabelProps } from \\\"./StepLabel\\\";\\n\\nconst checkIcon: JSX.Element = (\\n    <svg name=\\\"check\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\">\\n        <path d=\\\"M413.505 91.951L133.49 371.966l-98.995-98.995c-4.686-4.686-12.284-4.686-16.971 0L6.211 284.284c-4.686 4.686-4.686 12.284 0 16.971l118.794 118.794c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-11.314-11.314c-4.686-4.686-12.284-4.686-16.97 0z\\\" />\\n    </svg>\\n);\\n\\nexport type StepTrackerLabelPosition = \\\"right\\\" | \\\"left\\\" | \\\"bottom\\\" | \\\"top\\\";\\nexport type StepTrackerLabelOrientation = \\\"horizontal\\\" | \\\"vertical\\\";\\n\\nexport type StepTrackerProps = Omit<JSX.IntrinsicElements[\\\"div\\\"], \\\"onClick\\\"> & {\\n    /** Position of label in step tracker */\\n    labelPosition?: StepTrackerLabelPosition;\\n    /** list of item in step tracker */\\n    list?: Array<StepLabelProps>;\\n    /** callback when step tracker item clicked */\\n    onClick?: (index: number) => void;\\n    /** To display step tracker vertically or horizontally */\\n    orientation?: StepTrackerLabelOrientation;\\n    /** Current/ active step */\\n    step: number;\\n    /** Use numbers for each step */\\n    useNumbers?: boolean;\\n};\\n/** Step trackers illustrate the steps in a multi step process */\\nexport const StepTracker: React.FC<StepTrackerProps> = React.memo(\\n    React.forwardRef(({ labelPosition = \\\"bottom\\\", list, onClick, orientation = \\\"horizontal\\\", step, useNumbers, ...props }: StepTrackerProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const [isVertical, setIsVertical] = React.useState<boolean>(orientation === \\\"vertical\\\");\\n        const [stepList, setStepList] = React.useState<Array<number>>([]);\\n\\n        const getProgress = React.useCallback(\\n            (pos: number): string => {\\n                return (100 / (stepList.length - 1)) * pos + \\\"%\\\";\\n            },\\n            [stepList]\\n        );\\n\\n        const getStyles = React.useCallback(\\n            (key: keyof React.CSSProperties, pos: number): React.CSSProperties => {\\n                return { [key]: getProgress(pos) };\\n            },\\n            [getProgress]\\n        );\\n\\n        React.useEffect(() => {\\n            setIsVertical(orientation === \\\"vertical\\\");\\n        }, [orientation]);\\n\\n        React.useEffect(() => {\\n            setStepList((list ? list : React.Children.toArray(props.children)).map((value: null, i: number) => i));\\n        }, [props.children, list]);\\n\\n        return (\\n            <div {...props} ref={ref} className={classnames(\\\"rc step-tracker\\\", orientation, labelPosition, props.className, { clickable: onClick })}>\\n                <div className=\\\"step-wrapper\\\">\\n                    <div className=\\\"line\\\">\\n                        <div className=\\\"progress\\\" style={getStyles(isVertical ? \\\"height\\\" : \\\"width\\\", step)} />\\n                    </div>\\n                    {stepList.map((i: number) => (\\n                        <div\\n                            className={\\\"step\\\" + (step === i ? \\\" active\\\" : \\\"\\\") + (useNumbers ? \\\" numbered\\\" : \\\"\\\")}\\n                            style={getStyles(isVertical ? \\\"top\\\" : \\\"left\\\", i)}\\n                            onClick={() => onClick && onClick(i)}\\n                            key={i}\\n                        >\\n                            <div className=\\\"step-border\\\" />\\n                            {checkIcon}\\n                            <div className=\\\"number\\\">{i + 1}</div>\\n                        </div>\\n                    ))}\\n                </div>\\n                <div className=\\\"text-wrapper\\\">\\n                    {list?.map((item: StepLabelProps, i: number) => (\\n                        <StepLabel key={i} isActive={step === i} style={isVertical ? null : getStyles(\\\"width\\\", 1)} {...item} />\\n                    ))}\\n                    {React.Children.map(props.children, (Child: React.ReactElement<StepLabelProps>, i: number) =>\\n                        React.isValidElement<React.FC<StepLabelProps>>(Child)\\n                            ? React.cloneElement<any>(Child, {\\n                                  isActive: step === i,\\n                                  style: isVertical ? null : getStyles(\\\"width\\\", 1),\\n                              })\\n                            : Child\\n                    )}\\n                </div>\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["React","ref","label","isActive","props","className","classnames","active","checkIcon","name","xmlns","viewBox","d","StepTracker","labelPosition","list","onClick","orientation","step","useNumbers","isVertical","setIsVertical","stepList","setStepList","getProgress","pos","length","getStyles","key","children","map","value","i","clickable","style","item","Child","importString","require","orientationList","directionlist","setValue","fields","items","options","controlType","min","max","useDynamicForm","renderForm","form","setForm","controls","Docs","mainFile","example","direction","code"],"sourceRoot":""}