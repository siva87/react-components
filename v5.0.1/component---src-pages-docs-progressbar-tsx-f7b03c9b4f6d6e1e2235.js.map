{"version":3,"file":"component---src-pages-docs-progressbar-tsx-f7b03c9b4f6d6e1e2235.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/ProgressBar/ProgressBar.tsx","webpack://react-components-docs/./src/pages/docs/progressbar.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx","webpack://react-components-docs/../lib/src/ProgressBar/ProgressBar.tsx?9b4f"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./progressbar.scss\";\n\nexport type ProgressBarProps = JSX.IntrinsicElements[\"progress\"] & {\n    /** Progress bar theme */\n    theme?: \"purple\" | \"primary\" | \"danger\" | \"success\" | \"warning\" | \"inverted\";\n};\n/** A visual representation of progress for loading content. */\nexport const ProgressBar: React.FC<ProgressBarProps> = React.forwardRef(({ theme = \"primary\", ...props }: ProgressBarProps, ref: React.ForwardedRef<HTMLProgressElement>) => {\n    return <progress {...props} ref={ref} className={classnames(\"rc progress-bar\", { [`theme-${theme}`]: theme }, props.className)} />;\n});\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { ProgressBar, ProgressBarProps } from \"@sebgroup/react-components/ProgressBar\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Slider } from \"@sebgroup/react-components/Slider\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/ProgressBar/ProgressBar\");\nconst code: string = `<ProgressBar value={progress} />`;\n\nconst themes: Array<DynamicFormOption<ProgressBarProps[\"theme\"]>> = [\n    { label: \"purple\", value: \"purple\", key: \"purple\" },\n    { label: \"primary\", value: \"primary\", key: \"primary\" },\n    { label: \"danger\", value: \"danger\", key: \"danger\" },\n    { label: \"success\", value: \"success\", key: \"success\" },\n    { label: \"warning\", value: \"warning\", key: \"warning\" },\n    { label: \"inverted\", value: \"inverted\", key: \"inverted\" },\n];\n\nconst ProgressBarPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<number>(50);\n\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"theme\", label: \"theme\", controlType: \"Dropdown\", options: themes, value: themes[0].value }],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <ProgressBar value={value} max={100} theme={controls.theme} />\n                </div>\n            }\n            code={code}\n            controls={\n                <>\n                    {renderControls()}\n                    <br />\n                    <Slider label=\"Value\" min={0} max={100} value={value} onChange={(e) => setValue(parseInt(e.target.value))} />\n                </>\n            }\n        />\n    );\n};\n\nexport default ProgressBarPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./slider.scss\";\n\nconst angleLeftIcon: JSX.Element = (\n    <svg name=\"angle-left\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z\" />\n    </svg>\n);\nconst angleRightIcon: JSX.Element = (\n    <svg name=\"angle-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\" />\n    </svg>\n);\n\nexport type SliderTheme = \"primary\" | \"inverted\" | \"success\" | \"danger\" | \"warning\" | \"purple\";\nexport type SliderAppearance = \"normal\" | \"alternative\";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** maximum value for range */\n    max?: number;\n    /** minimum value for range */\n    min?: number;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** step per increment or decrement */\n    step?: number;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\ntype AppearanceStyleMap = {\n    [key in SliderAppearance]: {\n        width: string;\n        offset: string;\n    };\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \"primary\", alternative, tooltipTheme = \"inverted\", tooltipValue, indicator, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const [minValue, setMinValue] = React.useState<number>(min || 0);\n        const [maxValue, setMaxValue] = React.useState<number>(max || 100);\n        const [size, setSize] = React.useState<number>(0);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [thumbPosition, setThumbPosition] = React.useState<number>(0);\n        const [activeTrackStyles, setActiveTrackStyles] = React.useState<React.CSSProperties>({});\n        const appearanceSizesMap: AppearanceStyleMap = {\n            alternative: { width: \"27px\", offset: \"56px\" },\n            normal: { width: \"5px\", offset: \"24px\" },\n        };\n        const appearance: SliderAppearance = alternative ? \"alternative\" : \"normal\";\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== \"number\" ? 0 : min;\n            const maxValue: number = typeof max !== \"number\" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n            setSize(getSize(minValue, maxValue));\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + \"%\");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setThumbPosition(getPercentage());\n            setActiveTrackStyles(getActiveTrackStyles());\n        }, [props.value, minValue, maxValue, size, appearance]);\n\n        /**\n         * Finds the size between two numbers\n         * @param {number} minValue The minimum value\n         * @param {number} maxValue The maximum value\n         * @returns {number} The size\n         */\n        function getSize(minValue: number, maxValue: number): number {\n            if (maxValue > minValue) {\n                return maxValue - minValue;\n            } else {\n                // Will calculate the size anyway, but it will show a warning since the min is larger than the max\n                console.warn(`The max value of the slider should be larger than the min value (Max:${maxValue}, Min: ${minValue}`);\n                return minValue - maxValue;\n            }\n        }\n\n        /**\n         * Converts the current value to percentage based on min and max\n         * @returns {number} The precentage\n         */\n        function getPercentage(): number {\n            if (props.value <= minValue) {\n                return 0;\n            } else if (props.value >= maxValue) {\n                return 100;\n            } else {\n                const distanceFromMin: number = Math.abs(props.value - minValue);\n                return size ? (distanceFromMin / size) * 100 : 0;\n            }\n        }\n\n        /**\n         * Calculates the styles needed for the active track\n         * @returns {React.CSSProperties} The active track styles object\n         */\n        const getActiveTrackStyles: () => React.CSSProperties = React.useCallback(() => {\n            const calculatedThumbPosition: number = getPercentage();\n            let zeroPosition: number;\n            const { width, offset }: AppearanceStyleMap[keyof AppearanceStyleMap] = appearanceSizesMap[appearance];\n            const style: React.CSSProperties = {};\n            if (minValue >= 0) {\n                zeroPosition = 0;\n                style.left = `${zeroPosition}%`;\n                style.width = `calc(${calculatedThumbPosition}% + ${width})`;\n            } else if (maxValue <= 0) {\n                zeroPosition = 100;\n                style.left = `calc(${zeroPosition}% + ${offset})`;\n                style.width = `calc(${100 - calculatedThumbPosition}% + ${width})`;\n                style.transform = \"rotateY(180deg)\";\n            } else {\n                if (props.value <= 0) {\n                    zeroPosition = size ? Math.abs((minValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = zeroPosition - calculatedThumbPosition + \"%\";\n                    style.transform = \"rotateY(180deg)\";\n                } else {\n                    zeroPosition = size ? Math.abs(100 - (maxValue / size) * 100) : 0;\n                    style.left = `calc(${zeroPosition}% + ${width})`;\n                    style.width = calculatedThumbPosition - zeroPosition + \"%\";\n                }\n            }\n            return style;\n        }, [appearance, props.value, getPercentage]);\n\n        /**\n         * Calculating the position of the label based on it's value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        /**\n         * Determines whether to enable or disable CSS transitions based on the total amount of steps\n         * This is fix for a performance impact caused by rapidly updating the state when sliding\n         * @var maxNumberOfStepsToAllowTransition represents the maximum number of steps to have the\n         * transitions enabled. Transitions would be disabled when exceeding that number;\n         * @returns {boolean} `True` if it should transition\n         */\n        function shouldEnableTransition(): boolean {\n            const maxNumberOfStepsToAllowTransition: number = 30;\n            return size / step <= maxNumberOfStepsToAllowTransition;\n        }\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames(\"rc custom-slider\", props.className, { disabled: props.disabled })}>\n                    {label && <label className=\"custom-label\">{label}</label>}\n                    <div className={classnames(\"input-field\", appearance, { \"has-labels\": labels && labels.length })}>\n                        <input {...props} ref={ref} type=\"range\" min={minValue} max={maxValue} step={step} />\n                        <div className={classnames(\"custom-slider-holder\", theme)}>\n                            <div className={classnames(\"custom-slider-track\", { \"with-transitions\": shouldEnableTransition() })}>\n                                <div className=\"custom-slider-slider-before\" />\n                                <div className=\"custom-slider-slider-after\" style={activeTrackStyles} />\n                                <div className=\"custom-slider-thumb\" style={{ left: thumbPosition + \"%\" }}>\n                                    <div className={classnames(\"custom-slider-preview\", tooltipTheme, { \"always-show\": alwaysShowTooltip })}>{tooltipValue || props.value}</div>\n                                    {appearance === \"alternative\" ? (\n                                        <>\n                                            <span className=\"custom-slider-icon-left\">{angleLeftIcon}</span>\n                                            <span className=\"custom-slider-icon-right\">{angleRightIcon}</span>\n                                        </>\n                                    ) : null}\n                                </div>\n                                {labels && labels.length\n                                    ? labels.map((label: SliderLabel, i: number) => (\n                                          <div key={i} className={classnames(\"custom-slider-label\", { \"show-ticks\": showTicks })} style={{ left: labelsPositions[i] }}>\n                                              <span>{label.label}</span>\n                                          </div>\n                                      ))\n                                    : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./progressbar.scss\\\";\\n\\nexport type ProgressBarProps = JSX.IntrinsicElements[\\\"progress\\\"] & {\\n    /** Progress bar theme */\\n    theme?: \\\"purple\\\" | \\\"primary\\\" | \\\"danger\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"inverted\\\";\\n};\\n/** A visual representation of progress for loading content. */\\nexport const ProgressBar: React.FC<ProgressBarProps> = React.forwardRef(({ theme = \\\"primary\\\", ...props }: ProgressBarProps, ref: React.ForwardedRef<HTMLProgressElement>) => {\\n    return <progress {...props} ref={ref} className={classnames(\\\"rc progress-bar\\\", { [`theme-${theme}`]: theme }, props.className)} />;\\n});\\n\";"],"names":["ProgressBar","React","ref","theme","props","className","classnames","importString","require","themes","label","value","key","setValue","useDynamicForm","items","controlType","options","renderControls","controls","Docs","mainFile","example","max","code","Slider","min","onChange","e","parseInt","target","angleLeftIcon","name","xmlns","viewBox","d","angleRightIcon","alwaysShowTooltip","labels","showTicks","step","alternative","tooltipTheme","tooltipValue","indicator","minValue","setMinValue","maxValue","setMaxValue","size","setSize","labelsPositions","setLabelsPositions","thumbPosition","setThumbPosition","activeTrackStyles","setActiveTrackStyles","appearanceSizesMap","width","offset","normal","appearance","getPercentage","distanceFromMin","Math","abs","console","warn","getSize","length","positions","map","push","getLabelPosition","position","getActiveTrackStyles","zeroPosition","calculatedThumbPosition","style","left","transform","FeedbackIndicator","noBorder","disabled","type","i"],"sourceRoot":""}