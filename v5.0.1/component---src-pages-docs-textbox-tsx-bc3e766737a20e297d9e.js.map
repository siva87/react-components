{"version":3,"file":"component---src-pages-docs-textbox-tsx-bc3e766737a20e297d9e.js","mappings":"gNAOMA,EAAuBC,EAAQ,OAG/BC,EAAuC,CAAEC,MAAO,OAAQC,MAAO,OAAQC,IAAK,QAC5EC,EAAgC,CAAEH,MAAO,OAAQC,MAAO,OAAQC,IAAK,QACrEE,EAAgC,CAAEJ,MAAO,OAAQC,MAAO,OAAQC,IAAK,QACrEG,EAAsD,CACxD,CAAEH,IAAK,QAASF,MAAO,SAAUC,MAAO,SAAUK,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEN,IAAK,UAAWF,MAAO,UAAWC,MAAO,UAAWK,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEN,IAAK,UAAWF,MAAO,UAAWC,MAAO,UAAWK,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAAwBC,EAAAA,MAAW,WACrC,MAA0BA,EAAAA,SAAuB,IAA1CT,EAAP,KAAcU,EAAd,KAEA,GAAmCC,EAAAA,EAAAA,GAAe,CAC9C,CACIV,IAAK,WACLW,MAAO,CACH,CAAEX,IAAK,WAAYD,MAAOF,EAAkBE,MAAOD,MAAO,qBAAsBc,QAAS,CAACf,EAAmBK,EAAYD,GAAaY,YAAa,YACnJ,CAAEb,IAAK,YAAaD,MAAOF,EAAkBE,MAAOD,MAAO,sBAAuBc,QAAS,CAACf,EAAmBK,EAAYD,GAAaY,YAAa,YACrJ,CAAEb,IAAK,WAAYF,MAAO,WAAYe,YAAa,YACnD,CAAEb,IAAK,YAAaF,MAAO,YAAae,YAAa,YACrD,CACIb,IAAK,gBACLc,SAAU,YACVC,WAAW,EACXjB,MAAO,iBACPc,QAAST,EACTU,YAAa,QACbd,MAAOI,EAAW,GAAGJ,MACrBiB,2BAA4B,CAAEV,UAAW,yBAhBlDW,EAAP,KAAqBC,EAArB,KAAqBA,SAsBfC,EAAuBX,EAAAA,SAAc,WACvC,OAAOU,EAASC,UAAY,CAAEC,KAAMF,EAASG,cAAeC,QAAS,qBAAwB,OAC9F,CAACJ,EAASC,UAAWD,EAASG,gBAEjC,OACI,gBAAC,IAAD,CACIE,SAAU5B,EACV6B,QACI,uBAAKlB,UAAU,SACX,gBAAC,IAAD,CACIP,MAAOA,EACPD,MAAM,gBACN2B,YAAY,YACZC,SAAUR,EAASS,WAAazB,EAAWH,MAAQ,gBAAC,IAAD,MAAiBmB,EAASS,WAAa1B,EAAWF,MAAQ,KAAO,KACpH6B,UAAWV,EAASW,YAAc3B,EAAWH,MAAQ,gBAAC,IAAD,MAAiBmB,EAASW,YAAc5B,EAAWF,MAAQ,KAAO,KACvH+B,SAAU,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOjC,QACnCkC,SAAUf,EAASe,SACnBd,UAAWA,KAIvBe,KAzDM,8DA0DNhB,SAAUD,SAKtB,a,6BCvEA","sources":["webpack://react-components-docs/./src/pages/docs/textbox.tsx","webpack://react-components-docs/../lib/src/Textbox/Textbox.tsx?3ccd"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport SearchIcon from \"../../../static/icons/search.svg\";\nimport { Textbox } from \"@sebgroup/react-components/Textbox\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Textbox/Textbox\");\nconst code: string = `<Textbox value=\"Some text value\" label=\"Some text label\" />`;\n\nconst defaultPortOption: DynamicFormOption = { label: \"None\", value: \"none\", key: \"none\" };\nconst textOption: DynamicFormOption = { label: \"Text\", value: \"text\", key: \"text\" };\nconst iconOption: DynamicFormOption = { label: \"Icon\", value: \"icon\", key: \"icon\" };\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst TextboxPage: React.FC = React.memo(() => {\n    const [value, setValue] = React.useState<string>(\"\");\n\n    const [renderForm, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"leftport\", value: defaultPortOption.value, label: \"Left icon or text?\", options: [defaultPortOption, iconOption, textOption], controlType: \"Dropdown\" },\n                { key: \"rightport\", value: defaultPortOption.value, label: \"Right icon or text?\", options: [defaultPortOption, iconOption, textOption], controlType: \"Dropdown\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\" },\n                {\n                    key: \"indicatorType\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    value: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Textbox\n                        value={value}\n                        label=\"Element label\"\n                        placeholder=\"Type here\"\n                        leftSlot={controls.leftport === iconOption.value ? <SearchIcon /> : controls.leftport === textOption.value ? \"Kr\" : null}\n                        rightSlot={controls.rightport === iconOption.value ? <SearchIcon /> : controls.rightport === textOption.value ? \"Kr\" : null}\n                        onChange={(e) => setValue(e.target.value)}\n                        disabled={controls.disabled}\n                        indicator={indicator}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default TextboxPage;\n","export default \"import React from \\\"react\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./textbox.scss\\\";\\n\\nexport type TextboxProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Element label */\\n    label?: string;\\n    /** Element prefix slot */\\n    leftSlot?: React.ReactNode;\\n    /** Element prefix title */\\n    leftSlotTitle?: string;\\n    /** Callback when prefix button is clicked */\\n    onLeftClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\\n    /** Callback when suffix button is clicked */\\n    onRightClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\\n    /** Component associates with input ref */\\n    reference?: React.RefObject<HTMLInputElement>;\\n    /** Element suffix slot */\\n    rightSlot?: React.ReactNode;\\n    /** Element suffix title */\\n    rightSlotTitle?: string;\\n    /** Feedback indicator object */\\n    indicator?: Indicator;\\n    /** Wrapper props */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n/** Textbox is a component that allows user to add or edit text with extra text or icon port */\\nexport const Textbox: React.FC<TextboxProps> = React.forwardRef(\\n    ({ leftSlot, leftSlotTitle, onLeftClick, rightSlot, rightSlotTitle, onRightClick, indicator, wrapperProps = {}, ...props }: TextboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n        const [customId, setCustomId] = React.useState<string>(null);\\n\\n        React.useEffect(() => setCustomId(props.id ? props.id : props.label ? randomId(\\\"tbg-\\\") : null), [props.id]);\\n\\n        return (\\n            <div {...wrapperProps} className={classnames(\\\"rc input-box-group\\\", wrapperProps.className)}>\\n                {props.label && (\\n                    <label className=\\\"custom-label\\\" htmlFor={customId}>\\n                        {props.label}\\n                    </label>\\n                )}\\n                <div className={classnames(\\\"rc input-group\\\", { disabled: props.disabled })}>\\n                    <FeedbackIndicator {...indicator}>\\n                        <div className=\\\"input-box-group-wrapper\\\">\\n                            {leftSlot && (\\n                                <div className={classnames(\\\"input-group-prepend\\\", { clickable: onLeftClick })} role={onLeftClick ? \\\"button\\\" : \\\"\\\"} onClick={onLeftClick}>\\n                                    <span className=\\\"input-group-text\\\" title={leftSlotTitle}>\\n                                        {leftSlot}\\n                                    </span>\\n                                </div>\\n                            )}\\n                            <input {...props} ref={ref} id={customId} className={classnames(\\\"form-control\\\", props.className)} />\\n                            {rightSlot && (\\n                                <div className={classnames(\\\"input-group-append\\\", { clickable: onRightClick })} onClick={onRightClick} role={onRightClick ? \\\"button\\\" : \\\"\\\"}>\\n                                    <span className=\\\"input-group-text\\\" title={rightSlotTitle}>\\n                                        {rightSlot}\\n                                    </span>\\n                                </div>\\n                            )}\\n                        </div>\\n                    </FeedbackIndicator>\\n                </div>\\n            </div>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","defaultPortOption","label","value","key","textOption","iconOption","indicators","additionalProps","wrapperProps","className","TextboxPage","React","setValue","useDynamicForm","items","options","controlType","rulerKey","condition","formElementAdditionalProps","renderForm","controls","indicator","type","indicatorType","message","mainFile","example","placeholder","leftSlot","leftport","rightSlot","rightport","onChange","e","target","disabled","code"],"sourceRoot":""}