{"version":3,"file":"component---src-pages-docs-rating-tsx-43c5f5137441ab87be8b.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Rating/SVGComponent.tsx","webpack://react-components-docs/../lib/src/Rating/Rating.tsx","webpack://react-components-docs/./src/pages/docs/rating.tsx","webpack://react-components-docs/../lib/src/Rating/Rating.tsx?9c8a","webpack://react-components-docs/./static/icons/heart.svg"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport type SVGProps = JSX.IntrinsicElements[\"svg\"] & {\n    colors?: [string, string];\n    index?: number;\n    value?: number;\n    step?: number;\n    customSVG?: any;\n};\n\nconst starSVG: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\" />\n    </svg>\n);\n\nexport const SVGComponent: React.FC<SVGProps> = ({ colors, index, value, customSVG, step, ...props }: SVGProps) => {\n    const [activePercentage, setActivePercentage] = useState(value);\n\n    useEffect(() => {\n        if (value >= index) {\n            setActivePercentage((value - index) * 100);\n        }\n    }, [value]);\n\n    const getGradientId = React.useCallback(\n        (defaultValue?: string): string => {\n            const isInt: boolean = step % 1 === 0;\n            if (isInt) {\n                return \"url(#full_grad)\";\n            } else {\n                switch (step) {\n                    case 0.5:\n                        return defaultValue || \"url(#half_grad)\";\n                    default:\n                        return `url(#dynamic_grad${index})`;\n                }\n            }\n        },\n        [step, index]\n    );\n\n    /**\n     * Set backgroud color based on the value selected/hovered and the steps chosen\n     */\n    const setLinearGradientType = (): string => {\n        if (!value || value === 0) {\n            return \"url(#no_grad)\";\n        } else {\n            if (value > index && value <= index + 1 / 2) {\n                return getGradientId();\n            } else if (value >= index + 1) {\n                return \"url(#full_grad)\";\n            } else if (value > index && value < index + 1) {\n                return getGradientId(\"url(#full_grad)\");\n            }\n            return \"url(#no_grad)\";\n        }\n    };\n\n    return (\n        <svg {...props} viewBox=\"0 0 16 16\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n            {props.name && <title>{props.name}</title>}\n            <defs>\n                <linearGradient id={`dynamic_grad${index}`}>\n                    <stop offset={`${activePercentage - 1}%`} style={{ stopColor: colors[1] }} />\n                    <stop offset={`1%`} style={{ stopColor: colors[0] }} />\n                    <stop offset={`${100 - activePercentage}%`} style={{ stopColor: colors[0] }} />\n                </linearGradient>\n                <linearGradient id=\"full_grad\">\n                    <stop offset=\"100%\" stopColor={colors[1]} />\n                </linearGradient>\n                <linearGradient id=\"half_grad\">\n                    <stop offset=\"50%\" stopColor={colors[1]} />\n                    <stop offset=\"50%\" stopColor={colors[0]} />\n                </linearGradient>\n                <linearGradient id=\"no_grad\">\n                    <stop offset=\"100%\" stopColor={colors[0]} />\n                </linearGradient>\n            </defs>\n            {React.cloneElement(customSVG || starSVG, {\n                preserveAspectRatio: \"xMinYMin meet\",\n                fill: setLinearGradientType(),\n                key: index,\n            })}\n        </svg>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport classnames from \"classnames\";\nimport { SVGComponent } from \"./SVGComponent\";\nimport \"./rating.scss\";\n\nexport type RatingProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Array of two colors to fill the states of the svgs */\n    colors?: [string, string];\n    /** Div wrapper props */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** svg to use instead of the default */\n    customSVG?: JSX.IntrinsicElements[\"svg\"];\n    /**  name to be used for accessibility */\n    svgname?: string;\n    /** Dimensions (width/height) of the component  */\n    dimension?: number;\n};\n\n/**\n * @member 0 Grey (Unselected)\n * @member 1 Yellow (Selected)\n */\nconst initialColors: [string, string] = [\"#A9A9A9\", \"#FFC500\"];\nconst disabledColors: [string, string] = [\"#dddddd\", \"#bfbfbf\"];\n\nexport const Rating: React.FC<RatingProps> = React.forwardRef(({ dimension = 30, colors, customSVG, wrapperProps, ...props }: RatingProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [displayValue, setDisplayValue] = useState<number>(Number(props.value));\n    const [min, setMin] = useState<number>(0);\n    const [max, setMax] = useState<number>(Number(props.max) || 5);\n\n    useEffect(() => {\n        setDisplayValue(Number(props.value));\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.max) {\n            setMax(Number(props.max));\n        }\n    }, [props.max]);\n\n    useEffect(() => {\n        setMin(Number(props.min));\n    }, [props.min]);\n\n    /**\n     * Retrieves colors, either the colors passed in the props or use initialColors object\n     * @returns {Array<string>} The array of colors\n     */\n    const getColors = (): [string, string] => {\n        if (colors && colors.length) {\n            switch (colors.length) {\n                case 2:\n                    return colors;\n                default:\n                    return initialColors;\n            }\n        }\n        return props.disabled ? disabledColors : initialColors;\n    };\n\n    const onHover = (e: React.MouseEvent<HTMLInputElement>): void => {\n        !props.readOnly && setDisplayValue(calculateDisplayValue(e));\n    };\n\n    const onLeave = (): void => {\n        !props.readOnly && setDisplayValue(Number(props.value));\n    };\n\n    const calculateDisplayValue = (e: React.MouseEvent<HTMLInputElement>): number => {\n        const position: number = calculateHoverPercentage(e);\n        return max * Number(parseFloat(String(position)).toFixed(2));\n    };\n\n    const calculateHoverPercentage = (event: React.MouseEvent): number => {\n        const clientX: number = event.clientX;\n        const targetRect: DOMRect = (event.target as HTMLElement).getBoundingClientRect();\n        const delta: number = clientX - targetRect.left;\n        return delta < 0 ? 0 : delta / targetRect.width;\n    };\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc\", \"rating\", wrapperProps?.className)}>\n            <div className=\"rating-icons\">\n                {Array.apply(null, { length: max }).map((e: number, i: number) => (\n                    <SVGComponent\n                        colors={getColors()}\n                        key={i}\n                        index={i}\n                        value={displayValue}\n                        customSVG={customSVG}\n                        step={Number(props.step)}\n                        width={dimension}\n                        height={dimension}\n                        name={props.svgname}\n                    />\n                ))}\n            </div>\n            <input\n                {...props}\n                ref={ref}\n                type=\"range\"\n                onChange={!props.readOnly ? props.onChange : null}\n                onClick={!props.readOnly ? props.onClick : null}\n                onMouseEnter={onHover}\n                onMouseLeave={onLeave}\n                onMouseMove={onHover}\n            />\n        </div>\n    );\n});\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Rating } from \"@sebgroup/react-components/Rating\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport HeartSVG from \"../../../static/icons/heart.svg\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Rating/Rating\");\nconst code: string = `<Rating value={number} onChange={(e) => setValue(e.target.value)} />`;\n\nconst RatingPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<number>(1);\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"max\", label: \"Max\", controlType: \"Text\", value: 5 },\n                { key: \"min\", label: \"Min\", description: \"Should no be smaller than step\", controlType: \"Text\", value: 1 },\n                { key: \"step\", label: \"Step\", controlType: \"Text\", value: 1 },\n                { key: \"dimension\", label: \"Icon Dimension\", controlType: \"Text\", value: 30 },\n                { key: \"readOnly\", label: \"Read only\", controlType: \"Checkbox\", value: false },\n                { key: \"disabled\", label: \"Disabled\", controlType: \"Checkbox\", value: false },\n                { key: \"customSvg\", label: \"Custom SVG\", controlType: \"Checkbox\", value: false },\n                {\n                    key: \"colors\",\n                    label: \"Colors\",\n                    options: [\n                        { key: \"default\", label: \"Default color\", value: \"\" },\n                        { key: \"greyandblack\", label: \"Grey & Black\", value: \"greyandblack\" },\n                        { key: \"lightblueandblue\", label: \"Light blue & blue\", value: \"lightblueandblue\" },\n                        { key: \"lightgreenandGreen\", label: \"Light green & green\", value: \"lg\" },\n                    ],\n                    controlType: \"Radio\",\n                },\n            ],\n        },\n    ]);\n\n    const getColor = React.useCallback((): [string, string] => {\n        switch (controls.colors?.key) {\n            case \"greyandblack\":\n                return [\"grey\", \"black\"];\n            case \"lightblueandblue\":\n                return [\"lightblue\", \"blue\"];\n            case \"lightgreenandGreen\":\n                return [\"lightgreen\", \"green\"];\n            default:\n                return null;\n        }\n    }, [controls.colors]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100 d-flex justify-content-center\">\n                    <Rating\n                        id=\"some-id\"\n                        className=\"custom-class\"\n                        readOnly={controls.readOnly}\n                        disabled={controls.disabled}\n                        dimension={controls.dimension}\n                        max={controls.max}\n                        min={controls.min}\n                        step={controls.step}\n                        svgname=\"custom name\"\n                        colors={getColor()}\n                        customSVG={controls.customSvg ? <HeartSVG /> : null}\n                        value={value}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                            setValue(Number(e.target.value));\n                        }}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default RatingPage;\n","export default \"import React, { useState, useEffect } from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { SVGComponent } from \\\"./SVGComponent\\\";\\nimport \\\"./rating.scss\\\";\\n\\nexport type RatingProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Array of two colors to fill the states of the svgs */\\n    colors?: [string, string];\\n    /** Div wrapper props */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** svg to use instead of the default */\\n    customSVG?: JSX.IntrinsicElements[\\\"svg\\\"];\\n    /**  name to be used for accessibility */\\n    svgname?: string;\\n    /** Dimensions (width/height) of the component  */\\n    dimension?: number;\\n};\\n\\n/**\\n * @member 0 Grey (Unselected)\\n * @member 1 Yellow (Selected)\\n */\\nconst initialColors: [string, string] = [\\\"#A9A9A9\\\", \\\"#FFC500\\\"];\\nconst disabledColors: [string, string] = [\\\"#dddddd\\\", \\\"#bfbfbf\\\"];\\n\\nexport const Rating: React.FC<RatingProps> = React.forwardRef(({ dimension = 30, colors, customSVG, wrapperProps, ...props }: RatingProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [displayValue, setDisplayValue] = useState<number>(Number(props.value));\\n    const [min, setMin] = useState<number>(0);\\n    const [max, setMax] = useState<number>(Number(props.max) || 5);\\n\\n    useEffect(() => {\\n        setDisplayValue(Number(props.value));\\n    }, [props.value]);\\n\\n    useEffect(() => {\\n        if (props.max) {\\n            setMax(Number(props.max));\\n        }\\n    }, [props.max]);\\n\\n    useEffect(() => {\\n        setMin(Number(props.min));\\n    }, [props.min]);\\n\\n    /**\\n     * Retrieves colors, either the colors passed in the props or use initialColors object\\n     * @returns {Array<string>} The array of colors\\n     */\\n    const getColors = (): [string, string] => {\\n        if (colors && colors.length) {\\n            switch (colors.length) {\\n                case 2:\\n                    return colors;\\n                default:\\n                    return initialColors;\\n            }\\n        }\\n        return props.disabled ? disabledColors : initialColors;\\n    };\\n\\n    const onHover = (e: React.MouseEvent<HTMLInputElement>): void => {\\n        !props.readOnly && setDisplayValue(calculateDisplayValue(e));\\n    };\\n\\n    const onLeave = (): void => {\\n        !props.readOnly && setDisplayValue(Number(props.value));\\n    };\\n\\n    const calculateDisplayValue = (e: React.MouseEvent<HTMLInputElement>): number => {\\n        const position: number = calculateHoverPercentage(e);\\n        return max * Number(parseFloat(String(position)).toFixed(2));\\n    };\\n\\n    const calculateHoverPercentage = (event: React.MouseEvent): number => {\\n        const clientX: number = event.clientX;\\n        const targetRect: DOMRect = (event.target as HTMLElement).getBoundingClientRect();\\n        const delta: number = clientX - targetRect.left;\\n        return delta < 0 ? 0 : delta / targetRect.width;\\n    };\\n\\n    return (\\n        <div {...wrapperProps} className={classnames(\\\"rc\\\", \\\"rating\\\", wrapperProps?.className)}>\\n            <div className=\\\"rating-icons\\\">\\n                {Array.apply(null, { length: max }).map((e: number, i: number) => (\\n                    <SVGComponent\\n                        colors={getColors()}\\n                        key={i}\\n                        index={i}\\n                        value={displayValue}\\n                        customSVG={customSVG}\\n                        step={Number(props.step)}\\n                        width={dimension}\\n                        height={dimension}\\n                        name={props.svgname}\\n                    />\\n                ))}\\n            </div>\\n            <input\\n                {...props}\\n                ref={ref}\\n                type=\\\"range\\\"\\n                onChange={!props.readOnly ? props.onChange : null}\\n                onClick={!props.readOnly ? props.onClick : null}\\n                onMouseEnter={onHover}\\n                onMouseLeave={onLeave}\\n                onMouseMove={onHover}\\n            />\\n        </div>\\n    );\\n});\\n\";","var React = require('react');\n\nfunction Heart (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"d\":\"M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z\"}));\n}\n\nHeart.defaultProps = {};\n\nmodule.exports = Heart;\n\nHeart.default = Heart;\n"],"names":["starSVG","xmlns","d","SVGComponent","colors","index","value","customSVG","step","props","useState","activePercentage","setActivePercentage","useEffect","getGradientId","React","defaultValue","viewBox","version","xmlnsXlink","name","id","offset","style","stopColor","preserveAspectRatio","fill","key","initialColors","disabledColors","Rating","ref","dimension","wrapperProps","Number","displayValue","setDisplayValue","setMin","max","setMax","min","getColors","length","disabled","onHover","e","readOnly","calculateDisplayValue","position","calculateHoverPercentage","parseFloat","String","toFixed","event","clientX","targetRect","target","getBoundingClientRect","delta","left","width","className","classnames","Array","apply","map","i","height","svgname","type","onChange","onClick","onMouseEnter","onMouseLeave","onMouseMove","importString","require","setValue","useDynamicForm","items","label","controlType","description","options","renderControls","controls","getColor","Docs","mainFile","example","customSvg","code","Heart","createElement","defaultProps","module","exports","default"],"sourceRoot":""}