{"version":3,"file":"component---src-pages-docs-buttongroup-tsx-6c16b05d9a0d53fcba17.js","mappings":"+PAaaA,EAA0CC,EAAAA,KACnDA,EAAAA,YAAiB,WAAiDC,GAAjD,MAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAASC,GAAtB,mBACb,uCACQA,EADR,CAEIH,IAAKA,EACLI,UAAWC,GAAAA,CACP,KACA,aAFiB,oBAICH,GAASA,EAJV,EAKb,sBAAsBD,EALT,GAOjBE,EAAMC,WAEVE,KAAMH,EAAMG,MAAQ,UAEnBH,EAAMI,c,sBCvBbC,EAAuBC,EAAQ,MAO/BC,EAA4D,CAC9D,CAAEC,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEX,UAAW,oBACrF,CAAEO,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEX,UAAW,oBACrF,CAAEO,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEX,UAAW,qBA8BzF,EA3BkC,WAC9B,OAAuCY,EAAAA,EAAAA,GAAe,CAClD,CACIL,IAAK,WACLM,MAAO,CACH,CAAEN,IAAK,OAAQC,MAAO,OAAQM,QAASR,EAAOS,YAAa,SAC3D,CAAER,IAAK,WAAYC,MAAO,WAAYO,YAAa,gBALxDC,EAAP,KAAyBC,EAAzB,KAAyBA,SAUzB,OACI,gBAACC,EAAA,EAAD,CACIC,SAAUf,EACVgB,QACI,gBAAC1B,EAAD,CAAaI,KAAMmB,EAASnB,KAAMD,SAAUoB,EAASpB,UACjD,gBAACwB,EAAA,EAAD,YACA,gBAACA,EAAA,EAAD,aACA,gBAACA,EAAA,EAAD,gBAGRC,KAjCM,qHAkCNL,SAAUD,Q,6HC1BTK,EAAgC1B,EAAAA,KACzCA,EAAAA,YAAiB,WAA4DC,GAAgD,IAAD,MAAxG2B,MAAAA,OAAwG,MAAhG,UAAgG,EAArFzB,EAAqF,EAArFA,KAAM0B,EAA+E,EAA/EA,MAAUzB,GAAqE,YACxH,OACI,0CAAYA,EAAZ,CAAmBH,IAAKA,EAAKI,UAAWC,GAAAA,CAAW,KAAM,MAAP,OAAqBsB,GAArB,cAAwCzB,GAASA,EAAjD,EAAuD,aAAa0B,EAApE,GAA6EzB,EAAMC,aAChID,EAAMI,e,4BCnBvB","sources":["webpack://react-components-docs/../lib/src/ButtonGroup/ButtonGroup.tsx","webpack://react-components-docs/./src/pages/docs/buttongroup.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/ButtonGroup/ButtonGroup.tsx?c9f5"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonGroupSizes = \"sm\" | \"md\" | \"lg\";\n\nexport type ButtonGroupProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Display buttons vertically */\n    vertical?: boolean;\n    /** Buttons size in the group. Available sizes: \"sm\", \"md\", \"lg\" */\n    size?: ButtonGroupSizes;\n};\n\n/** Button group wrapper. Use this to group multiple buttons */\nexport const ButtonGroup: React.FC<ButtonGroupProps> = React.memo(\n    React.forwardRef(({ vertical, size, ...props }: ButtonGroupProps, ref: React.ForwardedRef<HTMLDivElement>) => (\n        <div\n            {...props}\n            ref={ref}\n            className={classnames(\n                \"rc\",\n                \"btn-group\",\n                {\n                    [`btn-group-${size}`]: size,\n                    \"btn-group-vertical\": vertical,\n                },\n                props.className\n            )}\n            role={props.role || \"group\"}\n        >\n            {props.children}\n        </div>\n    ))\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { ButtonGroup, ButtonGroupProps } from \"@sebgroup/react-components/ButtonGroup\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Button } from \"@sebgroup/react-components/Button\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/ButtonGroup/ButtonGroup\");\nconst code: string = `<ButtonGroup>\n    <Button>First</Button>\n    <Button>Second</Button>\n    <Button>Third</Button>\n</ButtonGroup>`;\n\nconst sizes: Array<DynamicFormOption<ButtonGroupProps[\"size\"]>> = [\n    { key: \"sm\", label: \"sm\", value: \"sm\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"md\", label: \"md\", value: \"md\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"lg\", label: \"lg\", value: \"lg\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst ButtonGroupPage: React.FC = (): React.ReactElement<void> => {\n    const [renderControls, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"size\", label: \"size\", options: sizes, controlType: \"Radio\" },\n                { key: \"vertical\", label: \"vertical\", controlType: \"Checkbox\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <ButtonGroup size={controls.size} vertical={controls.vertical}>\n                    <Button>Add</Button>\n                    <Button>Edit</Button>\n                    <Button>Delete</Button>\n                </ButtonGroup>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default ButtonGroupPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport type ButtonGroupSizes = \\\"sm\\\" | \\\"md\\\" | \\\"lg\\\";\\n\\nexport type ButtonGroupProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Display buttons vertically */\\n    vertical?: boolean;\\n    /** Buttons size in the group. Available sizes: \\\"sm\\\", \\\"md\\\", \\\"lg\\\" */\\n    size?: ButtonGroupSizes;\\n};\\n\\n/** Button group wrapper. Use this to group multiple buttons */\\nexport const ButtonGroup: React.FC<ButtonGroupProps> = React.memo(\\n    React.forwardRef(({ vertical, size, ...props }: ButtonGroupProps, ref: React.ForwardedRef<HTMLDivElement>) => (\\n        <div\\n            {...props}\\n            ref={ref}\\n            className={classnames(\\n                \\\"rc\\\",\\n                \\\"btn-group\\\",\\n                {\\n                    [`btn-group-${size}`]: size,\\n                    \\\"btn-group-vertical\\\": vertical,\\n                },\\n                props.className\\n            )}\\n            role={props.role || \\\"group\\\"}\\n        >\\n            {props.children}\\n        </div>\\n    ))\\n);\\n\";"],"names":["ButtonGroup","React","ref","vertical","size","props","className","classnames","role","children","importString","require","sizes","key","label","value","additionalProps","wrapperProps","useDynamicForm","items","options","controlType","renderControls","controls","Docs","mainFile","example","Button","code","theme","block"],"sourceRoot":""}