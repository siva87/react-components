{"version":3,"file":"component---src-pages-docs-stepper-tsx-074eb22977f117af1a09.js","mappings":"2LAMMA,EAAuBC,EAAQ,OAU/BC,EAAsD,CACxD,CAAEC,IAAK,QAASC,MAAO,SAAUC,MAAO,SAAUC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAA4BC,EAAAA,MAAW,WACzC,MAA0BA,EAAAA,SAAuB,GAA1CL,EAAP,KAAcM,EAAd,KAEA,GAAmCC,EAAAA,EAAAA,GAAe,CAC9C,CACIT,IAAK,WACLU,MAAO,CACH,CAAEV,IAAK,MAAOE,MAAO,EAAGS,IAAK,EAAGC,IAAK,IAAKX,MAAO,MAAOY,YAAa,WACrE,CAAEb,IAAK,MAAOE,MAAO,GAAIS,IAAK,EAAGC,IAAK,IAAKX,MAAO,MAAOY,YAAa,WACtE,CAAEb,IAAK,WAAYC,MAAO,WAAYY,YAAa,YACnD,CAAEb,IAAK,YAAaC,MAAO,YAAaY,YAAa,YACrD,CACIb,IAAK,gBACLc,SAAU,YACVC,WAAW,EACXd,MAAO,iBACPe,QAASjB,EACTc,YAAa,QACbX,MAAOH,EAAW,GAAGG,MACrBe,2BAA4B,CAAEZ,UAAW,yBAhBlDa,EAAP,KAAqBC,EAArB,KAAqBA,SAsBfC,EAAuBb,EAAAA,SAAc,WACvC,OAAOY,EAASC,UAAY,CAAEC,KAAMF,EAASG,cAAeC,QAAS,qBAAwB,OAC9F,CAACJ,EAASC,UAAWD,EAASG,gBAEjC,OACI,gBAAC,IAAD,CACIE,SAAU3B,EACV4B,QACI,uBAAKpB,UAAU,SACX,gBAAC,IAAD,CACIJ,MAAM,gBACNU,IAAKQ,EAASR,IACdC,IAAKO,EAASP,IACdc,WAAY,kBAAMlB,EAASN,EAAQ,IACnCyB,WAAY,kBAAMnB,EAASN,EAAQ,IACnC0B,SAAUT,EAASS,SACnB1B,MAAOA,EACPkB,UAAWA,KAIvBS,KA7DM,qIA8DNV,SAAUD,SAKtB,a,6BC1EA","sources":["webpack://react-components-docs/./src/pages/docs/stepper.tsx","webpack://react-components-docs/../lib/src/Stepper/Stepper.tsx?a112"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Stepper } from \"@sebgroup/react-components/Stepper\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Stepper/Stepper\");\nconst code: string = `<Stepper\n    label={\"stepper label\"}\n    min={0}\n    max={100}\n    onIncrease={null}\n    onDecrease={null}\n    value={0}\n/>`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst StepTrackerPage: React.FC = React.memo(() => {\n    const [value, setValue] = React.useState<number>(0);\n\n    const [renderForm, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"min\", value: 0, min: 0, max: 100, label: \"Min\", controlType: \"Stepper\" },\n                { key: \"max\", value: 10, min: 0, max: 100, label: \"Max\", controlType: \"Stepper\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\" },\n                {\n                    key: \"indicatorType\",\n                    rulerKey: \"indicator\",\n                    condition: true,\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    value: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Stepper\n                        label=\"Element label\"\n                        min={controls.min}\n                        max={controls.max}\n                        onIncrease={() => setValue(value + 1)}\n                        onDecrease={() => setValue(value - 1)}\n                        disabled={controls.disabled}\n                        value={value}\n                        indicator={indicator}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default StepTrackerPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./stepper.scss\\\";\\n\\nexport type StepperProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Element label */\\n    label?: string;\\n    /** callback when element value is decreased */\\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\\n    /** callback when element value is increased */\\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\\n    /** Feedback indicator */\\n    indicator?: Indicator;\\n    /** Props for the wrapper element (div) */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n\\n/** A stepper makes it easier to input values that are in a narrow range */\\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\\n    ({ label, onDecrease, onIncrease, indicator, wrapperProps = {}, ...props }: StepperProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n        const [id, setId] = React.useState<string>(\\\"\\\");\\n\\n        React.useEffect(() => {\\n            setId(props.id ? props.id : randomId(\\\"stepper-\\\"));\\n        }, [props.id]);\\n\\n        return (\\n            <div {...wrapperProps} className={classnames(\\\"rc custom-stepper\\\", wrapperProps.className)}>\\n                {label && <label className=\\\"custom-label\\\">{label}</label>}\\n                <FeedbackIndicator {...indicator}>\\n                    <div className={\\\"stepper-container\\\" + (props.disabled ? \\\" disabled\\\" : \\\"\\\")}>\\n                        <button\\n                            className={\\\"stepper-decrement\\\" + (props.value === props.min ? \\\" disabled\\\" : \\\"\\\")}\\n                            onClick={props.value > props.min && !props.disabled ? onDecrease : null}\\n                            aria-controls={id}\\n                            aria-labelledby=\\\"decrement\\\"\\n                        >\\n                            <span>&#8722;</span>\\n                        </button>\\n                        <div className=\\\"stepper-preview\\\">\\n                            <span>{props.value}</span>\\n                        </div>\\n                        <button\\n                            className={\\\"stepper-increment\\\" + (props.value === props.max ? \\\" disabled\\\" : \\\"\\\")}\\n                            onClick={props.value < props.max && !props.disabled ? onIncrease : null}\\n                            aria-controls={id}\\n                            aria-labelledby=\\\"increment\\\"\\n                        >\\n                            <span>&#43;</span>\\n                        </button>\\n                    </div>\\n                </FeedbackIndicator>\\n                <input {...props} ref={ref} id={id} type=\\\"number\\\" readOnly={true} className={classnames(\\\"stepper-input\\\", props.className)} aria-live=\\\"assertive\\\" />\\n            </div>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","StepTrackerPage","React","setValue","useDynamicForm","items","min","max","controlType","rulerKey","condition","options","formElementAdditionalProps","renderForm","controls","indicator","type","indicatorType","message","mainFile","example","onIncrease","onDecrease","disabled","code"],"sourceRoot":""}