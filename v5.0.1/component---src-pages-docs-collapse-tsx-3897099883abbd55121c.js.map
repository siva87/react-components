{"version":3,"file":"component---src-pages-docs-collapse-tsx-3897099883abbd55121c.js","mappings":"2LAKMA,EAAuBC,EAAQ,OA0BrC,UAvB+B,WAC3B,MAA4BC,EAAAA,UAAwB,GAA7CC,EAAP,KAAeC,EAAf,KAEA,OACI,gBAAC,IAAD,CACIC,SAAUL,EACVM,QACI,gBAAC,IAAD,CAAUH,OAAQA,GACd,8KACA,yJACA,0KAGRI,KAfM,+CAgBNC,SACI,gBAAC,IAAD,CAAQC,KAAK,KAAKC,QAAS,kBAAMN,GAAWD,KAA5C,uB,6HCRHQ,EAAgCT,EAAAA,KACzCA,EAAAA,YAAiB,WAA4DU,GAAgD,IAAD,MAAxGC,MAAAA,OAAwG,MAAhG,UAAgG,EAArFJ,EAAqF,EAArFA,KAAMK,EAA+E,EAA/EA,MAAUC,GAAqE,YACxH,OACI,0CAAYA,EAAZ,CAAmBH,IAAKA,EAAKI,UAAWC,GAAAA,CAAW,KAAM,MAAP,OAAqBJ,GAArB,cAAwCJ,GAASA,EAAjD,EAAuD,aAAaK,EAApE,GAA6EC,EAAMC,aAChID,EAAMG,e,0HCRVC,EAAoCjB,EAAAA,KAC7CA,EAAAA,YAAiB,WAA8CU,GAA6C,IAAD,IAAvFT,OAAAA,OAAuF,SAApEY,GAAoE,YACjGK,GAAsDC,EAAAA,EAAAA,GAAgBT,GAC5E,EAA4BV,EAAAA,SAAoC,CAC5DoB,OAAQnB,EAAS,OAAS,EAC1BoB,QAASpB,EAAS,QAAU,OAC5BqB,SAAUrB,IAHPsB,EAAP,KAAeC,EAAf,KAOMC,EAASzB,EAAAA,aAAkB,WAE7BwB,EAAU,OAAD,UAAMD,EAAN,CAAcF,QAAS,WAEhCK,YAAW,WACPF,EAAU,CAAEH,QAAS,QAASD,OAAQF,EAAYS,QAAQC,aAAcN,QAAS,MAClF,MACJ,CAACC,IAGEM,EAAW7B,EAAAA,aAAkB,WAE/BwB,EAAU,OAAD,UAAMD,EAAN,CAAcH,OAAQF,EAAYS,QAAQC,gBAEnDF,YAAW,WACPF,EAAU,OAAD,UAAMD,EAAN,CAAcH,OAAQ,EAAGE,QAAS,OAC5C,MACJ,CAACC,IAMEO,EAAkB9B,EAAAA,aACpB,SAAC+B,GAC0B,WAAnBA,EAAEC,cAEER,EADAvB,EACU,OAAD,UAAMsB,EAAN,CAAcH,OAAQ,SAErB,OAAD,UAAMG,EAAN,CAAcF,QAAS,UAGxCR,EAAMoB,iBAAmBpB,EAAMoB,gBAAgBF,KAEnD,CAACR,EAAQtB,EAAQY,EAAMoB,kBAc3B,OAXAjC,EAAAA,WAAgB,WACZ,QAAQ,GACJ,KAAKC,GAA4B,GAAlBsB,EAAOD,QAClBG,IACA,MACJ,KAAMxB,GAA4B,GAAlBsB,EAAOD,QACnBO,OAGT,CAAC5B,IAGA,uCAASY,EAAT,CAAgBC,UAAWC,GAAAA,CAAW,kBAAmBF,EAAMC,WAAYJ,IAAKQ,EAAagB,MAAOX,EAAQU,gBAAiBH,IACxHjB,EAAMG,e,sKCjEhB,SAASG,IAAwG,IAAD,uBAAjFgB,EAAiF,yBAAjFA,EAAiF,gBACnH,IAAMC,EAAYpC,EAAAA,SAclB,OAZAA,EAAAA,WAAgB,WACZmC,EAAKE,SAAQ,SAAC3B,GACLA,IAEc,mBAARA,EACPA,EAAI0B,EAAUT,SAEbjB,EAAYiB,QAAUS,EAAUT,cAG1C,CAACQ,IAEGC,E,6CCrBX","sources":["webpack://react-components-docs/./src/pages/docs/collapse.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/Collapse/Collapse.tsx","webpack://react-components-docs/../lib/src/hooks/useCombinedRef.ts","webpack://react-components-docs/../lib/src/Collapse/Collapse.tsx?68e8"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Collapse } from \"@sebgroup/react-components/Collapse\";\nimport { Button } from \"@sebgroup/react-components/Button\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Collapse/Collapse\");\nconst code: string = `<Collapse toggle={toggle}>content</Collapse>`;\n\nconst CollapsePage: React.FC = () => {\n    const [toggle, setToggle] = React.useState<boolean>(true);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <Collapse toggle={toggle}>\n                    <p>Aut perferendis et. Et necessitatibus aliquid sit. Id illum minus qui atque autem. Qui dolorem amet beatae quasi. Sunt sunt id repellendus rerum.</p>\n                    <p>Occaecati vel incidunt id sapiente facere ut itaque repudiandae. Unde numquam sunt totam et delectus. Sit et fugit fuga aut.</p>\n                    <p>Sed amet ab. Aut vel ipsam dolore. Ut ratione consequatur autem id adipisci corrupti et nam. Labore rerum debitis nihil sit aut ut mollitia.</p>\n                </Collapse>\n            }\n            code={code}\n            controls={\n                <Button size=\"sm\" onClick={() => setToggle(!toggle)}>\n                    Toggle collapse\n                </Button>\n            }\n        />\n    );\n};\n\nexport default CollapsePage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./collapse.scss\";\nimport { useCombinedRefs } from \"../hooks\";\n\nexport type CollapseProps = JSX.IntrinsicElements[\"div\"] & {\n    /** True to expand, false to collapse */\n    toggle?: boolean;\n};\n\n/** A helper component for collapsing any content placed inside of it */\nexport const Collapse: React.FC<CollapseProps> = React.memo(\n    React.forwardRef(({ toggle = false, ...props }: CollapseProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const collapseRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\n        const [styles, setStyles] = React.useState<React.CSSProperties>({\n            height: toggle ? \"auto\" : 0,\n            display: toggle ? \"block\" : \"none\",\n            opacity: +toggle,\n        });\n\n        /** Expand the content */\n        const expand = React.useCallback((): void => {\n            /** Cannot transition when display is set to `none`, we need to change it to `block` */\n            setStyles({ ...styles, display: \"block\" });\n            /** This async delay is needed for the height change to take effect */\n            setTimeout(() => {\n                setStyles({ display: \"block\", height: collapseRef.current.scrollHeight, opacity: 1 });\n            }, 10);\n        }, [styles]);\n\n        /** Collapse the content */\n        const collapse = React.useCallback((): void => {\n            /** Since height `auto` will not transition, we need to change it to pixels */\n            setStyles({ ...styles, height: collapseRef.current.scrollHeight });\n            /** This async delay is needed for the height change to take effect */\n            setTimeout(() => {\n                setStyles({ ...styles, height: 0, opacity: 0 });\n            }, 10);\n        }, [styles]);\n\n        /**\n         * An event handler triggered after collapse/expand transition ends\n         * @param e The transition event\n         */\n        const afterTransition = React.useCallback(\n            (e: React.TransitionEvent<HTMLDivElement>): void => {\n                if (e.propertyName === \"height\") {\n                    if (toggle) {\n                        setStyles({ ...styles, height: \"auto\" });\n                    } else {\n                        setStyles({ ...styles, display: \"none\" });\n                    }\n                }\n                props.onTransitionEnd && props.onTransitionEnd(e);\n            },\n            [styles, toggle, props.onTransitionEnd]\n        );\n\n        React.useEffect(() => {\n            switch (true) {\n                case toggle && styles.opacity == 0:\n                    expand();\n                    break;\n                case !toggle && styles.opacity == 1:\n                    collapse();\n                    break;\n            }\n        }, [toggle]);\n\n        return (\n            <div {...props} className={classnames(\"custom-collapse\", props.className)} ref={collapseRef} style={styles} onTransitionEnd={afterTransition}>\n                {props.children}\n            </div>\n        );\n    })\n);\n","import React from \"react\";\n\n/**\n * Allows you to use the ref as well as forward it to parent component to use\n * @param refs The refs to forward to. Usually the forwarded ref\n */\nexport function useCombinedRefs<T>(...refs: Array<React.LegacyRef<T> | React.RefObject<T>>): React.MutableRefObject<T> {\n    const targetRef = React.useRef<T>();\n\n    React.useEffect(() => {\n        refs.forEach((ref) => {\n            if (!ref) return;\n\n            if (typeof ref === \"function\") {\n                ref(targetRef.current);\n            } else {\n                (ref as any).current = targetRef.current;\n            }\n        });\n    }, [refs]);\n\n    return targetRef;\n}\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./collapse.scss\\\";\\nimport { useCombinedRefs } from \\\"../hooks\\\";\\n\\nexport type CollapseProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** True to expand, false to collapse */\\n    toggle?: boolean;\\n};\\n\\n/** A helper component for collapsing any content placed inside of it */\\nexport const Collapse: React.FC<CollapseProps> = React.memo(\\n    React.forwardRef(({ toggle = false, ...props }: CollapseProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const collapseRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\\n        const [styles, setStyles] = React.useState<React.CSSProperties>({\\n            height: toggle ? \\\"auto\\\" : 0,\\n            display: toggle ? \\\"block\\\" : \\\"none\\\",\\n            opacity: +toggle,\\n        });\\n\\n        /** Expand the content */\\n        const expand = React.useCallback((): void => {\\n            /** Cannot transition when display is set to `none`, we need to change it to `block` */\\n            setStyles({ ...styles, display: \\\"block\\\" });\\n            /** This async delay is needed for the height change to take effect */\\n            setTimeout(() => {\\n                setStyles({ display: \\\"block\\\", height: collapseRef.current.scrollHeight, opacity: 1 });\\n            }, 10);\\n        }, [styles]);\\n\\n        /** Collapse the content */\\n        const collapse = React.useCallback((): void => {\\n            /** Since height `auto` will not transition, we need to change it to pixels */\\n            setStyles({ ...styles, height: collapseRef.current.scrollHeight });\\n            /** This async delay is needed for the height change to take effect */\\n            setTimeout(() => {\\n                setStyles({ ...styles, height: 0, opacity: 0 });\\n            }, 10);\\n        }, [styles]);\\n\\n        /**\\n         * An event handler triggered after collapse/expand transition ends\\n         * @param e The transition event\\n         */\\n        const afterTransition = React.useCallback(\\n            (e: React.TransitionEvent<HTMLDivElement>): void => {\\n                if (e.propertyName === \\\"height\\\") {\\n                    if (toggle) {\\n                        setStyles({ ...styles, height: \\\"auto\\\" });\\n                    } else {\\n                        setStyles({ ...styles, display: \\\"none\\\" });\\n                    }\\n                }\\n                props.onTransitionEnd && props.onTransitionEnd(e);\\n            },\\n            [styles, toggle, props.onTransitionEnd]\\n        );\\n\\n        React.useEffect(() => {\\n            switch (true) {\\n                case toggle && styles.opacity == 0:\\n                    expand();\\n                    break;\\n                case !toggle && styles.opacity == 1:\\n                    collapse();\\n                    break;\\n            }\\n        }, [toggle]);\\n\\n        return (\\n            <div {...props} className={classnames(\\\"custom-collapse\\\", props.className)} ref={collapseRef} style={styles} onTransitionEnd={afterTransition}>\\n                {props.children}\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["importString","require","React","toggle","setToggle","mainFile","example","code","controls","size","onClick","Button","ref","theme","block","props","className","classnames","children","Collapse","collapseRef","useCombinedRefs","height","display","opacity","styles","setStyles","expand","setTimeout","current","scrollHeight","collapse","afterTransition","e","propertyName","onTransitionEnd","style","refs","targetRef","forEach"],"sourceRoot":""}