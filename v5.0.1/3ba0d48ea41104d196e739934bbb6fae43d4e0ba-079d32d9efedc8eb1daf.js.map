{"version":3,"file":"3ba0d48ea41104d196e739934bbb6fae43d4e0ba-079d32d9efedc8eb1daf.js","mappings":"8KAEA,SAASA,EAAEA,GACT,OAAO,MAAQA,KAAOA,aAAaC,SAAWD,aAAaE,YAAcF,aAAaG,UAAYH,aAAaI,OAASD,OAAOE,KAAKL,GAAGM,OAAS,EAAIN,EAAEM,OAAS,K,+DCDjK,SAASC,EAAEA,GACT,UAAWA,GAAKA,aAAaN,OAASO,MAAMD,EAAEE,c,2KCYnCC,EAAoCC,EAAAA,YAAiB,WAAyEC,GAA+C,IAArHC,EAAoH,EAApHA,OAAQC,EAA4G,EAA5GA,aAAcC,EAA8F,EAA9FA,UAAWC,EAAmF,EAAnFA,SAAaC,GAAsE,YACrL,EAAoBN,EAAAA,SAAuBM,EAAMC,IAA1CA,EAAP,KAAWC,EAAX,KAIA,OAFAR,EAAAA,WAAgB,kBAAMQ,EAAMF,EAAMC,KAAOF,EAAWC,EAAMC,KAAME,EAAAA,EAAAA,GAAS,aAAe,SAAQ,CAACH,EAAMC,GAAIF,IAGvG,gBAAC,IAAsBD,EACnB,uCAASD,EAAT,CAAuBO,UAAWC,GAAAA,CAAW,KAAM,WAAY,CAAET,OAAAA,GAAUC,MAAAA,OAA/B,EAA+BA,EAAcO,aACrF,yBAAOE,QAASL,EAAIG,UAAWC,GAAAA,CAAW,iBAAkB,kBAAmB,CAAE,wBAAyBT,KACtG,yCAAWI,EAAX,CAAkBO,KAAK,WAAWN,GAAIA,EAAIG,UAAWC,GAAAA,CAAW,uBAAwBL,EAAMI,WAAYT,IAAKA,KAC/G,yBAAOW,QAASL,EAAIG,UAAU,wBACzBL,U,6KC1BlB,SAASS,EAAUC,EAAeC,GACrC,QADsE,IAAjCA,IAAAA,GAAkB,GAC1C,MAATD,GAA0BE,MAATF,GAQlB,WAAiD,IAAD,uBAA3BG,EAA2B,yBAA3BA,EAA2B,gBACnD,OAAOA,EAAOC,OAAM,SAACC,GAAD,OAAUvB,MAAMuB,MATOC,CAASN,GAAQ,CACxD,IAAMO,EAA+BN,EAAS,EAAI,EAClD,OAAOD,EAAMQ,eAAe,KAAM,CAAED,qBAAAA,EAAsBE,aAAa,IAEvE,MAAO,G,kKCoCFC,EAAuDzB,EAAAA,YAChE,WAEIC,GAC4B,IA+KlByB,EACAC,EACFC,EAGEC,EAtLRC,EAEyB,EAFzBA,YAAaC,EAEY,EAFZA,YAAarB,EAED,EAFCA,UAAWK,EAEZ,EAFYA,MAAOiB,EAEnB,EAFmBA,IAAKC,EAExB,EAFwBA,IAAKC,EAE7B,EAF6BA,SAAUC,EAEvC,EAFuCA,SAEvC,IAFiDC,WAAAA,OAEjD,MAF8D,KAE9D,EAFoEjC,EAEpE,EAFoEA,aAAckC,EAElF,EAFkFA,wBAA4B/B,GAE9G,YAC3B,EAAoCN,EAAAA,SAAgC,QAA7DsC,EAAP,KAAmBC,EAAnB,KACMC,EAAcxC,EAAAA,aAAkB,SAACyC,GACnC,UAAUA,GAAKA,aAAanD,OAASO,MAAM4C,EAAE3C,cAC9C,IAEG4C,EAAoB1C,EAAAA,aACtB,SAACyC,EAASX,GACN,OAAIU,EAAYC,MACS,OAAOA,EAAEE,eAAgBC,QAAQ,EAAG,GAIlD,KAHe,MAAKH,EAAEI,WAAa,IAAID,QAAQ,EAAG,GAGlD,KAFa,KAAKH,EAAEK,WAAYF,QAAQ,EAAG,IAEjBA,OAAO,EAAGd,EAAc,EAAI,KAEtD,KAGf,CAACU,IAGCO,EAAmB/C,EAAAA,aACrB,SAACe,EAAae,GACV,OAAOY,EAAkB3B,EAAOe,KAEpC,CAACY,IAGCM,EAAgBhD,EAAAA,aAAkB,SAACyC,EAAST,EAAWC,GACzD,OAAKD,IAAQC,MAEFD,GAAOS,GAAKT,MACdC,KAAQA,GAAOQ,GAAKR,MAQ9B,IAEGgB,EAA2BjD,EAAAA,aAC7B,SAACkD,EAAaC,EAAeC,GACzBF,EAAMpB,EAAc,EAAIoB,EACxB,IAAMG,EAAwBvC,EAAUsC,GAAM,GAAtB,IAA+BtC,EAAUqC,GAAzC,IAAmDrC,EAAUoC,GAC/ExB,EAAa,IAAIpC,KAAK+D,GAEtBH,GAASC,GAAWC,GAAQZ,EAAYd,IAASsB,EAActB,EAAMM,EAAKC,GAC5EE,EAAST,GAETS,EAAS,QAGjB,CAACa,EAAeb,EAAUH,EAAKC,EAAKH,IAGlCwB,EAAgBtD,EAAAA,aAClB,SAACe,EAAae,GACV,IAAMyB,EAAwBR,EAAiBhC,EAAOe,GACtD,GAAMyB,EAEF,OADsBzB,EAAc,EAAI0B,OAAOD,EAAcX,OAAO,EAAG,MAI/E,CAACG,IAGL,EAAkC/C,EAAAA,SAAuBsD,EAAcvC,EAAOe,IAAvE2B,EAAP,KAAkBC,EAAlB,KAEMC,EAAkB3D,EAAAA,aACpB,SAACe,EAAae,GACV,IAAMyB,EAAwBR,EAAiBhC,EAAOe,GACtD,GAAMyB,EAEF,OADsBzB,EAAc,EAAI0B,OAAOD,EAAcX,OAAO,EAAG,MAI/E,CAACG,IAGL,EAAsC/C,EAAAA,SAAuB2D,EAAgB5C,EAAOe,IAA7E8B,EAAP,KAAoBC,EAApB,KAEMC,EAAiB9D,EAAAA,aACnB,SAACe,EAAae,GACV,IAAMyB,EAAwBR,EAAiBhC,EAAOe,GACtD,GAAMyB,EAEF,OADsBzB,EAAc,EAAI0B,OAAOD,EAAcX,OAAO,EAAG,MAI/E,CAACG,IAGL,EAAoC/C,EAAAA,SAAuB8D,EAAe/C,EAAOe,IAA1EiC,EAAP,KAAmBC,EAAnB,KAEMC,EAAwBjE,EAAAA,aAC1B,SAACJ,GACG,IAAKkC,EAAa,CAAC,IAAD,IACRoC,EAAY,UAAAtE,EAAEuE,cAAF,SAAUpD,QAAUyC,OAAO3D,MAAM2D,OAAM,UAAC5D,EAAEuE,cAAH,aAAC,EAAUpD,QAAUyC,OAAO5D,EAAEuE,OAAOpD,OAAS,KACvG2C,GAAa,WAET,OADAT,EAAyBiB,EAAGN,EAAaG,GAClCG,QAInB,CAACN,EAAaG,EAAYd,IAGxBmB,EAA0BpE,EAAAA,aAC5B,SAACJ,GAAmD,IAAD,IACzCsE,EAAY,UAAAtE,EAAEuE,cAAF,SAAUpD,QAAUyC,OAAO3D,MAAM2D,OAAM,UAAC5D,EAAEuE,cAAH,aAAC,EAAUpD,QAAUyC,OAAO5D,EAAEuE,OAAOpD,OAAS,KACvG8C,GAAe,WAEX,OADAZ,EAAyBQ,EAAWS,EAAGH,GAChCG,OAGf,CAACT,EAAWM,EAAYd,IAGtBoB,EAAyBrE,EAAAA,aAC3B,SAACJ,GAAkD,IAAD,IACxCsE,EAAY,UAAAtE,EAAEuE,cAAF,SAAUpD,QAAUyC,OAAO3D,MAAM2D,OAAM,UAAC5D,EAAEuE,cAAH,aAAC,EAAUpD,QAAUyC,OAAO5D,EAAEuE,OAAOpD,OAAS,KACvGiD,GAAc,WAEV,OADAf,EAAyBQ,EAAWG,EAAaM,GAC1CA,OAGf,CAACT,EAAWG,EAAaX,IAGvBqB,EAAwBtE,EAAAA,aAAkB,SAACuE,GAC7C,GAAKC,KAAD,mBACA,IACI,IAAM7C,EAAW,IAAK6C,KAAaC,mBAAmBF,GACtD,GAAI5C,EACA,OAAOA,EAEb,MAAO+C,GACL,OAAO,KAGf,OAAO,OACR,IAEGC,EAAqB3E,EAAAA,aAAkB,SAACoC,GAC1C,IAAIwC,EACJ,IACIA,EAAS,IAAIJ,KAAKK,eAAezC,EAAY,CAAEe,MAAO,SACxD,MAAOuB,GACLI,QAAQC,KAAR,qBAAkC3C,EAAlC,mDACAwC,EAAS,IAAIJ,KAAKK,eAAe,KAAM,CAAE1B,MAAO,SAEpD,OAAOyB,IACR,IAEGI,EAAuB,CACzB7B,MAAO,QACPD,IAAK,MACLE,KAAM,QA0CJ6B,EAAsB,SAACpE,GACzB,GAAwB,oBAAbqE,SAA0B,CACjC,IAAMC,EAA0BD,SAASE,cAAc,SACvDD,EAAME,aAAa,OAAQxE,GAE3B,IAAMyE,EAAwB,aAG9B,OAFAH,EAAME,aAAa,QAASC,GAErBH,EAAMpE,QAAUuE,EAG3B,OAAO,GAGLC,EAAiB,SAAC3F,GACpB,IAAe4F,EAAqB5F,EAAEuE,OAA9BpD,MACFA,EAAc,IAAIzB,KAAKkG,GACzBxC,EAAcjC,EAAOiB,EAAKC,GAC1BE,EAASpB,GAGboB,EAAS,OAwFb,OAfAnC,EAAAA,WAAgB,WACZuC,GAAc,WACV,OAAIR,EACO,SAEPD,GAAemD,EAAoB,SAC5B,QAEPA,EAAoB,QACb,OAEJ,cAEZ,CAAClD,EAAaD,IAEE,UAAfQ,EAEI,yCACQhC,EADR,CAEIL,IAAKA,EACLY,KAAK,QACLH,UAAWC,GAAAA,CAAW,eAAgB,wBAAyBD,GAC/DsB,IAAKU,EAAkBV,EAAKF,GAC5BG,IAAKS,EAAkBT,EAAKH,GAC5Bf,MAAOiC,EAAcjC,EAAOiB,EAAKC,GAAOc,EAAiBhC,EAAOe,GAAe,GAC/EI,SAAUA,EACVC,SAAUoD,KAGI,SAAfjD,EAEH,yCACQhC,EADR,CAEIL,IAAKA,EACLY,KAAK,OACLH,UAAWC,GAAAA,CAAW,eAAgB,wBAAyBD,GAC/DsB,IAAKU,EAAkBV,EAAKF,GAC5BG,IAAKS,EAAkBT,EAAKH,GAC5Bf,MAAOiC,EAAcjC,EAAOiB,EAAKC,GAAOc,EAAiBhC,EAAOe,GAAe,GAC/EI,SAAUA,EACVC,SAAUoD,KAIX,gCAlHoB,SAACxE,EAAae,EAAsB2D,EAA6BT,EAAsB9C,EAAmBwD,GACrI,IAAM9D,EAAkBE,GAAW,OAAO2D,EAAkBE,QAAO,SAACC,GAAD,MAAqB,QAANA,MAAgBH,EAClG,OACI,uCAAStF,EAAT,CAAuBF,IAAKA,EAAKS,UAAWC,GAAAA,CAAW,cAAe,wBAAyBR,MAAAA,OAAzC,EAAyCA,EAAcO,aACxGkB,MAAAA,OADL,EACKA,EAAOiE,KAAI,SAACC,EAAcC,GACvB,OAAQD,GACJ,IAAK,MACD,OACI,yCACQxF,EADR,CAEI0F,IAAKD,EACLrF,UAAWC,GAAAA,CAAW,eAAgB,4BAA6BD,GACnEG,KAAK,SACLmB,IAAI,IACJC,IAAI,KACJgE,YAAajB,EAAU9B,IACvBhB,SAAUA,EACVnB,MAAOiC,EAAcjC,EAAOiB,EAAKC,IAAOwB,GAAkB,GAC1DtB,SAAU8B,KAItB,IAAK,QACD,OACI,0CACQ5B,EADR,CAEI2D,IAAKD,EACLrF,UAAWC,GAAAA,CACP,gBACA,8BACA,CAAE,eAA8B,IAAdoF,GAClB,CAAE,gBAAiBA,IAAcN,EAAkB9F,OAAS,GAC5D0C,MAAAA,OALiB,EAKjBA,EAAyB3B,WAE7BK,MAAOiC,EAAcjC,EAAOiB,EAAKC,IAAO2B,GAAoB,GAC5D1B,SAAUA,EACVC,SAAUiC,IAETsB,EAAWG,KAAI,SAAC1C,EAAe+C,GAC5B,OACI,0BAAQF,IAAKE,EAAGhE,SAAUA,GAAkB,IAANgE,EAASnF,MAAOmF,GACjD/C,OAOzB,IAAK,OACD,OACI,yCACQ7C,EADR,CAEI0F,IAAKD,EACLrF,UAAWC,GAAAA,CAAW,eAAgB,6BAA8BD,GACpEG,KAAK,SACLmB,IAAI,IACJiE,YAAajB,EAAU5B,KACvBlB,SAAUA,EACVnB,MAAOiC,EAAcjC,EAAOiB,EAAKC,IAAO8B,GAAmB,GAC3D5B,SAAUkC,UAuD5B8B,CAAuBpF,EAAOe,GApKlCJ,EAAa,IAAIpC,KAAK,KAAM,EAAG,GAC/BqC,EAAW2C,EAAsBlC,GACnCR,EAAkB,CAAC,MAAO,QAAS,QAGjCC,EAF8B8C,EAAmBvC,GAEfgE,OAAO1E,GAC/CE,EAAMyE,MAAK,SAACC,EAAGC,GACX,IAAMC,EAA0D,CAC5DtD,KAAKrB,MAAAA,OAAA,EAAAA,EAAkB4E,OAAO,QAAS,EACvCtD,OAAOtB,MAAAA,OAAA,EAAAA,EAAkB4E,OAAO,QAAS,EACzCrD,MAAMvB,MAAAA,OAAA,EAAAA,EAAkB4E,OAAO,WAAY,GAE/C,OAAOD,EAAUF,GAAKE,EAAUD,MAGpC3E,MAAAA,GAAAA,EAAOiE,KAAI,SAACC,GAAU,IAAD,MACjBd,EAAUc,IACNnE,MAAAA,GAAA,UAAAA,EACM+E,cAAc,EAAGZ,UADvB,mBAEMH,QAAO,SAACC,GAAD,MAAkB,YAAXA,EAAE/E,QAAoB,UAF1C,mBAGME,aAHN,eAGa4F,SAAUb,KAGxBlE,GA6ImEoD,EAAW9C,EAjLtE,WACf,IAAMR,EAAa,IAAIpC,KAAK,KAAM,EAAG,GAC/BsF,EAA8BD,EAAmBvC,GAEjDwE,EAAkB,CAAC5B,EAAU7B,OAKnC,OAJA,OAAI1D,MAAM,KAAKoG,KAAI,SAACgB,EAAGX,GACnBxE,EAAKoF,SAASZ,GACdU,EAAMG,KAAKnC,EAAOwB,OAAO1E,OAEtBkF,EAwKwFlB,S,yLC9W9FsB,EAAwChH,EAAAA,YAAiB,WAA4EC,GAA5E,EAAGgH,KAAH,IAAS7G,EAAT,EAASA,UAAW8B,EAApB,EAAoBA,SAAUnB,EAA9B,EAA8BA,MAAOoB,EAArC,EAAqCA,SAAa7B,GAAlD,mBAClE,gBAAC4G,EAAA,EAAsB9G,EACnB,uCAASE,EAAT,CAAgBL,IAAKA,EAAKS,UAAWC,GAAAA,CAAW,cAAeL,EAAMI,aAChEV,EAAAA,SAAAA,IAAmBM,EAAMD,UAAU,SAAC8G,GAAD,OAChCnH,EAAAA,eAAiDmH,GAC3CnH,EAAAA,aAAwBmH,EAAO,CAC3BC,QAASrG,IAAUoG,EAAM7G,MAAMS,MAC/BmB,SAAUA,GAAYiF,EAAM7G,MAAM4B,SAClCC,SAAU,SAACvC,GAAD,OAA4CuC,EAASvC,MAEnEuH,U,qDCdTE,EAA0CrH,EAAAA,YAAiB,WAAyEC,GAA+C,IAArHI,EAAoH,EAApHA,SAAUD,EAA0G,EAA1GA,UAA0G,IAA/FD,aAAAA,OAA+F,MAAhF,GAAgF,EAAzEG,GAAyE,YAC3L,EAAoBN,EAAAA,SAAuB,IAApCO,EAAP,KAAWC,EAAX,KAIA,OAFAR,EAAAA,WAAgB,kBAAMQ,EAAMF,EAAMC,KAAME,EAAAA,EAAAA,GAAS,gBAAe,CAACH,EAAMC,KAGnE,gBAAC2G,EAAA,EAAsB9G,EACnB,uCAASD,EAAT,CAAuBO,UAAWC,GAAAA,CAAW,kBAAmBR,EAAaO,aACzE,yBAAOE,QAASL,EAAIG,UAAU,kCAC1B,yCAAWJ,EAAX,CAAkBL,IAAKA,EAAKS,UAAWC,GAAAA,CAAW,uBAAwBL,EAAMI,WAAYG,KAAK,QAAQN,GAAIA,KAC5GF,GACG,yBAAOO,QAASL,EAAIG,UAAU,wBACzBL,U,yLCNhBiH,EAAkCtH,EAAAA,YAC3C,WAA0FC,GAA+C,IAAtIsH,EAAqI,EAArIA,MAAOC,EAA8H,EAA9HA,WAAYC,EAAkH,EAAlHA,WAAYrH,EAAsG,EAAtGA,UAAsG,IAA3FD,aAAAA,OAA2F,MAA5E,GAA4E,EAArEG,GAAqE,YACpI,EAAoBN,EAAAA,SAAuB,IAApCO,EAAP,KAAWC,EAAX,KAMA,OAJAR,EAAAA,WAAgB,WACZQ,EAAMF,EAAMC,GAAKD,EAAMC,IAAKE,EAAAA,EAAAA,GAAS,eACtC,CAACH,EAAMC,KAGN,uCAASJ,EAAT,CAAuBO,UAAWC,GAAAA,CAAW,oBAAqBR,EAAaO,aAC1E6G,GAAS,yBAAO7G,UAAU,gBAAgB6G,GAC3C,gBAACL,EAAA,EAAsB9G,EACnB,uBAAKM,UAAW,qBAAuBJ,EAAM4B,SAAW,YAAc,KAClE,0BACIxB,UAAW,qBAAuBJ,EAAMS,QAAUT,EAAM0B,IAAM,YAAc,IAC5E0F,QAASpH,EAAMS,MAAQT,EAAM0B,MAAQ1B,EAAM4B,SAAWsF,EAAa,KACnE,gBAAejH,EACf,kBAAgB,aAEhB,kCAEJ,uBAAKG,UAAU,mBACX,4BAAOJ,EAAMS,QAEjB,0BACIL,UAAW,qBAAuBJ,EAAMS,QAAUT,EAAM2B,IAAM,YAAc,IAC5EyF,QAASpH,EAAMS,MAAQT,EAAM2B,MAAQ3B,EAAM4B,SAAWuF,EAAa,KACnE,gBAAelH,EACf,kBAAgB,aAEhB,oCAIZ,yCAAWD,EAAX,CAAkBL,IAAKA,EAAKM,GAAIA,EAAIM,KAAK,SAAS8G,UAAU,EAAMjH,UAAWC,GAAAA,CAAW,gBAAiBL,EAAMI,WAAY,YAAU,oB,2KCrCxIkH,EAAoC5H,EAAAA,YAAiB,WAA8EC,GAAkD,IAA7HG,EAA4H,EAA5HA,UAAWmH,EAAiH,EAAjHA,MAAOM,EAA0G,EAA1GA,UAA0G,IAA/F1H,aAAAA,OAA+F,MAAhF,GAAgF,EAAzEG,GAAyE,YAC7L,EAAoBN,EAAAA,WAAbO,EAAP,KAAWC,EAAX,KAIA,OAFAR,EAAAA,WAAgB,kBAAMQ,EAAMF,EAAMC,GAAKD,EAAMC,GAAKgH,GAAQ9G,EAAAA,EAAAA,GAAS,aAAe,QAAO,CAACH,EAAMC,GAAIgH,IAGhG,uCAASpH,EAAT,CAAuBO,UAAWC,GAAAA,CAAW,2BAA4BR,EAAaO,aACjF6G,GAAS,yBAAO3G,QAASL,GAAKgH,GAC/B,gBAACL,EAAA,EAAsB9G,EACnB,4CAAcE,EAAd,CAAqBL,IAAKA,EAAKS,UAAWC,GAAAA,CAAW,eAAgB,CAAEkH,UAAAA,GAAavH,EAAMI,oB,8iCC4EnG,SAASoH,EAAeC,GAC3B,IAAMC,GAAyCC,EAAAA,EAAAA,UAAQ,WACnD,IAAMC,EAA6C,GA+DnD,OA9DAH,MAAAA,GAAAA,EAAUlC,KAAI,SAACsC,GAAiC,IAAD,EAC3CD,EAAiBC,MAAAA,OAAD,EAACA,EAASnC,KAAO,GACjC,UAAAmC,EAAQC,aAAR,SAAevC,KAAI,SAACwC,GAChB,IACIC,EADItC,EAAoDqC,EAApDrC,IAAKjF,EAA+CsH,EAA/CtH,MAAOwH,EAAwCF,EAAxCE,MAGpB,OAH4DF,EAAjCG,aAIvB,IAAK,WAGOF,EAFJC,EACI9I,MAAMgJ,QAAQ1H,IAAWA,EAAgBI,OAAM,SAACyE,GAAD,MAAoB,iBAANA,KAC9C7E,EAEA,GAGa,iBAAVA,EAAqBA,EAAQ,GAEvD,MAEJ,IAAK,WACDuH,IAAiBvH,EACjB,MAEJ,IAAK,aAEGuH,EADgB,iBAATvH,GAAqC,iBAATA,GACpByB,EAAAA,EAAAA,GAAY,IAAIlD,KAAKyB,IAAU,IAAIzB,KAAKyB,GAAS,KACzDA,aAAiBzB,KACTyB,EAEA,KAEnB,MAEJ,IAAK,UAEGuH,EADiB,iBAAVvH,GAAsByC,OAAOkF,UAAUlF,OAAOzC,IACtCyC,OAAOzC,GAEPA,EAEnB,MAEJ,IAAK,SACDuH,EAAe7I,MAAMgJ,QAAQ1H,GAASA,EAAQ,GAC9C,MAEJ,IAAK,QAEGuH,EADiB,iBAAVvH,GAAuC,iBAAVA,EACrBA,EAEA,GAEnB,MAEJ,QACIuH,EAAevH,GAAS,GAI/BmH,EAAiBC,MAAAA,OAAD,EAACA,EAASnC,KAAyCA,GAAOsC,QAI5EJ,IACR,IAEH,GAA0BS,EAAAA,EAAAA,UAAmCX,GAAtDY,EAAP,KAAcC,EAAd,KACA,GAA0CF,EAAAA,EAAAA,UAA4B,IAA/DG,EAAP,KAAsBC,EAAtB,KACA,GAA8CJ,EAAAA,EAAAA,UAA8B,IAArEK,EAAP,KAAwBC,EAAxB,KACA,GAA0BN,EAAAA,EAAAA,WAAkB,GAArCO,EAAP,KAAcC,EAAd,KAQMC,GAAqCC,EAAAA,EAAAA,cACvC,SAACC,EAAoBC,GAA8B,IAAD,IAC9C,GACIxB,MAAAA,GAAA,UAAAA,EAAUyB,MAAK,SAACnB,GAAD,OAA8BA,EAAKrC,MAAQsD,YAA1D,mBAAuElB,aAAvE,eAA8EoB,MAAK,SAACnB,GAAD,OAA2BA,EAAKrC,MAAQuD,OAAY,GADnIE,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,GAAoB,WAFpB,EAA6BlB,YAIzB,OAAO,EAEX,GAAwB,iBAAbiB,GAA2BA,EAAS9J,OAAQ,CACnD,IAAIgK,EAMJ,IAJKC,EAAAA,EAAAA,GAAQhB,KAAWgB,EAAAA,EAAAA,GAAQhB,EAAMU,MAClCK,EAAcf,EAAMU,GAAgDG,SAGrDxI,IAAf0I,QAA0C1I,IAAdyI,EAC5B,OAAO,EAGX,GAA0B,iBAAfC,GAA2BA,IAAeD,EACjD,OAAON,EAAaE,EAAYG,GAC7B,GAAIE,GAAcD,GAAkC,iBAAdA,GAA0BjK,MAAMgJ,QAAQiB,GACjF,cAA4BA,KAA5B,aAAgD,CAAC,IAAtCG,EAAqC,QAC5C,GAAIA,GAC0B,iBAAfF,GAA2BlK,MAAMgJ,QAAQkB,GAChD,cAA6BA,KAA7B,aAAyC,CAAC,IAA/BG,EAA8B,QACrC,GAAIA,GAA4C,iBAAnBA,GAA+BA,IAAmBD,EAC3E,OAAOT,EAAaE,EAAYG,SAMjD,GAAIE,GAAoC,kBAAfA,EAC5B,OAAOP,EAAaE,EAAYG,GAEpC,OAAO,EAEX,OAAO,IAEX,CAACb,IAGCzG,GAAgCkH,EAAAA,EAAAA,cAClC,SAAClB,GAAD,OAAiC,SAACE,GAAD,OAA2B,SAACzI,GAAoB,IAAD,KAC3EsJ,GAASC,GAAS,GACnB,IAAMY,EAAgDnB,GAASA,EAAMoB,eAAe7B,EAAQnC,KAAO4C,EAAMT,EAAQnC,KAAO,GAEpHiE,EAA0C,KAE9C,QAHqC5B,MAAAA,OAAA,EAAAA,EAAMG,cAAe,QAItD,IAAK,OACL,IAAK,WACDyB,EAAYrK,EAAgEuE,OAAOpD,MACnFkJ,EAA8B,WAAnB5B,EAAK6B,UAAyB1G,OAAOyG,GAAYA,EAC5D,MACJ,IAAK,SACD,IAAIE,GAAoB,OAASJ,EAAa1B,EAAKrC,MAAqB,IAClEoE,EAAuBxK,EAA0CuE,OAAOpD,MAE1EoJ,EAAWX,MAAK,SAAC5J,GAAD,OAAeA,IAAMwK,KACrCD,GAAU,OAAOA,EAAWxE,QAAO,SAAC/F,GAAD,OAAeA,IAAMwK,MAExDD,EAAWpD,KAAKqD,GAEpBH,EAAWE,EACX,MAEJ,IAAK,QAAU,IAAD,EACJC,EAAuBxK,EAA0CuE,OAAOpD,MACxEsJ,EAA2C,UAAGhC,EAAKiC,eAAR,aAAG,EAAcd,MAAK,SAACe,GAAD,OAAOA,EAAExJ,QAAUqJ,KACtFC,IACAJ,EAAWI,EAAatJ,OAE5B,MAEJ,IAAK,WAEDkJ,EAD8BrK,EAA0CuE,OAAOiD,QAE/E,MAEJ,IAAK,WACD,IAAMjD,EAAUvE,EAA2CuE,OAC3D8F,EAAW9F,EAAOqG,UAAWC,EAAAA,EAAAA,GAAyBhL,MAAMiL,KAAKvG,EAAOmG,UAAYnG,EAAOpD,MAC3F,MAGJ,QACIkJ,EAAWrK,EAKnBiJ,EAAS,OAAD,UACDD,IADC,MAEHT,EAAQnC,KAFL,iBAGG+D,IAHH,MAIC1B,EAAKrC,KAAMiE,EAJZ,aAQZ,CAACrB,EAAOM,EAAOC,IAGbwB,GAAO1C,EAAAA,EAAAA,UAAQ,WACjB,IAAI2C,EAA+B,GAwCnC,OAtCA7C,MAAAA,GAAAA,EAAU8C,SAAQ,YAAiC,IAAzBvB,EAAwB,EAA7BtD,IAAiBoC,EAAY,EAAZA,MAClCwC,EAAQtB,GAAc,GACtBlB,MAAAA,GAAAA,EAAOyC,SAAQ,YAA2B,IAAD,EAIjCC,EAJU9E,EAAuB,EAAvBA,IAAKwC,EAAkB,EAAlBA,YACbuC,EAA8DnC,GAASA,EAAMU,IAAeV,EAAMU,GAAYtD,GAC9GgF,KAAuBlC,GAAiBA,EAAcQ,IAA/B,UAA8CR,EAAcQ,GAAYtD,UAAxE,OAA8C,EAAgCrG,QACrGsL,EAAqB7B,EAAaE,EAAYtD,GAGpD,OAAQwC,GACJ,IAAK,aACDsC,GAAiBtI,EAAAA,EAAAA,GAAYuI,GAC7B,MACJ,IAAK,WACL,IAAK,QACL,IAAK,SACL,IAAK,OACL,IAAK,WACDD,IAAoBC,MAAAA,IAAAA,EAA8BpL,QAClD,MACJ,IAAK,WACDmL,IAAmBC,EACnB,MACJ,IAAK,UACDD,EAAiBtH,OAAOkF,UAAUqC,GAClC,MACJ,QACID,EAAiB,KAIzBF,EAAQtB,GAAYtD,GAAO,CACvBgF,SAAAA,EACAC,UAAAA,EACAH,eAAAA,SAKLF,IACR,CAACxB,EAAcN,IAMlB,MAAO,EAJYO,EAAAA,EAAAA,cAAY,WAC3B,OAAO,gBAAC6B,EAAD,CAAsBnD,SAAUA,EAAUe,cAAeA,EAAeE,gBAAiBA,EAAiBJ,MAAOA,EAAOzG,SAAUA,EAAUiH,aAAcA,MAClK,CAACjH,EAAUiH,EAAcN,EAAeE,IAEvBJ,EAAOC,EAAUE,EAAkBE,EAAoB0B,EAAMzB,GAGrF,IAAMgC,EAOD,SAAC5K,GAAW,IAAD,EACZ,OACI,0CACKA,EAAMyH,gBADX,aACK,EAAgBlC,KAAI,SAACsC,EAASjC,GAAV,OACjB,gBAAC,WAAD,CAAgBF,IAAKE,GACdiC,MAAAA,GAAAA,EAASgD,MAAQ,sBAAIzK,UAAU,+CAA+CyH,EAAQgD,OAAc,KACvG,gBAACC,EAAD,CACIpF,IAAKE,EACLiC,QAASA,EACTkD,QAASzB,EAAAA,EAAAA,GAAQtJ,EAAMwI,iBAAmBc,EAAAA,EAAAA,GAAQtJ,EAAMwI,cAAcX,EAAQnC,MAA2C,GAAnC1F,EAAMwI,cAAcX,EAAQnC,KAClHsF,UAAW1B,EAAAA,EAAAA,GAAQtJ,EAAM0I,mBAAqBY,EAAAA,EAAAA,GAAQtJ,EAAM0I,gBAAgBb,EAAQnC,MAA6C,GAArC1F,EAAM0I,gBAAgBb,EAAQnC,KAC1HoD,aAAc9I,EAAM8I,aACpBjH,SAAU7B,EAAM6B,SAASgG,GACzBS,MAAOtI,EAAMsI,OAAStI,EAAMsI,MAAMoB,eAAe7B,EAAQnC,KAAO1F,EAAMsI,MAAMT,EAAQnC,KAAO,aAQ7GoF,EAOD,SAAC9K,GACF,MAA2DA,EAAM6H,QAAjE,IAAQoD,gBAAAA,OAAR,MAA0B,OAA1B,MAAkCC,gBAAAA,OAAlC,MAAoD,GAApD,EAEMC,EAAc,oCAChBnL,EAAM6H,eADU,iBAChB,EAAeC,aADC,aAChB,EAAsBvC,KAAI,SAACwC,EAAMnC,GAC7B,GAAI5F,EAAM8I,aAAa9I,EAAM6H,QAAQnC,IAAKqC,EAAKrC,KAC3C,OACI,gBAAC0F,EAAD,CACI1F,IAAKE,EACLmC,KAAMA,EACNsD,cAAe/B,EAAAA,EAAAA,GAAQtJ,EAAM+K,UAAYzB,EAAAA,EAAAA,GAAQtJ,EAAM+K,OAAOhD,EAAKrC,MAAiC,KAAzB1F,EAAM+K,OAAOhD,EAAKrC,KAC7F4F,gBAAiBhC,EAAAA,EAAAA,GAAQtJ,EAAMgL,YAAc1B,EAAAA,EAAAA,GAAQtJ,EAAMgL,SAASjD,EAAKrC,MAAmC,KAA3B1F,EAAMgL,SAASjD,EAAKrC,KACrG7D,SAAU7B,EAAM6B,SAASkG,GACzBO,MAAOtI,EAAMsI,MAAStI,EAAMsI,MAA0CP,EAAKrC,KAAO,WAMtG,OAAQuF,GACJ,IAAK,MACD,OAAO,sBAASC,EAAkBC,KACtC,IAAK,UACD,OAAO,0BAAaD,EAAkBC,KAE1C,QACI,OAAO,gCAAGA,OAIhBC,EAMD,SAACpL,GAAW,IAAD,kBAoBRuL,EAnBErD,GAA+B,UAAAlI,EAAM+H,YAAN,eAAYG,cAAe,OAC1DsD,EAOF,CACA7E,MAAM,UAAA3G,EAAM+H,YAAN,eAAYrC,MAAO,GACzBjF,MAAOT,EAAMsI,MACbmD,UAAS,UAAEzL,EAAM+H,YAAR,aAAE,EAAYrG,IACvBgK,UAAS,UAAE1L,EAAM+H,YAAR,aAAE,EAAYpG,IACvBgE,YAAW,UAAE3F,EAAM+H,YAAR,aAAE,EAAYpC,YACzB9D,SAAU7B,EAAM6B,UAGpB,EAA6D7B,EAAM+H,KAA3D4D,2BAAAA,OAAR,MAAqC,GAArC,EAIMC,EAAuB,UAAA5L,EAAM+H,YAAN,SAAYd,MAAQ,yBAAO7G,UAAU,0CAAjB,UAA2DJ,EAAM+H,YAAjE,aAA2D,EAAYd,OAAiB,iCACnI4E,EAA6B,UAAA7L,EAAM+H,YAAN,SAAY+D,YAAc,qBAAG1L,UAAU,2DAAb,UAAwEJ,EAAM+H,YAA9E,aAAwE,EAAY+D,aAAmB,iCAE9JhM,EAAuBJ,EAAAA,SAAc,WACvC,OAAOM,EAAMqL,aACP,CAAE9K,KAAM,SAAUwL,QAAS/L,EAAMqL,cACjCrL,EAAMsL,eACN,CAAE/K,KAAM,UAAWwL,QAAS/L,EAAMsL,gBAClC,CAAE/K,KAAM,OAAQyL,UAAU,EAAMD,QAAS,MAChD,CAAC/L,EAAMqL,aAAcrL,EAAMsL,iBAE9B,OAAQpD,GACJ,IAAK,WACD,MAAgCsD,EAAxB/K,MAAAA,OAAR,MAAgB,GAAhB,EAAuBwL,GAAvB,OAAgCT,EAAhC,GAEAD,EACI,gCACKK,EACAC,EACD,gBAACvE,EAAA,EAAD,iBAAc2E,EAAd,CAAoBxL,MAAOA,EAAOX,UAAWA,GAAe6L,KAGpE,MAEJ,IAAK,OACD,MAAgCH,EAAxB/K,MAAAA,OAAR,MAAgB,GAAhB,EAAuBwL,GAAvB,OAAgCT,EAAhC,GAEAD,EACI,gCACKK,EACAC,EACD,gBAACK,EAAA,EAAD,iBAAaD,EAAb,CAAmBxL,MAAOA,EAAOX,UAAWA,EAAWS,KAAMP,EAAM+H,KAAK6B,WAAa,QAAY+B,KAGzG,MAGJ,IAAK,QAAU,IAAD,IACFhF,EAA0B6E,EAA1B7E,KAAM9E,EAAoB2J,EAApB3J,SAAUpB,EAAU+K,EAAV/K,MAExB8K,EACI,gCACKK,EACAC,EACD,gBAACjF,EAAA,EAAsB9G,EACnB,gBAAC,IAAD,eAAkB6G,KAAAA,EAAM9E,SAAAA,EAAUpB,MAAAA,GAAakL,GAA/C,UACK3L,EAAM+H,YADX,iBACK,EAAYiC,eADjB,aACK,EAAqBzE,KAAI,SAAC4G,EAA2BvG,GAA5B,OACtB,gBAACmB,EAAA,EAAD,eAAarB,IAAKE,EAAGnF,MAAO0L,MAAAA,OAAF,EAAEA,EAAQ1L,QAAY0L,MAAAA,OAAA,EAAAA,EAAQjB,kBAAmB,IACtEiB,MAAAA,OADL,EACKA,EAAQlF,OACRkF,MAAAA,OAAA,EAAAA,EAAQL,cAAe,qBAAG1L,UAAU,kBAAkB+L,MAAAA,OAA/B,EAA+BA,EAAQL,oBAOvF,MAGJ,IAAK,WAAa,IAAD,MACLnF,EAAuC6E,EAAvC7E,KAAM9E,EAAiC2J,EAAjC3J,SAAU8D,EAAuB6F,EAAvB7F,YAAalF,EAAU+K,EAAV/K,MAErC8K,EACI,gCACKK,EACAC,EACD,gBAACO,EAAA,EAAD,eAAgBzF,KAAAA,EAAM9E,SAAAA,EAAU8D,YAAAA,EAAalF,MAAAA,EAASX,UAAWA,EAAWoK,SAAQ,UAAElK,EAAM+H,YAAR,aAAE,EAAYE,OAAW0D,GAA7G,UACK3L,EAAM+H,YADX,iBACK,EAAYiC,eADjB,aACK,EAAqBzE,KAAI,SAAC4G,EAA2BvG,GAA5B,OACtB,wCAAQF,IAAKE,EAAGnF,MAAO0L,MAAAA,OAAF,EAAEA,EAAQ1L,QAAY0L,MAAAA,OAAA,EAAAA,EAAQjB,kBAAmB,IACjEiB,MAAAA,OADL,EACKA,EAAQlF,YAM7B,MAGJ,IAAK,WAAa,IAAD,EACLN,EAA0B6E,EAA1B7E,KAAM9E,EAAoB2J,EAApB3J,SAAUpB,EAAU+K,EAAV/K,MACxB8K,EACI,gBAAC9L,EAAA,EAAD,eAAgBkH,KAAAA,EAAM9E,SAAAA,EAAY/B,UAAWA,EAAWgH,UAAWrG,GAAWkL,GAA9E,UACK3L,EAAM+H,YADX,aACK,EAAYd,MACZ4E,GAGT,MAGJ,IAAK,aAAe,IAAD,IACPhK,GAA0B2J,EAA1B3J,SAAU8E,GAAgB6E,EAAhB7E,KAAMlG,GAAU+K,EAAV/K,MACxB8K,EACI,gCACKK,EACAC,EACD,gBAACjF,EAAA,EAAsB9G,EACnB,gBAACqB,EAAA,EAAD,eAAkBV,MAAAA,GAAOoB,SAAAA,GAAU8E,KAAAA,GAAQjF,IAAG,UAAE1B,EAAM+H,YAAR,aAAE,EAAYrG,IAAKC,IAAG,UAAE3B,EAAM+H,YAAR,aAAE,EAAYpG,KAASgK,MAIvG,MAGJ,IAAK,UAAY,IAAD,MACZ,GAAsBH,EAAd/K,MAAAA,QAAR,OAAgB,EAAhB,GAEA8K,EACI,gCACKK,EACAC,EACD,gBAAC7E,EAAA,EAAD,eACIvG,MAAOA,GACPX,UAAWA,EACX4B,KAAK,WAAA1B,EAAM+H,YAAN,iBAAYrG,MAAO,EACxBC,KAAK,WAAA3B,EAAM+H,YAAN,iBAAYpG,MAAO,IACxBwF,WAAY,kBAAMnH,EAAM6B,SAASpB,GAAQ,IACzCyG,WAAY,kBAAMlH,EAAM6B,SAASpB,GAAQ,KACrCkL,KAIhB,MAGJ,IAAK,SAAW,IAAD,MACHlL,GAAU+K,EAAV/K,MAER8K,EACI,gCACKK,EACAC,EACD,gBAACjF,EAAA,EAAsB9G,EACnB,qCAAKM,UAAU,mBAAmBiM,KAAK,SAAYV,GAAnD,WACK3L,EAAM+H,YADX,mBACK,GAAYiC,eADjB,cACK,GAAqBzE,KAAI,SAAC4G,EAA2BvG,GAAO,IAAD,EAClD0G,IAAqB7L,MAAAA,KAAAA,GAAoByI,MAAK,SAAC5J,GAAD,OAAe6M,EAAO1L,QAAUnB,MACpF,OACI,wCACIoG,IAAKE,EACLwB,QAASpH,EAAM6B,SACftB,KAAK,SACLN,GAAIkM,EAAOzG,IACXiB,KAAI,UAAE3G,EAAM+H,YAAR,aAAE,EAAYrC,IAClBtF,UAAS,4CAA6CkM,EAAS,UAAY,IAC3E7L,MAAO0L,EAAO1L,QACT0L,MAAAA,OAAA,EAAAA,EAAQjB,kBAAmB,IAE/BiB,MAAAA,OAVL,EAUKA,EAAQlF,aAQrC,MAIJ,QACIsE,EACI,gCACKK,EACAC,GAOjB,OAA2D7L,EAAM+H,KAAjE,MAAQkD,gBAAAA,QAAR,OAA0B,OAA1B,SAAkCC,gBAAAA,QAAlC,OAAoD,GAApD,GAEA,OAAQD,IACJ,IAAK,MACD,OAAO,sBAASC,GAAkBK,GACtC,IAAK,UACD,OAAO,0BAAaL,GAAkBK,GAE1C,QACI,OAAO,gCAAGA","sources":["webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isEmpty/isEmpty.js","webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isValidDate/isValidDate.js","webpack://react-components-docs/../lib/src/Checkbox/Checkbox.tsx","webpack://react-components-docs/../lib/src/Datepicker/formatters.ts","webpack://react-components-docs/../lib/src/Datepicker/Datepicker.tsx","webpack://react-components-docs/../lib/src/RadioButton/RadioGroup.tsx","webpack://react-components-docs/../lib/src/RadioButton/RadioButton.tsx","webpack://react-components-docs/../lib/src/Stepper/Stepper.tsx","webpack://react-components-docs/../lib/src/Textarea/Textarea.tsx","webpack://react-components-docs/../lib/src/hooks/useDynamicForm.tsx"],"sourcesContent":["import \"core-js/modules/es.date.to-string.js\";\n\nfunction n(n) {\n  return null == n || !(n instanceof Date) && !(n instanceof Function) && (n instanceof Object && !(n instanceof Array) ? Object.keys(n).length < 1 : n.length < 1);\n}\n\nexport { n as isEmpty };","import \"core-js/modules/es.date.to-string.js\";\n\nfunction e(e) {\n  return !(!(e && e instanceof Date) || isNaN(e.getTime()));\n}\n\nexport { e as isValidDate };","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator/FeedbackIndicator\";\nimport \"./checkbox.scss\";\n\nexport type CheckboxProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Displays the checkbox inline */\n    inline?: boolean;\n    /** Div wrapper props */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** Indicator for error, warning or success */\n    indicator?: Indicator;\n};\n\nexport const Checkbox: React.FC<CheckboxProps> = React.forwardRef(({ inline, wrapperProps, indicator, children, ...props }: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(props.id);\n\n    React.useEffect(() => setId(props.id || (children ? props.id || randomId(\"checkbox-\") : null)), [props.id, children]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames(\"rc\", \"checkbox\", { inline }, wrapperProps?.className)}>\n                <label htmlFor={id} className={classnames(\"custom-control\", \"custom-checkbox\", { \"custom-control-inline\": inline })}>\n                    <input {...props} type=\"checkbox\" id={id} className={classnames(\"custom-control-input\", props.className)} ref={ref} />\n                    <label htmlFor={id} className=\"custom-control-label\">\n                        {children}\n                    </label>\n                </label>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n","export function padNumber(value: number, isYear: boolean = false): string {\n    if (value != null && value != undefined && isNumber(value)) {\n        const minimumIntegerDigits: number = isYear ? 4 : 2;\n        return value.toLocaleString(\"en\", { minimumIntegerDigits, useGrouping: false });\n    } else {\n        return \"\";\n    }\n}\n\nexport function isNumber(...values: number[]): boolean {\n    return values.every((val) => !isNaN(val));\n}\n","import React from \"react\";\nimport { padNumber } from \"./formatters\";\nimport classnames from \"classnames\";\nimport \"./datepicker.scss\";\n\ninterface OverriddenNativeProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n    value: any;\n    min?: any;\n    max?: any;\n    onChange: any;\n}\n\nexport interface DatepickerProps extends OverriddenNativeProps {\n    /** the value of the datepicker as a Date object */\n    value: Date;\n    /** On Change handler with the latest Date value */\n    onChange: (value: Date) => void;\n    /** Property sets whether a datepicker is a month picker  */\n    monthPicker?: boolean;\n    /** Property sets whether SEB styled datepicker will be rendered despite the browser used */\n    forceCustom?: boolean;\n    /** Minimum range of date that can be selected */\n    min?: Date;\n    /** Maximum range of date that can be selected */\n    max?: Date;\n    /** Locale of datepicker */\n    localeCode?: string;\n    /** Div wrapper props. NOTE: customPicker ONLY! */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** Props for the select element of month picker. NOTE: customPicker ONLY! */\n    customPickerSelectProps?: JSX.IntrinsicElements[\"select\"];\n}\n\ninterface UnitNames {\n    month: string;\n    day: string;\n    year: string;\n}\n\ntype InputRenderType = \"custom\" | \"date\" | \"month\";\n\nexport const Datepicker: React.FunctionComponent<DatepickerProps> = React.forwardRef(\n    (\n        { monthPicker, forceCustom, className, value, min, max, disabled, onChange, localeCode = \"en\", wrapperProps, customPickerSelectProps, ...props }: DatepickerProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ): React.ReactElement<void> => {\n        const [renderType, setRenderType] = React.useState<InputRenderType>(\"date\");\n        const isValidDate = React.useCallback((d: Date): boolean => {\n            return !!(d && d instanceof Date && !isNaN(d.getTime()));\n        }, []);\n\n        const getStringFromDate = React.useCallback(\n            (d: Date, monthPicker: boolean): string => {\n                if (isValidDate(d)) {\n                    const year: string = `0000${d.getFullYear()}`.substr(-4, 4);\n                    const month: string = `00${d.getMonth() + 1}`.substr(-2, 2);\n                    const day: string = `00${d.getDate()}`.substr(-2, 2);\n\n                    return `${year}-${month}-${day}`.substr(0, monthPicker ? 7 : 10) || \"\";\n                } else {\n                    return \"\";\n                }\n            },\n            [isValidDate]\n        );\n\n        const getInputRawValue = React.useCallback(\n            (value: Date, monthPicker: boolean): string => {\n                return getStringFromDate(value, monthPicker);\n            },\n            [getStringFromDate]\n        );\n\n        const isDateInRange = React.useCallback((d: Date, min: Date, max: Date): boolean => {\n            if (!min && !max) {\n                return true;\n            } else if (min && d >= min) {\n                if (!max || (max && d <= max)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }, []);\n\n        const onCustomDatepickerChange = React.useCallback(\n            (day: number, month: number, year: number) => {\n                day = monthPicker ? 1 : day;\n                const dateString: string = `${padNumber(year, true)}-${padNumber(month)}-${padNumber(day)}`;\n                const date: Date = new Date(dateString);\n                // as long as all custom input fields are not null and is valid date, fire onChange\n                if (!!day && !!month && !!year && isValidDate(date) && isDateInRange(date, min, max)) {\n                    onChange(date);\n                } else {\n                    onChange(null);\n                }\n            },\n            [isDateInRange, onChange, min, max, monthPicker]\n        );\n\n        const initCustomDay = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(8, 2));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customDay, setCustomDay] = React.useState<number>(initCustomDay(value, monthPicker));\n\n        const initCustomMonth = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(5, 2));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customMonth, setCustomMonth] = React.useState<number>(initCustomMonth(value, monthPicker));\n\n        const initCustomYear = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(0, 4));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customYear, setCustomYear] = React.useState<number>(initCustomYear(value, monthPicker));\n\n        const handleChangeCustomDay = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\n                if (!monthPicker) {\n                    const v: number = e.target?.value && !Number.isNaN(Number(e.target?.value)) ? Number(e.target.value) : null;\n                    setCustomDay(() => {\n                        onCustomDatepickerChange(v, customMonth, customYear);\n                        return v;\n                    });\n                }\n            },\n            [customMonth, customYear, onCustomDatepickerChange]\n        );\n\n        const handleChangeCustomMonth = React.useCallback(\n            (e: React.ChangeEvent<HTMLSelectElement>): void => {\n                const v: number = e.target?.value && !Number.isNaN(Number(e.target?.value)) ? Number(e.target.value) : null;\n                setCustomMonth(() => {\n                    onCustomDatepickerChange(customDay, v, customYear);\n                    return v;\n                });\n            },\n            [customDay, customYear, onCustomDatepickerChange]\n        );\n\n        const handleChangeCustomYear = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\n                const v: number = e.target?.value && !Number.isNaN(Number(e.target?.value)) ? Number(e.target.value) : null;\n                setCustomYear(() => {\n                    onCustomDatepickerChange(customDay, customMonth, v);\n                    return v;\n                });\n            },\n            [customDay, customMonth, onCustomDatepickerChange]\n        );\n\n        const getRelativeTimeFormat = React.useCallback((code: string): any => {\n            if ((Intl as any)[\"RelativeTimeFormat\"]) {\n                try {\n                    const rtf: any = new (Intl as any).RelativeTimeFormat(code);\n                    if (rtf) {\n                        return rtf;\n                    }\n                } catch (error) {\n                    return null;\n                }\n            }\n            return null;\n        }, []);\n\n        const getLocaleOrDefault = React.useCallback((localeCode: string): Intl.DateTimeFormat => {\n            let locale: Intl.DateTimeFormat;\n            try {\n                locale = new Intl.DateTimeFormat(localeCode, { month: \"long\" });\n            } catch (error) {\n                console.warn(`Locale with code: ${localeCode} was not recognised. Using locale 'en' instead.`);\n                locale = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n            }\n            return locale;\n        }, []);\n\n        const unitNames: UnitNames = {\n            month: \"Month\",\n            day: \"Day\",\n            year: \"Year\",\n        };\n\n        const monthNames = () => {\n            const date: Date = new Date(2012, 0, 5);\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\n\n            const names: string[] = [unitNames.month];\n            [...Array(12)].map((_, i) => {\n                date.setMonth(i);\n                names.push(locale.format(date));\n            });\n            return names;\n        };\n\n        const customPickerOrder = () => {\n            const date: Date = new Date(2012, 0, 5);\n            const rtf: any = getRelativeTimeFormat(localeCode);\n            let order: string[] = [\"day\", \"month\", \"year\"];\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\n\n            const localeDateString: string = locale.format(date);\n            order.sort((a, b) => {\n                const positions: { day: number; month: number; year: number } = {\n                    day: localeDateString?.search(/5/g) || 0,\n                    month: localeDateString?.search(/1/g) || 1,\n                    year: localeDateString?.search(/2012/g) || 2,\n                };\n                return positions[a] - positions[b];\n            });\n\n            order?.map((unit) => {\n                unitNames[unit] =\n                    rtf\n                        ?.formatToParts(1, unit)\n                        ?.filter((x) => x.type === \"literal\")[1]\n                        ?.value?.trim() || unit;\n            });\n\n            return order;\n        };\n\n        const supportsInputOfType = (type: \"date\" | \"month\"): boolean => {\n            if (typeof document !== \"undefined\") {\n                const input: HTMLInputElement = document.createElement(\"input\");\n                input.setAttribute(\"type\", type);\n\n                const notADateValue: string = \"not-a-date\";\n                input.setAttribute(\"value\", notADateValue);\n\n                return input.value !== notADateValue;\n            }\n\n            return false;\n        };\n\n        const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n            const { value: changeEventValue } = e.target;\n            const value: Date = new Date(changeEventValue);\n            if (isDateInRange(value, min, max)) {\n                onChange(value);\n                return;\n            }\n            onChange(null);\n        };\n\n        const renderCustomDatepicker = (value: Date, monthPicker: boolean, customPickerOrder: string[], unitNames: UnitNames, disabled: boolean, monthNames: string[]) => {\n            const order: string[] = monthPicker ? [...customPickerOrder.filter((x: string) => x !== \"day\")] : customPickerOrder;\n            return (\n                <div {...wrapperProps} ref={ref} className={classnames(\"input-group\", \"seb-datepicker-custom\", wrapperProps?.className)}>\n                    {order?.map((unit: string, unitIndex: number) => {\n                        switch (unit) {\n                            case \"day\":\n                                return (\n                                    <input\n                                        {...props}\n                                        key={unitIndex}\n                                        className={classnames(\"form-control\", \"seb-datepicker-custom-day\", className)}\n                                        type=\"number\"\n                                        min=\"1\"\n                                        max=\"31\"\n                                        placeholder={unitNames.day}\n                                        disabled={disabled}\n                                        value={isDateInRange(value, min, max) ? customDay || \"\" : \"\"}\n                                        onChange={handleChangeCustomDay}\n                                    />\n                                );\n\n                            case \"month\":\n                                return (\n                                    <select\n                                        {...customPickerSelectProps}\n                                        key={unitIndex}\n                                        className={classnames(\n                                            \"custom-select\",\n                                            \"seb-datepicker-custom-month\",\n                                            { \"rounded-left\": unitIndex === 0 },\n                                            { \"rounded-right\": unitIndex === customPickerOrder.length - 1 },\n                                            customPickerSelectProps?.className\n                                        )}\n                                        value={isDateInRange(value, min, max) ? customMonth || \"\" : \"\"}\n                                        disabled={disabled}\n                                        onChange={handleChangeCustomMonth}\n                                    >\n                                        {monthNames.map((month: string, i: number) => {\n                                            return (\n                                                <option key={i} disabled={disabled || i === 0} value={i}>\n                                                    {month}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                );\n\n                            case \"year\":\n                                return (\n                                    <input\n                                        {...props}\n                                        key={unitIndex}\n                                        className={classnames(\"form-control\", \"seb-datepicker-custom-year\", className)}\n                                        type=\"number\"\n                                        min=\"1\"\n                                        placeholder={unitNames.year}\n                                        disabled={disabled}\n                                        value={isDateInRange(value, min, max) ? customYear || \"\" : \"\"}\n                                        onChange={handleChangeCustomYear}\n                                    />\n                                );\n                            default:\n                                break;\n                        }\n                    })}\n                </div>\n            );\n        };\n\n        React.useEffect(() => {\n            setRenderType(() => {\n                if (forceCustom) {\n                    return \"custom\";\n                }\n                if (monthPicker && supportsInputOfType(\"month\")) {\n                    return \"month\";\n                }\n                if (supportsInputOfType(\"date\")) {\n                    return \"date\";\n                }\n                return \"custom\";\n            });\n        }, [forceCustom, monthPicker]);\n\n        if (renderType === \"month\") {\n            return (\n                <input\n                    {...props}\n                    ref={ref}\n                    type=\"month\"\n                    className={classnames(\"form-control\", \"seb-datepicker-native\", className)}\n                    min={getStringFromDate(min, monthPicker)}\n                    max={getStringFromDate(max, monthPicker)}\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \"\"}\n                    disabled={disabled}\n                    onChange={handleOnChange}\n                />\n            );\n        } else if (renderType === \"date\") {\n            return (\n                <input\n                    {...props}\n                    ref={ref}\n                    type=\"date\"\n                    className={classnames(\"form-control\", \"seb-datepicker-native\", className)}\n                    min={getStringFromDate(min, monthPicker)}\n                    max={getStringFromDate(max, monthPicker)}\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \"\"}\n                    disabled={disabled}\n                    onChange={handleOnChange}\n                />\n            );\n        } else {\n            return <>{renderCustomDatepicker(value, monthPicker, customPickerOrder(), unitNames, disabled, monthNames())}</>;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { RadioButtonProps } from \"./RadioButton\";\n\nexport type RadioGroupProps<T = React.ReactText> = JSX.IntrinsicElements[\"div\"] & {\n    /** The name of the group */\n    name: string;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Disable the whole group */\n    disabled?: boolean;\n    /** The value of the group */\n    value?: T;\n    /** On change handler */\n    onChange?: React.ChangeEventHandler<HTMLInputElement>;\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \"Yes\" or \"No\". */\nexport const RadioGroup: React.FC<RadioGroupProps> = React.forwardRef(({ name, indicator, disabled, value, onChange, ...props }: RadioGroupProps, ref: React.ForwardedRef<HTMLDivElement>) => (\n    <FeedbackIndicator {...indicator}>\n        <div {...props} ref={ref} className={classnames(\"radio-group\", props.className)}>\n            {React.Children.map(props.children, (Child: React.ReactElement<RadioButtonProps>) =>\n                React.isValidElement<React.FC<RadioButtonProps>>(Child)\n                    ? React.cloneElement<any>(Child, {\n                          checked: value === Child.props.value,\n                          disabled: disabled || Child.props.disabled,\n                          onChange: (e: React.ChangeEvent<HTMLInputElement>) => onChange(e),\n                      })\n                    : Child\n            )}\n        </div>\n    </FeedbackIndicator>\n));\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./radio-button.scss\";\n\nexport type RadioButtonProps<T = React.ReactText> = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** Radio button value */\n    value?: T;\n    indicator?: Indicator;\n    /** Props for the div wrapper around the radio input element */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \"Yes\" or \"No\". */\nexport const RadioButton: React.FC<RadioButtonProps> = React.forwardRef(({ children, indicator, wrapperProps = {}, ...props }: RadioButtonProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(\"\");\n\n    React.useEffect(() => setId(props.id || randomId(\"radiobtn-\")), [props.id]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames(\"rc radio-button\", wrapperProps.className)}>\n                <label htmlFor={id} className=\"rc custom-radio custom-control\">\n                    <input {...props} ref={ref} className={classnames(\"custom-control-input\", props.className)} type=\"radio\" id={id} />\n                    {children && (\n                        <label htmlFor={id} className=\"custom-control-label\">\n                            {children}\n                        </label>\n                    )}\n                </label>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./stepper.scss\";\n\nexport type StepperProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Element label */\n    label?: string;\n    /** callback when element value is decreased */\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** callback when element value is increased */\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** Feedback indicator */\n    indicator?: Indicator;\n    /** Props for the wrapper element (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n\n/** A stepper makes it easier to input values that are in a narrow range */\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\n    ({ label, onDecrease, onIncrease, indicator, wrapperProps = {}, ...props }: StepperProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n        const [id, setId] = React.useState<string>(\"\");\n\n        React.useEffect(() => {\n            setId(props.id ? props.id : randomId(\"stepper-\"));\n        }, [props.id]);\n\n        return (\n            <div {...wrapperProps} className={classnames(\"rc custom-stepper\", wrapperProps.className)}>\n                {label && <label className=\"custom-label\">{label}</label>}\n                <FeedbackIndicator {...indicator}>\n                    <div className={\"stepper-container\" + (props.disabled ? \" disabled\" : \"\")}>\n                        <button\n                            className={\"stepper-decrement\" + (props.value === props.min ? \" disabled\" : \"\")}\n                            onClick={props.value > props.min && !props.disabled ? onDecrease : null}\n                            aria-controls={id}\n                            aria-labelledby=\"decrement\"\n                        >\n                            <span>&#8722;</span>\n                        </button>\n                        <div className=\"stepper-preview\">\n                            <span>{props.value}</span>\n                        </div>\n                        <button\n                            className={\"stepper-increment\" + (props.value === props.max ? \" disabled\" : \"\")}\n                            onClick={props.value < props.max && !props.disabled ? onIncrease : null}\n                            aria-controls={id}\n                            aria-labelledby=\"increment\"\n                        >\n                            <span>&#43;</span>\n                        </button>\n                    </div>\n                </FeedbackIndicator>\n                <input {...props} ref={ref} id={id} type=\"number\" readOnly={true} className={classnames(\"stepper-input\", props.className)} aria-live=\"assertive\" />\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./textarea.scss\";\n\nexport type TextareaProps = JSX.IntrinsicElements[\"textarea\"] & {\n    /** Element label */\n    label?: string;\n    /** Property sets whether textarea is resizable */\n    resizable?: boolean;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Wrapper props (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** Textarea is a component that allows user to add or edit text in multiline */\nexport const Textarea: React.FC<TextareaProps> = React.forwardRef(({ indicator, label, resizable, wrapperProps = {}, ...props }: TextareaProps, ref: React.ForwardedRef<HTMLTextAreaElement>) => {\n    const [id, setId] = React.useState<string>();\n\n    React.useEffect(() => setId(props.id ? props.id : label ? randomId(\"textarea-\") : null), [props.id, label]);\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc text-area input-field\", wrapperProps.className)}>\n            {label && <label htmlFor={id}>{label}</label>}\n            <FeedbackIndicator {...indicator}>\n                <textarea {...props} ref={ref} className={classnames(\"form-control\", { resizable }, props.className)} />\n            </FeedbackIndicator>\n        </div>\n    );\n});\n","import React, { useState, ReactNode, useCallback, useMemo } from \"react\";\n\nimport { Checkbox } from \"../Checkbox\";\nimport { Textbox } from \"../Textbox\";\nimport { Textarea } from \"../Textarea\";\nimport { Dropdown, getValueOfMultipleSelect } from \"../Dropdown\";\nimport { Datepicker } from \"../Datepicker\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { Stepper } from \"../Stepper\";\nimport { RadioButton, RadioGroup } from \"../RadioButton\";\nimport { isEmpty } from \"@sebgroup/frontend-tools/isEmpty\";\nimport { isValidDate } from \"@sebgroup/frontend-tools/isValidDate\";\n\nexport type DynamicFormInternalStateValue = string | string[] | Date | boolean | number;\nexport interface DynamicFormItem {\n    key: string;\n    controlType: DynamicFormType;\n    value?: DynamicFormInternalStateValue;\n    order?: number;\n    label?: string;\n    description?: string;\n    multi?: boolean;\n    min?: any;\n    max?: any;\n    placeholder?: string;\n    options?: Array<DynamicFormOption>;\n    valueType?: \"string\" | \"number\";\n    rulerKey?: string;\n    condition?: DynamicFormInternalStateValue;\n    formElementAdditionalProps?: {\n        [k: string]: any;\n    };\n    wrappingElement?: \"div\" | \"section\" | \"none\";\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport type DynamicFormType = \"Hidden\" | \"Text\" | \"Textarea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Option\" | \"LabelOnly\" | \"Stepper\";\n\nexport interface DynamicFormSection {\n    key: string;\n    title?: string;\n    order?: number;\n    items?: Array<DynamicFormItem>;\n    wrappingElement?: \"div\" | \"section\" | \"none\";\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport interface DynamicFormOption<T = any> {\n    key: string;\n    value?: T;\n    label?: string;\n    description?: string;\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport type InputChange = React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> | React.MouseEvent<HTMLButtonElement, MouseEvent> | Date | number;\nexport interface DynamicFormInternalStateSection {\n    [k: string]: DynamicFormInternalStateValue;\n}\nexport interface DynamicFormInternalState {\n    [k: string]: DynamicFormInternalStateSection;\n}\n\nexport interface DynamicFormMetaData {\n    [k: string]: {\n        [k: string]: DynamicFormMetaDataItem;\n    };\n}\n\nexport interface DynamicFormMetaDataItem {\n    /** This field is currently visible (based on conditional rendering) */\n    isVisible: boolean;\n    /** this field has an error message */\n    hasError: boolean;\n    /** This field has a non empty, null, undefined or otherwise falsy value (based on its controlType) */\n    hasTruthyValue: boolean;\n}\n\nexport type DynamicFormWarnings = DynamicFormErrors;\nexport interface DynamicFormErrors {\n    [k: string]: {\n        [k: string]: string;\n    };\n}\n\ntype OnChangeFormSection = (section: DynamicFormSection) => OnChangeFormItem;\ntype OnChangeFormItem = (item: DynamicFormItem) => OnChangeInput;\ntype OnChangeInput = (e: InputChange) => void;\ntype ShouldRenderFormItem = (sectionKey: string, itemKey: string) => boolean;\n\nexport type FormRenderFunction = () => JSX.Element;\nexport type SetDynamicFormState = React.Dispatch<React.SetStateAction<DynamicFormInternalState>>;\nexport type SetDynamicFormErrors = React.Dispatch<React.SetStateAction<DynamicFormErrors>>;\nexport type SetDynamicFormWarnings = React.Dispatch<React.SetStateAction<DynamicFormErrors>>;\ntype isDynamicFormDirty = boolean;\nexport type UseDynamicForm = [FormRenderFunction, DynamicFormInternalState, SetDynamicFormState, SetDynamicFormErrors, SetDynamicFormWarnings, DynamicFormMetaData, isDynamicFormDirty];\nexport function useDynamicForm(sections: DynamicFormSection[]): UseDynamicForm {\n    const initialState: DynamicFormInternalState = useMemo(() => {\n        const initialFormState: DynamicFormInternalState = {};\n        sections?.map((section: DynamicFormSection) => {\n            initialFormState[section?.key] = {};\n            section.items?.map((item) => {\n                const { key, value, multi, controlType }: DynamicFormItem = item;\n                let initialValue: any;\n\n                switch (controlType) {\n                    case \"Dropdown\": {\n                        if (multi) {\n                            if (Array.isArray(value) && (value as any[]).every((x) => typeof x === \"string\")) {\n                                initialValue = value as string[];\n                            } else {\n                                initialValue = [];\n                            }\n                        } else {\n                            initialValue = typeof value === \"string\" ? value : \"\";\n                        }\n                        break;\n                    }\n                    case \"Checkbox\": {\n                        initialValue = !!value;\n                        break;\n                    }\n                    case \"Datepicker\": {\n                        if (typeof value == \"string\" || typeof value == \"number\") {\n                            initialValue = isValidDate(new Date(value)) ? new Date(value) : null;\n                        } else if (value instanceof Date) {\n                            initialValue = value as Date;\n                        } else {\n                            initialValue = null;\n                        }\n                        break;\n                    }\n                    case \"Stepper\": {\n                        if (typeof value !== \"number\" && Number.isInteger(Number(value))) {\n                            initialValue = Number(value);\n                        } else {\n                            initialValue = value;\n                        }\n                        break;\n                    }\n                    case \"Option\": {\n                        initialValue = Array.isArray(value) ? value : [];\n                        break;\n                    }\n                    case \"Radio\": {\n                        if (typeof value === \"string\" || typeof value === \"number\") {\n                            initialValue = value;\n                        } else {\n                            initialValue = \"\";\n                        }\n                        break;\n                    }\n                    default:\n                        initialValue = value || \"\";\n                        break;\n                }\n\n                (initialFormState[section?.key] as DynamicFormInternalStateSection)[key] = initialValue;\n            });\n        });\n\n        return initialFormState;\n    }, []);\n\n    const [state, setState] = useState<DynamicFormInternalState>(initialState);\n    const [errorMessages, setErrorMessages] = useState<DynamicFormErrors>({});\n    const [warningMessages, setWarningMessages] = useState<DynamicFormWarnings>({});\n    const [dirty, setDirty] = useState<boolean>(false);\n\n    /**\n     * SHOULD RENDER CONTROL:\n     * Determines if the form control should be rendered or not.\n     * @param sectionKey section key\n     * @param itemKey section key\n     */\n    const shouldRender: ShouldRenderFormItem = useCallback<ShouldRenderFormItem>(\n        (sectionKey: string, itemKey: string): boolean => {\n            const { rulerKey, condition, controlType }: Partial<DynamicFormItem> =\n                sections?.find((item: DynamicFormSection) => item.key === sectionKey)?.items?.find((item: DynamicFormItem) => item.key === itemKey) || {};\n            if (controlType === \"Hidden\") {\n                // Marked as hidden, don't render\n                return false;\n            }\n            if (typeof rulerKey === \"string\" && !!rulerKey.length) {\n                let rulerState: DynamicFormInternalStateValue;\n\n                if (!isEmpty(state) && !isEmpty(state[sectionKey])) {\n                    rulerState = (state[sectionKey] as DynamicFormInternalStateSection)[rulerKey];\n                }\n\n                if (rulerState === undefined || condition === undefined) {\n                    return false;\n                }\n\n                if (typeof rulerState === \"string\" && rulerState === condition) {\n                    return shouldRender(sectionKey, rulerKey);\n                } else if (rulerState && condition && typeof condition === \"object\" && Array.isArray(condition)) {\n                    for (const conditionItem of condition as any[]) {\n                        if (conditionItem) {\n                            if (typeof rulerState === \"object\" && Array.isArray(rulerState)) {\n                                for (const rulerValueItem of rulerState) {\n                                    if (rulerValueItem && typeof rulerValueItem === \"string\" && rulerValueItem === conditionItem) {\n                                        return shouldRender(sectionKey, rulerKey);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (rulerState && typeof rulerState === \"boolean\") {\n                    return shouldRender(sectionKey, rulerKey);\n                }\n                return false;\n            }\n            return true;\n        },\n        [state]\n    );\n\n    const onChange: OnChangeFormSection = useCallback<OnChangeFormSection>(\n        (section: DynamicFormSection) => (item: DynamicFormItem) => (e: InputChange) => {\n            !dirty && setDirty(true);\n            const sectionState: DynamicFormInternalStateSection = state && state.hasOwnProperty(section.key) ? state[section.key] : {};\n            const controlType: DynamicFormType = item?.controlType || \"Text\";\n            let newValue: DynamicFormInternalStateValue = null;\n\n            switch (controlType) {\n                case \"Text\":\n                case \"Textarea\":\n                    newValue = (e as React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>).target.value;\n                    newValue = item.valueType === \"number\" ? Number(newValue) : newValue;\n                    break;\n                case \"Option\": {\n                    let newOptions: string[] = [...((sectionState[item.key] as string[]) || [])];\n                    const targetValue: string = (e as React.ChangeEvent<HTMLInputElement>).target.value;\n\n                    if (newOptions.find((e: string) => e === targetValue)) {\n                        newOptions = [...newOptions.filter((e: string) => e !== targetValue)];\n                    } else {\n                        newOptions.push(targetValue);\n                    }\n                    newValue = newOptions;\n                    break;\n                }\n                case \"Radio\": {\n                    const targetValue: string = (e as React.ChangeEvent<HTMLInputElement>).target.value;\n                    const targetOption: DynamicFormOption | undefined = item.options?.find((o) => o.value === targetValue);\n                    if (targetOption) {\n                        newValue = targetOption.value;\n                    }\n                    break;\n                }\n                case \"Checkbox\": {\n                    const targetValue: boolean = (e as React.ChangeEvent<HTMLInputElement>).target.checked;\n                    newValue = targetValue;\n                    break;\n                }\n                case \"Dropdown\": {\n                    const target = (e as React.ChangeEvent<HTMLSelectElement>).target;\n                    newValue = target.multiple ? getValueOfMultipleSelect(Array.from(target.options)) : target.value;\n                    break;\n                }\n\n                default: {\n                    newValue = e as any;\n                    break;\n                }\n            }\n\n            setState({\n                ...state,\n                [section.key]: {\n                    ...sectionState,\n                    [item.key]: newValue,\n                },\n            });\n        },\n        [state, dirty, setDirty]\n    );\n\n    const meta = useMemo(() => {\n        let newMeta: DynamicFormMetaData = {};\n\n        sections?.forEach(({ key: sectionKey, items }) => {\n            newMeta[sectionKey] = {};\n            items?.forEach(({ key, controlType }) => {\n                const itemState: DynamicFormInternalStateValue | undefined | null = state && state[sectionKey] && state[sectionKey][key];\n                const hasError: boolean = !!(errorMessages && errorMessages[sectionKey] && errorMessages[sectionKey][key]?.length);\n                const isVisible: boolean = shouldRender(sectionKey, key);\n                let hasTruthyValue: boolean;\n\n                switch (controlType) {\n                    case \"Datepicker\":\n                        hasTruthyValue = isValidDate(itemState as Date);\n                        break;\n                    case \"Dropdown\":\n                    case \"Radio\":\n                    case \"Option\":\n                    case \"Text\":\n                    case \"Textarea\":\n                        hasTruthyValue = !!(itemState as string | any[])?.length;\n                        break;\n                    case \"Checkbox\":\n                        hasTruthyValue = !!itemState;\n                        break;\n                    case \"Stepper\":\n                        hasTruthyValue = Number.isInteger(itemState);\n                        break;\n                    default:\n                        hasTruthyValue = null;\n                        break;\n                }\n\n                newMeta[sectionKey][key] = {\n                    hasError,\n                    isVisible,\n                    hasTruthyValue,\n                };\n            });\n        });\n\n        return newMeta;\n    }, [shouldRender, errorMessages]);\n\n    const renderForm = useCallback(() => {\n        return <DynamicFormComponent sections={sections} errorMessages={errorMessages} warningMessages={warningMessages} state={state} onChange={onChange} shouldRender={shouldRender} />;\n    }, [onChange, shouldRender, errorMessages, warningMessages]);\n\n    return [renderForm, state, setState, setErrorMessages, setWarningMessages, meta, dirty];\n}\n\nconst DynamicFormComponent: React.FC<{\n    sections: DynamicFormSection[];\n    errorMessages: DynamicFormErrors;\n    warningMessages: DynamicFormWarnings;\n    state: DynamicFormInternalState;\n    onChange: OnChangeFormSection;\n    shouldRender: ShouldRenderFormItem;\n}> = (props) => {\n    return (\n        <>\n            {props.sections?.map((section, i) => (\n                <React.Fragment key={i}>\n                    {!!section?.title ? <h4 className=\"rc dynamic-form dynamic-form-section-header\">{section.title}</h4> : null}\n                    <DynamicFormSectionComponent\n                        key={i}\n                        section={section}\n                        errors={!isEmpty(props.errorMessages) && !isEmpty(props.errorMessages[section.key]) ? props.errorMessages[section.key] : {}}\n                        warnings={!isEmpty(props.warningMessages) && !isEmpty(props.warningMessages[section.key]) ? props.warningMessages[section.key] : {}}\n                        shouldRender={props.shouldRender}\n                        onChange={props.onChange(section)}\n                        state={props.state && props.state.hasOwnProperty(section.key) ? props.state[section.key] : null}\n                    />\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\nconst DynamicFormSectionComponent: React.FC<{\n    section: DynamicFormSection;\n    state: DynamicFormInternalStateSection;\n    errors: { [k: string]: string };\n    warnings: { [k: string]: string };\n    onChange: OnChangeFormItem;\n    shouldRender: ShouldRenderFormItem;\n}> = (props) => {\n    const { wrappingElement = \"none\", additionalProps = {} } = props.section;\n\n    const getSections = (): JSX.Element[] =>\n        props.section?.items?.map((item, i) => {\n            if (props.shouldRender(props.section.key, item.key)) {\n                return (\n                    <DynamicFormItemComponent\n                        key={i}\n                        item={item}\n                        errorMessage={!isEmpty(props.errors) && !isEmpty(props.errors[item.key]) ? props.errors[item.key] : null}\n                        warningMessage={!isEmpty(props.warnings) && !isEmpty(props.warnings[item.key]) ? props.warnings[item.key] : null}\n                        onChange={props.onChange(item)}\n                        state={props.state ? (props.state as DynamicFormInternalStateSection)[item.key] : null}\n                    />\n                );\n            }\n        });\n\n    switch (wrappingElement) {\n        case \"div\":\n            return <div {...additionalProps}>{getSections()}</div>;\n        case \"section\":\n            return <section {...additionalProps}>{getSections()}</section>;\n\n        default:\n            return <>{getSections()}</>;\n    }\n};\n\nconst DynamicFormItemComponent: React.FC<{\n    item: DynamicFormItem;\n    state: DynamicFormInternalStateValue;\n    errorMessage: string | null;\n    warningMessage: string | null;\n    onChange: OnChangeInput;\n}> = (props) => {\n    const controlType: DynamicFormType = props.item?.controlType || \"Text\";\n    const commonProps: {\n        name: string;\n        value: any;\n        minLength: number;\n        maxLength: number;\n        placeholder: string;\n        onChange: (...args: any[]) => void;\n    } = {\n        name: props.item?.key || \"\",\n        value: props.state as any,\n        minLength: props.item?.min,\n        maxLength: props.item?.max,\n        placeholder: props.item?.placeholder,\n        onChange: props.onChange,\n    };\n\n    const { formElementAdditionalProps = {} }: DynamicFormItem = props.item;\n\n    let formItem: ReactNode;\n\n    const labelItem: ReactNode = props.item?.label ? <label className=\"rc dynamic-form dynamic-form-label m-0\">{props.item?.label}</label> : <></>;\n    const descriptionItem: ReactNode = props.item?.description ? <p className=\"rc dynamic-form dynamic-form-description text-muted m-0\">{props.item?.description}</p> : <></>;\n\n    const indicator: Indicator = React.useMemo(() => {\n        return props.errorMessage\n            ? { type: \"danger\", message: props.errorMessage }\n            : props.warningMessage\n            ? { type: \"warning\", message: props.warningMessage }\n            : { type: \"none\", noBorder: true, message: \"\" };\n    }, [props.errorMessage, props.warningMessage]);\n\n    switch (controlType) {\n        case \"Textarea\": {\n            const { value = \"\", ...rest } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Textarea {...rest} value={value} indicator={indicator} {...formElementAdditionalProps} />\n                </>\n            );\n            break;\n        }\n        case \"Text\": {\n            const { value = \"\", ...rest } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Textbox {...rest} value={value} indicator={indicator} type={props.item.valueType || \"text\"} {...formElementAdditionalProps} />\n                </>\n            );\n            break;\n        }\n\n        case \"Radio\": {\n            const { name, onChange, value } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <FeedbackIndicator {...indicator}>\n                        <RadioGroup {...{ name, onChange, value }} {...formElementAdditionalProps}>\n                            {props.item?.options?.map((option: DynamicFormOption, i) => (\n                                <RadioButton key={i} value={option?.value} {...(option?.additionalProps || {})}>\n                                    {option?.label}\n                                    {option?.description && <p className=\"text-muted m-0\">{option?.description}</p>}\n                                </RadioButton>\n                            ))}\n                        </RadioGroup>\n                    </FeedbackIndicator>\n                </>\n            );\n            break;\n        }\n\n        case \"Dropdown\": {\n            const { name, onChange, placeholder, value } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Dropdown {...{ name, onChange, placeholder, value }} indicator={indicator} multiple={props.item?.multi} {...formElementAdditionalProps}>\n                        {props.item?.options?.map((option: DynamicFormOption, i) => (\n                            <option key={i} value={option?.value} {...(option?.additionalProps || {})}>\n                                {option?.label}\n                            </option>\n                        ))}\n                    </Dropdown>\n                </>\n            );\n            break;\n        }\n\n        case \"Checkbox\": {\n            const { name, onChange, value } = commonProps;\n            formItem = (\n                <Checkbox {...{ name, onChange }} indicator={indicator} checked={!!value} {...formElementAdditionalProps}>\n                    {props.item?.label}\n                    {descriptionItem}\n                </Checkbox>\n            );\n            break;\n        }\n\n        case \"Datepicker\": {\n            const { onChange, name, value } = commonProps;\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <FeedbackIndicator {...indicator}>\n                        <Datepicker {...{ value, onChange, name }} min={props.item?.min} max={props.item?.max} {...formElementAdditionalProps} />\n                    </FeedbackIndicator>\n                </>\n            );\n            break;\n        }\n\n        case \"Stepper\": {\n            const { value = 0 } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Stepper\n                        value={value}\n                        indicator={indicator}\n                        min={props.item?.min || 0}\n                        max={props.item?.max || 100}\n                        onIncrease={() => props.onChange(value + 1)}\n                        onDecrease={() => props.onChange(value - 1)}\n                        {...formElementAdditionalProps}\n                    />\n                </>\n            );\n            break;\n        }\n\n        case \"Option\": {\n            const { value } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <FeedbackIndicator {...indicator}>\n                        <div className=\"d-flex flex-wrap\" role=\"group\" {...formElementAdditionalProps}>\n                            {props.item?.options?.map((option: DynamicFormOption, i) => {\n                                const active: boolean = !!(value as string[])?.find((e: string) => option.value === e);\n                                return (\n                                    <button\n                                        key={i}\n                                        onClick={props.onChange}\n                                        type=\"button\"\n                                        id={option.key}\n                                        name={props.item?.key}\n                                        className={`btn btn-sm mr-1 mb-1 btn-outline-primary${active ? \" active\" : \"\"}`}\n                                        value={option.value}\n                                        {...(option?.additionalProps || {})}\n                                    >\n                                        {option?.label}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </FeedbackIndicator>\n                </>\n            );\n            break;\n        }\n\n        // used for LabelOnly and anything else\n        default: {\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n    }\n\n    const { wrappingElement = \"none\", additionalProps = {} } = props.item;\n\n    switch (wrappingElement) {\n        case \"div\":\n            return <div {...additionalProps}>{formItem}</div>;\n        case \"section\":\n            return <section {...additionalProps}>{formItem}</section>;\n\n        default:\n            return <>{formItem}</>;\n    }\n};\n"],"names":["n","Date","Function","Object","Array","keys","length","e","isNaN","getTime","Checkbox","React","ref","inline","wrapperProps","indicator","children","props","id","setId","randomId","className","classnames","htmlFor","type","padNumber","value","isYear","undefined","values","every","val","isNumber","minimumIntegerDigits","toLocaleString","useGrouping","Datepicker","date","rtf","order","localeDateString","monthPicker","forceCustom","min","max","disabled","onChange","localeCode","customPickerSelectProps","renderType","setRenderType","isValidDate","d","getStringFromDate","getFullYear","substr","getMonth","getDate","getInputRawValue","isDateInRange","onCustomDatepickerChange","day","month","year","dateString","initCustomDay","inputRawValue","Number","customDay","setCustomDay","initCustomMonth","customMonth","setCustomMonth","initCustomYear","customYear","setCustomYear","handleChangeCustomDay","v","target","handleChangeCustomMonth","handleChangeCustomYear","getRelativeTimeFormat","code","Intl","RelativeTimeFormat","error","getLocaleOrDefault","locale","DateTimeFormat","console","warn","unitNames","supportsInputOfType","document","input","createElement","setAttribute","notADateValue","handleOnChange","changeEventValue","customPickerOrder","monthNames","filter","x","map","unit","unitIndex","key","placeholder","i","renderCustomDatepicker","format","sort","a","b","positions","search","formatToParts","trim","names","_","setMonth","push","RadioGroup","name","FeedbackIndicator","Child","checked","RadioButton","Stepper","label","onDecrease","onIncrease","onClick","readOnly","Textarea","resizable","useDynamicForm","sections","initialState","useMemo","initialFormState","section","items","item","initialValue","multi","controlType","isArray","isInteger","useState","state","setState","errorMessages","setErrorMessages","warningMessages","setWarningMessages","dirty","setDirty","shouldRender","useCallback","sectionKey","itemKey","find","rulerKey","condition","rulerState","isEmpty","conditionItem","rulerValueItem","sectionState","hasOwnProperty","newValue","valueType","newOptions","targetValue","targetOption","options","o","multiple","getValueOfMultipleSelect","from","meta","newMeta","forEach","hasTruthyValue","itemState","hasError","isVisible","DynamicFormComponent","title","DynamicFormSectionComponent","errors","warnings","wrappingElement","additionalProps","getSections","DynamicFormItemComponent","errorMessage","warningMessage","formItem","commonProps","minLength","maxLength","formElementAdditionalProps","labelItem","descriptionItem","description","message","noBorder","rest","Textbox","option","Dropdown","role","active"],"sourceRoot":""}