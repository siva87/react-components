{"version":3,"file":"component---src-pages-docs-timer-tsx-0f55f1b68c1fdd76904d.js","mappings":"yRAcaA,EAAb,YAEI,WAAYC,GAAoB,IAAD,SAC3B,cAAMA,IAAN,MAEKC,MAAQ,CACTC,MAAO,SAJgB,GAFnC,uCAUIC,cAAA,SAAcC,GAAwB,IAAD,OACjCC,KAAKC,SAAS,CAAEJ,MAAOG,KAAKE,gBAAgBH,KAAY,WACpD,EAAKI,gBACL,EAAKC,cAAgBC,aAAY,WACzBN,EAAU,IACVA,GAAoB,IACpB,EAAKE,SAAS,CAAEJ,MAAO,EAAKK,gBAAgBH,KAAY,WACpC,IAAZA,IACA,EAAKJ,MAAMW,WACX,EAAKH,uBAIlB,SAvBf,EA2BIA,cAAA,WACQH,KAAKI,gBACLG,aAAaP,KAAKI,eAClBJ,KAAKI,cAAgB,OA9BjC,EAkCIF,gBAAA,SAAgBM,GACZ,IAAMC,EAAa,IAAIC,KAAKF,GAC5B,OACKC,EAAKE,cAAgB,EAAIF,EAAKE,cAAgB,IAAM,KACpDF,EAAKG,gBAAkB,GAAK,IAAMH,EAAKG,gBAAkBH,EAAKG,iBAC/D,KACCH,EAAKI,gBAAkB,GAAK,IAAMJ,EAAKI,gBAAkBJ,EAAKI,kBAxC3E,EA4CIC,kBAAA,WACgC,OAAxBd,KAAKL,MAAMoB,eAA6CC,IAAxBhB,KAAKL,MAAMoB,UAC3Cf,KAAKF,cAAcE,KAAKL,MAAMoB,WA9C1C,EAkDIE,qBAAA,WACIjB,KAAKG,iBAnDb,EAsDIe,mBAAA,SAAmBC,GACXA,EAAUJ,WAAaf,KAAKL,MAAMoB,UACN,OAAxBf,KAAKL,MAAMoB,eAA6CC,IAAxBhB,KAAKL,MAAMoB,UAC3Cf,KAAKF,cAAcE,KAAKL,MAAMoB,WAzD9C,EA8DIK,OAAA,WACI,MAAyCpB,KAAKL,MAAfA,GAA/B,EAAQW,SAAR,EAAkBS,UAAlB,aACA,OACI,qCAAKM,UAAWC,GAAAA,CAAW,eAAgB3B,EAAM0B,YAAgB1B,GAC5DK,KAAKJ,MAAMC,QAlE5B,GAA2B0B,EAAAA,W,WCTrBC,EAAuBC,EAAQ,OAwBrC,EArB4B,WACxB,IACMC,EAAoC,CACtC,CACIC,IAAK,WACLC,MAAO,CACH,CACID,IAAK,WACLnB,MAPa,IAQbqB,MAAO,gBACPC,YAAa,WACbC,YAAa,WAK7B,GAAmCC,EAAAA,EAAAA,GAAeN,GAA3CO,EAAP,KAAqBC,EAArB,KAAqBA,SAErB,OAAO,gBAACC,EAAA,EAAD,CAAMC,SAAUZ,EAAca,QAAS,gBAAC3C,EAAD,CAAOqB,SAAUmB,EAASnB,UAjB3C,IAiBqET,SAAU,eAAcgC,KApB5G,uFAoBwHJ,SAAUD,Q,6BC1BpJ","sources":["webpack://react-components-docs/../lib/src/Timer/Timer.tsx","webpack://react-components-docs/./src/pages/docs/timer.tsx","webpack://react-components-docs/../lib/src/Timer/Timer.tsx?1ba2"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type TimerProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Callback when timer ends */\n    callback?: VoidFunction;\n    /** Timer's duration in milliseconds */\n    duration?: number;\n};\n\ninterface TimerState {\n    timer: string;\n}\n/** A timer is a component for measuring time intervals */\nexport class Timer extends React.Component<TimerProps, TimerState> {\n    private innerInterval: any;\n    constructor(props: TimerProps) {\n        super(props);\n\n        this.state = {\n            timer: \"00:00\",\n        };\n    }\n\n    startInterval(timeout: number): void {\n        this.setState({ timer: this.convertMStoTime(timeout) }, () => {\n            this.clearInterval();\n            this.innerInterval = setInterval(() => {\n                if (timeout > 0) {\n                    timeout = timeout - 1000;\n                    this.setState({ timer: this.convertMStoTime(timeout) }, () => {\n                        if (timeout === 0) {\n                            this.props.callback();\n                            this.clearInterval();\n                        }\n                    });\n                }\n            }, 1000);\n        });\n    }\n\n    clearInterval(): void {\n        if (this.innerInterval) {\n            clearTimeout(this.innerInterval);\n            this.innerInterval = null;\n        }\n    }\n\n    convertMStoTime(value: number): string {\n        const date: Date = new Date(value);\n        return (\n            (date.getUTCHours() > 0 ? date.getUTCHours() + \":\" : \"\") +\n            (date.getUTCMinutes() < 10 ? \"0\" + date.getUTCMinutes() : date.getUTCMinutes()) +\n            \":\" +\n            (date.getUTCSeconds() < 10 ? \"0\" + date.getUTCSeconds() : date.getUTCSeconds())\n        );\n    }\n\n    componentDidMount() {\n        if (this.props.duration !== null && this.props.duration !== undefined) {\n            this.startInterval(this.props.duration);\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    componentDidUpdate(prevProps: TimerProps): void {\n        if (prevProps.duration !== this.props.duration) {\n            if (this.props.duration !== null && this.props.duration !== undefined) {\n                this.startInterval(this.props.duration);\n            }\n        }\n    }\n\n    render(): React.ReactNode {\n        const { callback, duration, ...props } = this.props;\n        return (\n            <div className={classnames(\"custom-timer\", props.className)} {...props}>\n                {this.state.timer}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Timer } from \"@sebgroup/react-components/Timer\";\nimport { DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Timer/Timer\");\nconst code: string = `<Timer duration={90000} callback={() => { console.log(\"TIMER ENDED callback\"); }} />`;\n\nconst TimerPage: React.FC = () => {\n    const defaultTimer: number = 90000;\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"duration\",\n                    value: defaultTimer,\n                    label: \"Duration (ms)\",\n                    placeholder: \"Duration\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n    const [renderForm, { controls }] = useDynamicForm(fields);\n\n    return <Docs mainFile={importString} example={<Timer duration={controls.duration || defaultTimer} callback={() => {}} />} code={code} controls={renderForm()} />;\n};\n\nexport default TimerPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport type TimerProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Callback when timer ends */\\n    callback?: VoidFunction;\\n    /** Timer's duration in milliseconds */\\n    duration?: number;\\n};\\n\\ninterface TimerState {\\n    timer: string;\\n}\\n/** A timer is a component for measuring time intervals */\\nexport class Timer extends React.Component<TimerProps, TimerState> {\\n    private innerInterval: any;\\n    constructor(props: TimerProps) {\\n        super(props);\\n\\n        this.state = {\\n            timer: \\\"00:00\\\",\\n        };\\n    }\\n\\n    startInterval(timeout: number): void {\\n        this.setState({ timer: this.convertMStoTime(timeout) }, () => {\\n            this.clearInterval();\\n            this.innerInterval = setInterval(() => {\\n                if (timeout > 0) {\\n                    timeout = timeout - 1000;\\n                    this.setState({ timer: this.convertMStoTime(timeout) }, () => {\\n                        if (timeout === 0) {\\n                            this.props.callback();\\n                            this.clearInterval();\\n                        }\\n                    });\\n                }\\n            }, 1000);\\n        });\\n    }\\n\\n    clearInterval(): void {\\n        if (this.innerInterval) {\\n            clearTimeout(this.innerInterval);\\n            this.innerInterval = null;\\n        }\\n    }\\n\\n    convertMStoTime(value: number): string {\\n        const date: Date = new Date(value);\\n        return (\\n            (date.getUTCHours() > 0 ? date.getUTCHours() + \\\":\\\" : \\\"\\\") +\\n            (date.getUTCMinutes() < 10 ? \\\"0\\\" + date.getUTCMinutes() : date.getUTCMinutes()) +\\n            \\\":\\\" +\\n            (date.getUTCSeconds() < 10 ? \\\"0\\\" + date.getUTCSeconds() : date.getUTCSeconds())\\n        );\\n    }\\n\\n    componentDidMount() {\\n        if (this.props.duration !== null && this.props.duration !== undefined) {\\n            this.startInterval(this.props.duration);\\n        }\\n    }\\n\\n    componentWillUnmount() {\\n        this.clearInterval();\\n    }\\n\\n    componentDidUpdate(prevProps: TimerProps): void {\\n        if (prevProps.duration !== this.props.duration) {\\n            if (this.props.duration !== null && this.props.duration !== undefined) {\\n                this.startInterval(this.props.duration);\\n            }\\n        }\\n    }\\n\\n    render(): React.ReactNode {\\n        const { callback, duration, ...props } = this.props;\\n        return (\\n            <div className={classnames(\\\"custom-timer\\\", props.className)} {...props}>\\n                {this.state.timer}\\n            </div>\\n        );\\n    }\\n}\\n\";"],"names":["Timer","props","state","timer","startInterval","timeout","this","setState","convertMStoTime","clearInterval","innerInterval","setInterval","callback","clearTimeout","value","date","Date","getUTCHours","getUTCMinutes","getUTCSeconds","componentDidMount","duration","undefined","componentWillUnmount","componentDidUpdate","prevProps","render","className","classnames","React","importString","require","fields","key","items","label","placeholder","controlType","useDynamicForm","renderForm","controls","Docs","mainFile","example","code"],"sourceRoot":""}