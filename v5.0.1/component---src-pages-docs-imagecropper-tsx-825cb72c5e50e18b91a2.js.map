{"version":3,"file":"component---src-pages-docs-imagecropper-tsx-825cb72c5e50e18b91a2.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/ImageCropper/ResizeHandle.tsx","webpack://react-components-docs/../lib/src/ImageCropper/ImagePicker.tsx","webpack://react-components-docs/../lib/src/ImageCropper/utils.ts","webpack://react-components-docs/../lib/src/ImageCropper/ImageCropper.tsx","webpack://react-components-docs/./src/pages/docs/imagecropper.tsx","webpack://react-components-docs/../lib/src/Modal/Modal.tsx","webpack://react-components-docs/../lib/src/hooks/useCombinedRef.ts","webpack://react-components-docs/../lib/src/ImageCropper/ImageCropper.tsx?2a71"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { ClipRect } from \"./ImageCropper\";\n\nexport interface ResizeHandleProps {\n    coordinates: ClipRect;\n    position: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\n    handleResize: React.MouseEventHandler | React.TouchEventHandler;\n}\n\nexport const ResizeHandle: React.FC<ResizeHandleProps> = ({ coordinates, position, handleResize, ...props }: ResizeHandleProps) => {\n    const style: React.CSSProperties = {\n        top: position.includes(\"bottom\") ? coordinates.bottom - 10 : coordinates.top,\n        left: position.includes(\"right\") ? coordinates.right - 10 : coordinates.left,\n    };\n\n    return (\n        <div\n            {...props}\n            className={classnames(\"handle\", { [position]: position })}\n            draggable={false}\n            onMouseDown={handleResize as React.MouseEventHandler}\n            onTouchStart={handleResize as React.TouchEventHandler}\n            style={style}\n        />\n    );\n};\n","import React from \"react\";\n\nexport type ImagePickerProps = React.PropsWithChildren<{\n    size: number;\n    image: string;\n    onReset: () => void;\n    onSelect: () => void;\n}>;\n\nexport const ImagePicker: React.FC<ImagePickerProps> = (props: ImagePickerProps) => {\n    return (\n        <div className=\"image-preview\" style={{ width: props.size, height: props.size }}>\n            <div className=\"preview\">\n                {props.image ? <img src={props.image} width=\"100%\" /> : ImagePlaceholderIcon}\n                <button type=\"button\" className=\"select\" onClick={props.onSelect}>\n                    {props.children || \"Select image\"}\n                </button>\n                {props.image && (\n                    <button type=\"button\" className=\"reset\" onClick={props.onReset}>\n                        &#x2715;\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst ImagePlaceholderIcon: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"60\" fill=\"currentColor\">\n        <path\n            fillRule=\"evenodd\"\n            d=\"M14.5 3h-13a.5.5 0 0 0-.5.5v9c0 .013 0 .027.002.04V12l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094L15 9.499V3.5a.5.5 0 0 0-.5-.5zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13zm4.502 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"\n        />\n    </svg>\n);\n","import { ClipRect } from \"./ImageCropper\";\n\n/**\n * Read image from input type file\n * @param event The for event triggered by selecting an image\n * @returns A promise that resolves with the image as data URI string\n */\nexport function readImage(event: React.FormEvent<HTMLInputElement>): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const input: HTMLInputElement = event.target as any;\n\n        if (input.value) {\n            if (input.files && input.files[0]) {\n                const reader: FileReader = new FileReader();\n\n                reader.onload = (event: ProgressEvent<FileReader>) => {\n                    resolve(event.target.result.toString());\n                };\n\n                reader.readAsDataURL(input.files[0]);\n            } else {\n                reject(\"No files found\");\n            }\n        } else {\n            reject(\"No value detected\");\n        }\n    });\n}\n\nexport interface Coordinates {\n    x: number;\n    y: number;\n}\nexport interface Movement {\n    movementX: number;\n    movementY: number;\n}\nlet prevMovement: Coordinates = { x: 0, y: 0 };\n\n/**\n * Gets the X and Y distance that the cursor has travelled\n * @param event The mouse movement event\n * Returns an object of x and y movements\n */\nexport function getMovement(event: MouseEvent | TouchEvent): Movement {\n    let screenX: number = prevMovement.x;\n    let screenY: number = prevMovement.y;\n\n    if (event.type.includes(\"touch\")) {\n        const touchEvent: TouchEvent = event as TouchEvent;\n        if (touchEvent.touches && touchEvent.touches[0]) {\n            screenX = touchEvent.touches[0].screenX;\n            screenY = touchEvent.touches[0].screenY;\n        }\n    } else {\n        const mouseEvent: MouseEvent = event as MouseEvent;\n        screenX = mouseEvent.screenX;\n        screenY = mouseEvent.screenY;\n    }\n\n    var movementX: number = prevMovement.x ? screenX - prevMovement.x : 0;\n    var movementY: number = prevMovement.y ? screenY - prevMovement.y : 0;\n\n    prevMovement = {\n        x: screenX,\n        y: screenY,\n    };\n\n    return { movementX, movementY };\n}\n\n/**\n * A move event handler\n * @param event The mouse move event\n * @param setPos The position setter function\n * @param imgRef The image element\n */\nexport function moveHandler(event: MouseEvent | TouchEvent, img: HTMLImageElement, setPos: React.Dispatch<React.SetStateAction<ClipRect>>): void {\n    const { movementX, movementY } = getMovement(event);\n\n    if (movementX || movementY) {\n        setPos((oldPos: ClipRect) => {\n            const top: number = oldPos.top + movementY;\n            const bottom: number = oldPos.bottom + movementY;\n            const left: number = oldPos.left + movementX;\n            const right: number = oldPos.right + movementX;\n\n            const shouldUpdateY: boolean = top > -1 && bottom <= img.clientHeight;\n            const shouldUpdateX: boolean = left > -1 && right <= img.clientWidth;\n\n            return {\n                top: shouldUpdateY ? top : oldPos.top,\n                bottom: shouldUpdateY ? bottom : oldPos.bottom,\n                left: shouldUpdateX ? left : oldPos.left,\n                right: shouldUpdateX ? right : oldPos.right,\n            };\n        });\n    }\n}\n\nexport type Position = \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\n\nexport function resizeHandler(event: MouseEvent | TouchEvent, position: Position, img: HTMLImageElement, setPos: React.Dispatch<React.SetStateAction<ClipRect>>) {\n    const { movementX, movementY } = getMovement(event);\n\n    let change: ClipRect;\n    let shouldUpdate: boolean;\n\n    switch (position) {\n        case \"top-right\":\n            setPos((oldPos: ClipRect) => {\n                change = {\n                    ...oldPos,\n                    right: oldPos.right + movementX,\n                    top: oldPos.top - movementX,\n                };\n                shouldUpdate = change.right <= img.clientWidth && change.top >= 0;\n                shouldUpdate = shouldUpdate && change.bottom - change.top >= 20 && change.right - change.left >= 20;\n                return shouldUpdate ? change : oldPos;\n            });\n            break;\n        case \"top-left\":\n            setPos((oldPos: ClipRect) => {\n                change = {\n                    ...oldPos,\n                    left: oldPos.left + movementX,\n                    top: oldPos.top + movementX,\n                };\n                shouldUpdate = change.left >= 0 && change.top >= 0;\n                shouldUpdate = shouldUpdate && change.bottom - change.top >= 20 && change.right - change.left >= 20;\n                return shouldUpdate ? change : oldPos;\n            });\n            break;\n        case \"bottom-left\":\n            setPos((oldPos: ClipRect) => {\n                change = {\n                    ...oldPos,\n                    bottom: oldPos.bottom + movementY,\n                    left: oldPos.left - movementY,\n                };\n                shouldUpdate = change.left >= 0 && change.bottom <= img.clientHeight;\n                shouldUpdate = shouldUpdate && change.bottom - change.top >= 20 && change.right - change.left >= 20;\n                return shouldUpdate ? change : oldPos;\n            });\n            break;\n        case \"bottom-right\":\n            setPos((oldPos: ClipRect) => {\n                change = {\n                    ...oldPos,\n                    bottom: oldPos.bottom + movementY,\n                    right: oldPos.right + movementY,\n                };\n                shouldUpdate = change.right <= img.clientWidth && change.bottom <= img.clientHeight;\n                shouldUpdate = shouldUpdate && change.bottom - change.top >= 20 && change.right - change.left >= 20;\n                return shouldUpdate ? change : oldPos;\n            });\n            break;\n    }\n}\n\nexport function addListener(event: React.MouseEvent | React.TouchEvent, callback: (...args: any[]) => void) {\n    let type: keyof DocumentEventMap;\n    let cancelTypes: Array<keyof DocumentEventMap> = [];\n\n    switch (event.type as keyof DocumentEventMap) {\n        case \"mousedown\":\n            type = \"mousemove\";\n            cancelTypes = [\"mouseup\", \"mouseleave\"];\n            break;\n        case \"touchstart\":\n            type = \"touchmove\";\n            cancelTypes = [\"touchend\"];\n    }\n\n    function stop() {\n        document.removeEventListener(type, callback);\n        cancelTypes.forEach((t: keyof DocumentEventMap) => {\n            document[\"on\" + t] = null;\n\n            prevMovement = {\n                x: 0,\n                y: 0,\n            };\n        });\n        document.onkeyup = null;\n    }\n\n    if (type) {\n        document.addEventListener(type, callback);\n\n        cancelTypes.forEach((cancelType: keyof DocumentEventMap) => {\n            document[\"on\" + cancelType] = stop;\n        });\n\n        document.onkeyup = (e: KeyboardEvent) => {\n            if (e.key === \"Escape\") {\n                stop();\n            }\n        };\n    }\n}\n\n/**\n * @param url The source image\n * @param x The x coordinates of the crop box\n * @param y The y coordinates of the crop box\n * @param width The width of the crop box\n * @param height The height of the crop box\n * @param imgContainer The image HTML element containing the original image\n * @return {Promise<HTMLCanvasElement>} A Promise that resolves with the resulting image as a canvas element\n */\nexport function crop(url: string, x: number, y: number, width: number, height: number, imgContainer: HTMLImageElement): Promise<string> {\n    return new Promise((resolve) => {\n        const inputImage: HTMLImageElement = new Image();\n\n        inputImage.onload = () => {\n            const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n            const maxDrawnSize: number = Math.min(imgContainer.width, imgContainer.height);\n            canvas.width = canvas.height = maxDrawnSize;\n\n            const scaleX: number = inputImage.width / imgContainer.width;\n            const scaleY: number = inputImage.height / imgContainer.height;\n\n            const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n            ctx.drawImage(inputImage, x * scaleX, y * scaleY, width * scaleX, height * scaleY, 0, 0, maxDrawnSize, maxDrawnSize);\n            resolve(canvas.toDataURL());\n        };\n\n        inputImage.src = url;\n    });\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Modal } from \"../Modal\";\nimport { ResizeHandle } from \"./ResizeHandle\";\nimport { ImagePicker } from \"./ImagePicker\";\nimport { moveHandler, readImage, resizeHandler, Position, addListener, crop } from \"./utils\";\nimport \"./image-cropper.scss\";\n\ninterface ImageCropperText {\n    select?: string;\n    cancel?: string;\n    crop?: string;\n}\n\nexport type ImageCropperProps = Omit<JSX.IntrinsicElements[\"div\"], \"onChange\"> & {\n    /** The image value as string */\n    value?: string;\n    /** On change handler fired when image has been cropped or reset */\n    onChange?: (image: string) => void;\n    /** The size of the image cropper picker */\n    size?: number;\n    /** Texts used in the image cropper */\n    text?: ImageCropperText;\n};\n\nexport interface ClipRect {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n}\n\nexport const ImageCropper: React.FC<ImageCropperProps> = React.memo(\n    React.forwardRef(({ onChange, value, size = 200, text, ...props }: ImageCropperProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const fileRef: React.MutableRefObject<HTMLInputElement> = React.useRef<HTMLInputElement>();\n        const imgRef: React.MutableRefObject<HTMLImageElement> = React.useRef<HTMLImageElement>();\n        const [modalToggle, setModalToggle] = React.useState<boolean>(false);\n        const [imgSrc, setImgSrc] = React.useState<string>();\n        const [croppedImgSrc, setCroppedImgSrc] = React.useState<string>(value);\n        const [pos, setPos] = React.useState<ClipRect>({ top: 0, left: 0, bottom: 180, right: 180 });\n\n        /** Handles selecting a file */\n        const handleInput = React.useCallback((event: React.FormEvent<HTMLInputElement>) => {\n            readImage(event)\n                .then((val: string) => {\n                    setImgSrc(val);\n                    setModalToggle(true);\n                })\n                .catch(console.error);\n        }, []);\n\n        /** Handles dragging the cropbox */\n        const handleMove = React.useCallback((event: React.MouseEvent | React.TouchEvent) => {\n            addListener(event, (ev) => {\n                moveHandler(ev, imgRef.current, setPos);\n            });\n        }, []);\n\n        /** Handles resizing the cropbox */\n        const handleResize = React.useCallback((event: React.MouseEvent | React.TouchEvent) => {\n            const position: Position = (event.target as HTMLElement).className.replace(\"handle\", \"\").trim() as Position;\n\n            addListener(event, (e: MouseEvent | TouchEvent) => {\n                resizeHandler(e, position, imgRef.current, setPos);\n            });\n        }, []);\n\n        /** Handles cropping the image to the cropbox */\n        const handleCrop = () => {\n            crop(imgSrc, pos.left, pos.top, pos.right - pos.left, pos.bottom - pos.top, imgRef.current).then((img: string) => {\n                setModalToggle(false);\n                onChange && onChange(img);\n            });\n        };\n\n        /** Resets the image cropper */\n        const reset = React.useCallback(() => {\n            setCroppedImgSrc(null);\n            setImgSrc(null);\n            fileRef.current.value = fileRef.current.files = null;\n            onChange && onChange(null);\n        }, [props.onReset]);\n\n        React.useEffect(() => setCroppedImgSrc(value), [value]);\n\n        React.useEffect(() => {\n            modalToggle && setPos({ top: 0, left: 0, bottom: 180, right: 180 });\n        }, [modalToggle]);\n\n        return (\n            <div {...props} ref={ref} className={classnames(\"rc\", \"image-cropper\", props.className)}>\n                <input type=\"file\" accept=\"image/*\" ref={fileRef} onInput={handleInput} hidden />\n\n                <ImagePicker\n                    image={croppedImgSrc}\n                    size={size}\n                    onReset={reset}\n                    onSelect={() => {\n                        fileRef.current.value = fileRef.current.files = null;\n                        fileRef.current.click();\n                    }}\n                >\n                    {text?.select}\n                </ImagePicker>\n\n                <Modal toggle={modalToggle} size=\"lg\" className=\"image-cropper-modal\">\n                    <div className=\"modal-body\">\n                        <div className=\"cropping-area\">\n                            <img src={imgSrc} draggable={false} ref={imgRef} />\n                            <img\n                                className=\"crop-box\"\n                                src={imgSrc}\n                                style={{ clip: `rect(${pos.top}px, ${pos.right}px, ${pos.bottom}px, ${pos.left}px)` }}\n                                draggable={false}\n                                onMouseDown={handleMove}\n                                onTouchStart={handleMove}\n                            />\n                            <ResizeHandle position=\"top-left\" coordinates={pos} handleResize={handleResize} />\n                            <ResizeHandle position=\"top-right\" coordinates={pos} handleResize={handleResize} />\n                            <ResizeHandle position=\"bottom-left\" coordinates={pos} handleResize={handleResize} />\n                            <ResizeHandle position=\"bottom-right\" coordinates={pos} handleResize={handleResize} />\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <div>\n                            <button className=\"btn btn-outline-primary cancel\" onClick={() => setModalToggle(false)} type=\"button\">\n                                {text?.cancel || \"Cancel\"}\n                            </button>\n                            <button className=\"btn btn-primary ml-3\" onClick={handleCrop} type=\"button\">\n                                {text?.crop || \"Crop\"}\n                            </button>\n                        </div>\n                    </div>\n                </Modal>\n            </div>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { ImageCropper } from \"@sebgroup/react-components/ImageCropper/ImageCropper\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/ImageCropper/ImageCropper\");\nconst code: string = `<ImageCropper value={image} onChange={setImage} />`;\n\nconst ImageCropperPage: React.FC = () => {\n    const [image, setImage] = React.useState<string>(\"\");\n\n    const [renderForm, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"size\", label: \"Size\", description: \"The size of the image cropper picker in pixels\", controlType: \"Text\", value: 200 },\n                { key: \"selectText\", label: \"Select text\", description: \"The text used for selecting an image\", controlType: \"Text\", value: \"\" },\n                { key: \"cropText\", label: \"Crop text\", description: \"The text used for crop action\", controlType: \"Text\", value: \"\" },\n                { key: \"cancelText\", label: \"Cancel text\", description: \"The text used to cancel the crop\", controlType: \"Text\", value: \"\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"d-flex flex-column align-items-center mx-auto\">\n                    <ImageCropper\n                        value={image}\n                        onChange={setImage}\n                        size={parseInt(controls?.size) || 200}\n                        text={{ select: controls?.selectText, crop: controls?.cropText, cancel: controls?.cancelText }}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n};\n\nexport default ImageCropperPage;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport classnames from \"classnames\";\nimport \"./modal.scss\";\nimport { useCombinedRefs } from \"../hooks\";\n\nexport type ModalPosition = \"left\" | \"right\" | \"default\";\nexport type ModalSize = \"lg\" | \"md\" | \"sm\";\ntype FocusableElements = HTMLInputElement | HTMLButtonElement | HTMLAnchorElement;\n\nexport type ModalProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Centers the modal in the middle of the screen. Default is `false` */\n    centered?: boolean;\n    /** Size of modal `lg` | `md` | `sm` */\n    size?: ModalSize;\n    /** Toggle fullscreen modal, default is `false` */\n    fullscreen?: boolean;\n    /** Event triggered when escape key is triggered */\n    onEscape?: (e: KeyboardEvent) => void;\n    /** Event triggered when the backdrop is clicked */\n    onBackdropDismiss?: React.MouseEventHandler<HTMLDivElement>;\n    /** Modal position. Available positions: `left`, `right` */\n    position?: ModalPosition;\n    /** Modal toggle */\n    toggle?: boolean;\n    /** To only allow tab to focus within modal */\n    trapFocus?: boolean;\n    /** Automatically focuses on the first input element in the modal dialog */\n    autoFocus?: boolean;\n};\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\n/** The modal component provides a solid foundation for creating dialogs or slideout modals */\nexport const Modal: React.FC<ModalProps> = React.memo(\n    React.forwardRef(({ trapFocus, autoFocus, centered, size, fullscreen, onEscape, onBackdropDismiss, position, toggle, ...props }: ModalProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const dialogRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\n        const [isPristine, setIsPristine] = React.useState<boolean>(true);\n\n        React.useEffect(() => {\n            if (toggle) {\n                isPristine && setIsPristine(false);\n                document.body.classList.add(\"modal-open\");\n            } else {\n                document.body.classList.remove(\"modal-open\");\n            }\n\n            return () => document.body.classList.remove(\"modal-open\");\n        }, [toggle]);\n\n        /** Focus trap */\n        React.useEffect(() => {\n            function tabHandler(e: KeyboardEvent) {\n                if (e.key.toLowerCase() === \"tab\") {\n                    const lastFocusable: string = \"last-focusable-element\";\n                    const focusableElements: FocusableElements[] = Array.from(dialogRef.current.querySelectorAll<FocusableElements>(\"input, button, a\")).filter((el) => el.className !== lastFocusable);\n\n                    if (focusableElements.length) {\n                        if (!e.shiftKey) {\n                            // Descending focus\n                            if (document.activeElement.className === lastFocusable && dialogRef.current.contains(document.activeElement)) {\n                                dialogRef.current.querySelector<FocusableElements>(\"input, button, a\").focus();\n                            } else if (!dialogRef.current.contains(document.activeElement)) {\n                                dialogRef.current.querySelector<FocusableElements>(\"input, button, a\").focus();\n                            }\n                        } else {\n                            // Ascending focus\n                            if ((document.activeElement.className === lastFocusable && dialogRef.current.contains(document.activeElement)) || !dialogRef.current.contains(document.activeElement)) {\n                                focusableElements[focusableElements.length - 1].focus();\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (trapFocus && toggle) {\n                document.addEventListener(\"keyup\", tabHandler);\n            } else {\n                document.removeEventListener(\"keyup\", tabHandler);\n            }\n\n            return () => document.removeEventListener(\"keyup\", tabHandler);\n        }, [trapFocus, toggle]);\n\n        // Escape key listner\n        React.useEffect(() => {\n            function keyupListener(e: KeyboardEvent) {\n                e.key?.toLowerCase() === \"escape\" && onEscape(e);\n            }\n\n            if (onEscape && toggle) {\n                document.addEventListener(\"keyup\", keyupListener);\n            } else {\n                document.removeEventListener(\"keyup\", keyupListener);\n            }\n\n            return () => document.removeEventListener(\"keyup\", keyupListener);\n        }, [onEscape, toggle]);\n\n        return !safeDocument\n            ? null\n            : createPortal(\n                  <div\n                      {...props}\n                      className={classnames(\n                          \"rc\",\n                          \"modal\",\n                          {\n                              show: toggle,\n                              hide: !toggle && !isPristine,\n                              \"modal-centered\": centered,\n                              \"modal-aside\": position && position !== \"default\" && !fullscreen,\n                              [`modal-aside-${[position]}`]: position && position !== \"default\" && !fullscreen,\n                              \"modal-fullscreen\": fullscreen,\n                          },\n                          props.className\n                      )}\n                      role={props.role || \"dialog\"}\n                      tabIndex={props.tabIndex || -1}\n                      aria-modal=\"true\"\n                      onClick={(e) => {\n                          props.onClick && props.onClick(e);\n\n                          const target: HTMLDivElement = e.target as any;\n\n                          if (onBackdropDismiss && target.classList.contains(\"rc\") && target.classList.contains(\"modal\")) {\n                              onBackdropDismiss(e);\n                          }\n                      }}\n                      onAnimationEnd={(e) => {\n                          props.onAnimationEnd && props.onAnimationEnd(e);\n\n                          if (fullscreen && autoFocus && toggle && !dialogRef.current.contains(document.activeElement)) {\n                              dialogRef.current.querySelector(\"input\")?.focus();\n                          }\n                      }}\n                  >\n                      <div\n                          ref={dialogRef}\n                          role=\"document\"\n                          className={classnames(\"modal-dialog\", { [`modal-${size}`]: size })}\n                          onAnimationEnd={() => {\n                              if (autoFocus && toggle && !dialogRef.current.contains(document.activeElement)) {\n                                  dialogRef.current.querySelector(\"input\")?.focus();\n                              }\n                          }}\n                      >\n                          <div className=\"modal-content\">{props.children}</div>\n                          {trapFocus && (\n                              <a className=\"last-focusable-element\" href=\"#\">\n                                  <div className=\"sr-only\">End of focus</div>\n                              </a>\n                          )}\n                      </div>\n                  </div>,\n                  safeDocument.body\n              );\n    })\n);\n","import React from \"react\";\n\n/**\n * Allows you to use the ref as well as forward it to parent component to use\n * @param refs The refs to forward to. Usually the forwarded ref\n */\nexport function useCombinedRefs<T>(...refs: Array<React.LegacyRef<T> | React.RefObject<T>>): React.MutableRefObject<T> {\n    const targetRef = React.useRef<T>();\n\n    React.useEffect(() => {\n        refs.forEach((ref) => {\n            if (!ref) return;\n\n            if (typeof ref === \"function\") {\n                ref(targetRef.current);\n            } else {\n                (ref as any).current = targetRef.current;\n            }\n        });\n    }, [refs]);\n\n    return targetRef;\n}\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { Modal } from \\\"../Modal\\\";\\nimport { ResizeHandle } from \\\"./ResizeHandle\\\";\\nimport { ImagePicker } from \\\"./ImagePicker\\\";\\nimport { moveHandler, readImage, resizeHandler, Position, addListener, crop } from \\\"./utils\\\";\\nimport \\\"./image-cropper.scss\\\";\\n\\ninterface ImageCropperText {\\n    select?: string;\\n    cancel?: string;\\n    crop?: string;\\n}\\n\\nexport type ImageCropperProps = Omit<JSX.IntrinsicElements[\\\"div\\\"], \\\"onChange\\\"> & {\\n    /** The image value as string */\\n    value?: string;\\n    /** On change handler fired when image has been cropped or reset */\\n    onChange?: (image: string) => void;\\n    /** The size of the image cropper picker */\\n    size?: number;\\n    /** Texts used in the image cropper */\\n    text?: ImageCropperText;\\n};\\n\\nexport interface ClipRect {\\n    top: number;\\n    right: number;\\n    bottom: number;\\n    left: number;\\n}\\n\\nexport const ImageCropper: React.FC<ImageCropperProps> = React.memo(\\n    React.forwardRef(({ onChange, value, size = 200, text, ...props }: ImageCropperProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const fileRef: React.MutableRefObject<HTMLInputElement> = React.useRef<HTMLInputElement>();\\n        const imgRef: React.MutableRefObject<HTMLImageElement> = React.useRef<HTMLImageElement>();\\n        const [modalToggle, setModalToggle] = React.useState<boolean>(false);\\n        const [imgSrc, setImgSrc] = React.useState<string>();\\n        const [croppedImgSrc, setCroppedImgSrc] = React.useState<string>(value);\\n        const [pos, setPos] = React.useState<ClipRect>({ top: 0, left: 0, bottom: 180, right: 180 });\\n\\n        /** Handles selecting a file */\\n        const handleInput = React.useCallback((event: React.FormEvent<HTMLInputElement>) => {\\n            readImage(event)\\n                .then((val: string) => {\\n                    setImgSrc(val);\\n                    setModalToggle(true);\\n                })\\n                .catch(console.error);\\n        }, []);\\n\\n        /** Handles dragging the cropbox */\\n        const handleMove = React.useCallback((event: React.MouseEvent | React.TouchEvent) => {\\n            addListener(event, (ev) => {\\n                moveHandler(ev, imgRef.current, setPos);\\n            });\\n        }, []);\\n\\n        /** Handles resizing the cropbox */\\n        const handleResize = React.useCallback((event: React.MouseEvent | React.TouchEvent) => {\\n            const position: Position = (event.target as HTMLElement).className.replace(\\\"handle\\\", \\\"\\\").trim() as Position;\\n\\n            addListener(event, (e: MouseEvent | TouchEvent) => {\\n                resizeHandler(e, position, imgRef.current, setPos);\\n            });\\n        }, []);\\n\\n        /** Handles cropping the image to the cropbox */\\n        const handleCrop = () => {\\n            crop(imgSrc, pos.left, pos.top, pos.right - pos.left, pos.bottom - pos.top, imgRef.current).then((img: string) => {\\n                setModalToggle(false);\\n                onChange && onChange(img);\\n            });\\n        };\\n\\n        /** Resets the image cropper */\\n        const reset = React.useCallback(() => {\\n            setCroppedImgSrc(null);\\n            setImgSrc(null);\\n            fileRef.current.value = fileRef.current.files = null;\\n            onChange && onChange(null);\\n        }, [props.onReset]);\\n\\n        React.useEffect(() => setCroppedImgSrc(value), [value]);\\n\\n        React.useEffect(() => {\\n            modalToggle && setPos({ top: 0, left: 0, bottom: 180, right: 180 });\\n        }, [modalToggle]);\\n\\n        return (\\n            <div {...props} ref={ref} className={classnames(\\\"rc\\\", \\\"image-cropper\\\", props.className)}>\\n                <input type=\\\"file\\\" accept=\\\"image/*\\\" ref={fileRef} onInput={handleInput} hidden />\\n\\n                <ImagePicker\\n                    image={croppedImgSrc}\\n                    size={size}\\n                    onReset={reset}\\n                    onSelect={() => {\\n                        fileRef.current.value = fileRef.current.files = null;\\n                        fileRef.current.click();\\n                    }}\\n                >\\n                    {text?.select}\\n                </ImagePicker>\\n\\n                <Modal toggle={modalToggle} size=\\\"lg\\\" className=\\\"image-cropper-modal\\\">\\n                    <div className=\\\"modal-body\\\">\\n                        <div className=\\\"cropping-area\\\">\\n                            <img src={imgSrc} draggable={false} ref={imgRef} />\\n                            <img\\n                                className=\\\"crop-box\\\"\\n                                src={imgSrc}\\n                                style={{ clip: `rect(${pos.top}px, ${pos.right}px, ${pos.bottom}px, ${pos.left}px)` }}\\n                                draggable={false}\\n                                onMouseDown={handleMove}\\n                                onTouchStart={handleMove}\\n                            />\\n                            <ResizeHandle position=\\\"top-left\\\" coordinates={pos} handleResize={handleResize} />\\n                            <ResizeHandle position=\\\"top-right\\\" coordinates={pos} handleResize={handleResize} />\\n                            <ResizeHandle position=\\\"bottom-left\\\" coordinates={pos} handleResize={handleResize} />\\n                            <ResizeHandle position=\\\"bottom-right\\\" coordinates={pos} handleResize={handleResize} />\\n                        </div>\\n                    </div>\\n                    <div className=\\\"modal-footer\\\">\\n                        <div>\\n                            <button className=\\\"btn btn-outline-primary cancel\\\" onClick={() => setModalToggle(false)} type=\\\"button\\\">\\n                                {text?.cancel || \\\"Cancel\\\"}\\n                            </button>\\n                            <button className=\\\"btn btn-primary ml-3\\\" onClick={handleCrop} type=\\\"button\\\">\\n                                {text?.crop || \\\"Crop\\\"}\\n                            </button>\\n                        </div>\\n                    </div>\\n                </Modal>\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["ResizeHandle","coordinates","position","handleResize","props","style","top","includes","bottom","left","right","className","classnames","draggable","onMouseDown","onTouchStart","ImagePicker","width","size","height","image","src","ImagePlaceholderIcon","type","onClick","onSelect","children","onReset","xmlns","viewBox","fill","fillRule","d","prevMovement","x","y","getMovement","event","screenX","screenY","touchEvent","touches","mouseEvent","movementX","movementY","addListener","callback","cancelTypes","stop","document","removeEventListener","forEach","t","onkeyup","addEventListener","cancelType","e","key","ImageCropper","React","ref","onChange","value","text","fileRef","imgRef","modalToggle","setModalToggle","imgSrc","setImgSrc","croppedImgSrc","setCroppedImgSrc","pos","setPos","handleInput","Promise","resolve","reject","input","target","files","reader","FileReader","onload","result","toString","readAsDataURL","readImage","then","val","console","error","handleMove","ev","img","oldPos","shouldUpdateY","clientHeight","shouldUpdateX","clientWidth","moveHandler","current","replace","trim","change","resizeHandler","reset","accept","onInput","hidden","click","select","Modal","toggle","clip","cancel","url","imgContainer","inputImage","Image","canvas","createElement","maxDrawnSize","Math","min","scaleX","scaleY","getContext","drawImage","toDataURL","crop","importString","require","setImage","useDynamicForm","items","label","description","controlType","renderForm","controls","Docs","mainFile","example","parseInt","selectText","cropText","cancelText","code","safeDocument","trapFocus","autoFocus","centered","fullscreen","onEscape","onBackdropDismiss","dialogRef","useCombinedRefs","isPristine","setIsPristine","body","classList","add","remove","tabHandler","toLowerCase","lastFocusable","focusableElements","Array","from","querySelectorAll","filter","el","length","shiftKey","activeElement","contains","focus","querySelector","keyupListener","createPortal","show","hide","role","tabIndex","onAnimationEnd","href","refs","targetRef"],"sourceRoot":""}