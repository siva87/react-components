{"version":3,"file":"component---src-pages-docs-notification-tsx-f6caafd3787d6d81c4f8.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/notification.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/Notification/Notification.tsx","webpack://react-components-docs/../lib/src/Notification/Notification.tsx?8618"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Notification, NotificationProps } from \"@sebgroup/react-components/Notification\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Button } from \"@sebgroup/react-components/Button\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Notification/Notification\");\nconst code: string = `<Notification toggle={toggle} onDismiss={() => setToggle(false)}>\n    <div className=\"notification-header\">Header content</div>\n    <div className=\"notification-body\">Body content</div>\n</Notification>`;\n\nconst types: Array<DynamicFormOption<NotificationProps[\"type\"]>> = [\n    { label: \"slide\", value: \"slide\", key: \"slide\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { label: \"bar\", value: \"bar\", key: \"bar\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\nconst themes: Array<DynamicFormOption<NotificationProps[\"theme\"]>> = [\n    { label: \"purple\", value: \"purple\", key: \"purple\" },\n    { label: \"primary\", value: \"primary\", key: \"primary\" },\n    { label: \"danger\", value: \"danger\", key: \"danger\" },\n    { label: \"success\", value: \"success\", key: \"success\" },\n    { label: \"warning\", value: \"warning\", key: \"warning\" },\n    { label: \"inverted\", value: \"inverted\", key: \"inverted\" },\n];\nconst slidePositions: Array<DynamicFormOption<NotificationProps[\"position\"]>> = [\n    { label: \"bottom-left\", value: \"bottom-left\", key: \"bottom-left\" },\n    { label: \"bottom-right\", value: \"bottom-right\", key: \"bottom-right\" },\n    { label: \"top-left\", value: \"top-left\", key: \"top-left\" },\n    { label: \"top-right\", value: \"top-right\", key: \"top-right\" },\n];\nconst barPositions: Array<DynamicFormOption<NotificationProps[\"position\"]>> = [\n    { label: \"top\", value: \"top\", key: \"top\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { label: \"bottom\", value: \"bottom\", key: \"bottom\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst NotificationPage: React.FC = () => {\n    const [toggle, setToggle] = React.useState<boolean>(false);\n\n    const [renderForm, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"theme\", label: \"theme\", controlType: \"Dropdown\", options: themes, value: themes[0].value },\n                { key: \"persist\", label: \"persist\", value: false, controlType: \"Checkbox\", description: \"Disable timer and persist the notification until dismissed\" },\n                { key: \"type\", label: \"type\", controlType: \"Radio\", options: types, value: types[0].value },\n                { key: \"slidePosition\", label: \"position\", controlType: \"Dropdown\", options: slidePositions, value: slidePositions[0].value, rulerKey: \"type\", condition: types[0].value },\n                { key: \"barPosition\", label: \"position\", controlType: \"Radio\", options: barPositions, value: barPositions[0].value, rulerKey: \"type\", condition: types[1].value },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <>\n                    <Button onClick={() => setToggle(!toggle)}>Toggle notification</Button>\n                    <Notification\n                        toggle={toggle}\n                        type={controls.type}\n                        theme={controls.theme}\n                        position={controls.type === \"slide\" ? controls.slidePosition : controls.barPosition}\n                        onDismiss={() => setToggle(false)}\n                        persist={controls.persist}\n                    >\n                        <div className=\"notification-header\">Sunt qui quasi nam.</div>\n                        <div className=\"notification-body\">\n                            Eaque dolorem nisi qui ut nemo perferendis. Veniam voluptates alias voluptatum ratione. Et alias incidunt maiores provident rem ea molestiae ea.\n                        </div>\n                    </Notification>\n                </>\n            }\n            code={code}\n            controls={renderForm()}\n            note={\n                <>\n                    <h3>Notification header and body</h3>\n                    <p>\n                        Defining the notification's header and body is done in a declarative style. Meaning that the developer is responsive for declaring these parts individually if needed. Remember\n                        to pass the following class names:\n                    </p>\n                    <ul>\n                        <li>\n                            <code>notificaiton-header</code> for the <code>div</code> representing the header\n                        </li>\n                        <li>\n                            <code>notificaiton-body</code> for the <code>div</code> representing the body\n                        </li>\n                    </ul>\n                    An example can be found below:\n                    <CodeSnippet language=\"jsx\">\n                        {`<Notification>\n    <div className=\"notification-header\">Header content here</div>\n    <div className=\"notification-body\">Body content here</div>\n</Notification>`}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default NotificationPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport classnames from \"classnames\";\nimport \"./notification.scss\";\n\ntype CommonProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Automatic dismissal timeout in milliseconds (default: `5000`) */\n    dismissTimeout?: number;\n    /** Callback when notification is dismissed */\n    onDismiss?: (e: React.MouseEvent<HTMLButtonElement> | Event) => void;\n    /** Persist notification until dismissed (default: `false`) */\n    persist?: boolean;\n    /** Notification theme */\n    theme?: \"purple\" | \"primary\" | \"danger\" | \"success\" | \"warning\" | \"inverted\";\n    /** Property sets whether the notification is toggled */\n    toggle?: boolean;\n};\n\ninterface SlideNotification extends CommonProps {\n    /** Notification type: `slide` */\n    type?: \"slide\";\n    /** Notification position: `bottom-left` | `bottom-right` | `top-left` | `top-right` */\n    position?: \"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\";\n}\n\ninterface BarNotification extends CommonProps {\n    /** Notification type: `bar` */\n    type?: \"bar\";\n    /** Notification position: `top` | `bottom` */\n    position?: \"top\" | \"bottom\";\n}\n\nexport type NotificationProps = SlideNotification | BarNotification;\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\n/** An alert which pops up on the page to inform the user of an event which occured and optionally provide actions to perform. */\nexport const Notification: React.FC<NotificationProps> = React.forwardRef(\n    ({ toggle, type = \"slide\", theme = \"purple\", position = \"bottom-left\", onDismiss, dismissTimeout = 5000, persist, ...props }: NotificationProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const timerRef: React.MutableRefObject<any> = React.useRef();\n        const [disableAnimation, setDisableAnimation] = React.useState<boolean>(true);\n\n        React.useEffect(() => {\n            if (toggle) {\n                disableAnimation && setDisableAnimation(false);\n                if (!persist) {\n                    timerRef.current = setTimeout(() => {\n                        timerRef.current && onDismiss && onDismiss(new Event(\"dismiss\"));\n                        clearTimeout(timerRef.current);\n                    }, dismissTimeout);\n                }\n            } else {\n                clearTimeout(timerRef.current);\n            }\n        }, [toggle]);\n\n        React.useEffect(() => {\n            persist && clearTimeout(timerRef.current);\n        }, [persist]);\n\n        return !safeDocument\n            ? null\n            : createPortal(\n                  <div\n                      ref={ref}\n                      className={classnames(\n                          \"rc\",\n                          \"notification\",\n                          {\n                              show: toggle,\n                              hide: !toggle && !disableAnimation,\n                              [`theme-${theme}`]: theme,\n                              [`type-${type}`]: type,\n                          },\n                          position,\n                          props.className\n                      )}\n                      {...props}\n                      onAnimationEnd={(e) => {\n                          props.onAnimationEnd && props.onAnimationEnd(e);\n                          !toggle && setDisableAnimation(true);\n                      }}\n                  >\n                      <div className={classnames(`content-wrapper`, { clickable: props.onClick })} {...props}>\n                          {props.children}\n                          <button className=\"close\" onClick={onDismiss}></button>\n                      </div>\n                  </div>,\n                  safeDocument.body\n              );\n    }\n) as React.ForwardRefExoticComponent<React.PropsWithoutRef<SlideNotification & BarNotification> & React.RefAttributes<HTMLDivElement>>;\n","export default \"import React from \\\"react\\\";\\nimport { createPortal } from \\\"react-dom\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./notification.scss\\\";\\n\\ntype CommonProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Automatic dismissal timeout in milliseconds (default: `5000`) */\\n    dismissTimeout?: number;\\n    /** Callback when notification is dismissed */\\n    onDismiss?: (e: React.MouseEvent<HTMLButtonElement> | Event) => void;\\n    /** Persist notification until dismissed (default: `false`) */\\n    persist?: boolean;\\n    /** Notification theme */\\n    theme?: \\\"purple\\\" | \\\"primary\\\" | \\\"danger\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"inverted\\\";\\n    /** Property sets whether the notification is toggled */\\n    toggle?: boolean;\\n};\\n\\ninterface SlideNotification extends CommonProps {\\n    /** Notification type: `slide` */\\n    type?: \\\"slide\\\";\\n    /** Notification position: `bottom-left` | `bottom-right` | `top-left` | `top-right` */\\n    position?: \\\"bottom-left\\\" | \\\"bottom-right\\\" | \\\"top-left\\\" | \\\"top-right\\\";\\n}\\n\\ninterface BarNotification extends CommonProps {\\n    /** Notification type: `bar` */\\n    type?: \\\"bar\\\";\\n    /** Notification position: `top` | `bottom` */\\n    position?: \\\"top\\\" | \\\"bottom\\\";\\n}\\n\\nexport type NotificationProps = SlideNotification | BarNotification;\\n\\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\\nconst safeDocument: Document | null = typeof document !== \\\"undefined\\\" ? document : null;\\n\\n/** An alert which pops up on the page to inform the user of an event which occured and optionally provide actions to perform. */\\nexport const Notification: React.FC<NotificationProps> = React.forwardRef(\\n    ({ toggle, type = \\\"slide\\\", theme = \\\"purple\\\", position = \\\"bottom-left\\\", onDismiss, dismissTimeout = 5000, persist, ...props }: NotificationProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const timerRef: React.MutableRefObject<any> = React.useRef();\\n        const [disableAnimation, setDisableAnimation] = React.useState<boolean>(true);\\n\\n        React.useEffect(() => {\\n            if (toggle) {\\n                disableAnimation && setDisableAnimation(false);\\n                if (!persist) {\\n                    timerRef.current = setTimeout(() => {\\n                        timerRef.current && onDismiss && onDismiss(new Event(\\\"dismiss\\\"));\\n                        clearTimeout(timerRef.current);\\n                    }, dismissTimeout);\\n                }\\n            } else {\\n                clearTimeout(timerRef.current);\\n            }\\n        }, [toggle]);\\n\\n        React.useEffect(() => {\\n            persist && clearTimeout(timerRef.current);\\n        }, [persist]);\\n\\n        return !safeDocument\\n            ? null\\n            : createPortal(\\n                  <div\\n                      ref={ref}\\n                      className={classnames(\\n                          \\\"rc\\\",\\n                          \\\"notification\\\",\\n                          {\\n                              show: toggle,\\n                              hide: !toggle && !disableAnimation,\\n                              [`theme-${theme}`]: theme,\\n                              [`type-${type}`]: type,\\n                          },\\n                          position,\\n                          props.className\\n                      )}\\n                      {...props}\\n                      onAnimationEnd={(e) => {\\n                          props.onAnimationEnd && props.onAnimationEnd(e);\\n                          !toggle && setDisableAnimation(true);\\n                      }}\\n                  >\\n                      <div className={classnames(`content-wrapper`, { clickable: props.onClick })} {...props}>\\n                          {props.children}\\n                          <button className=\\\"close\\\" onClick={onDismiss}></button>\\n                      </div>\\n                  </div>,\\n                  safeDocument.body\\n              );\\n    }\\n) as React.ForwardRefExoticComponent<React.PropsWithoutRef<SlideNotification & BarNotification> & React.RefAttributes<HTMLDivElement>>;\\n\";"],"names":["importString","require","types","label","value","key","additionalProps","wrapperProps","className","themes","slidePositions","barPositions","React","toggle","setToggle","useDynamicForm","items","controlType","options","description","rulerKey","condition","renderForm","controls","mainFile","example","onClick","type","theme","position","slidePosition","barPosition","onDismiss","persist","code","note","language","Button","ref","size","block","props","classnames","children","safeDocument","document","Notification","dismissTimeout","timerRef","disableAnimation","setDisableAnimation","current","setTimeout","Event","clearTimeout","createPortal","show","hide","onAnimationEnd","e","clickable","body"],"sourceRoot":""}