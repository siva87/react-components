{"version":3,"file":"component---src-pages-docs-feedbackindicator-tsx-34b6f2a85ba939b4ae22.js","mappings":"kNAOMA,EAAuBC,EAAQ,OAG/BC,EAAoD,CACtD,CAAEC,MAAO,SAAUC,MAAO,SAAUC,IAAK,UACzC,CAAEF,MAAO,UAAWC,MAAO,UAAWC,IAAK,WAC3C,CAAEF,MAAO,UAAWC,MAAO,UAAWC,IAAK,YAiC/C,UA9BwC,WACpC,OAAmCC,EAAAA,EAAAA,GAAe,CAC9C,CACID,IAAK,WACLE,MAAO,CACH,CAAEF,IAAK,UAAWD,MAAO,oBAAqBD,MAAO,UAAWK,YAAa,UAAWC,YAAa,QACrG,CAAEJ,IAAK,WAAYD,OAAO,EAAOD,MAAO,WAAYM,YAAa,YACjE,CAAEJ,IAAK,OAAQD,MAAOF,EAAS,GAAGE,MAAOD,MAAO,OAAQO,QAASR,EAAUO,YAAa,aAN7FE,EAAP,KAAqBC,EAArB,KAAqBA,SAWrB,OACI,gBAAC,IAAD,CACIC,SAAUb,EACVc,QACI,uBAAKC,UAAU,SACX,gBAAC,IAAD,CAAmBC,KAAMJ,EAASI,KAAMC,QAASL,MAAAA,OAAF,EAAEA,EAAUK,QAASC,SAAUN,EAASM,UACnF,gBAAC,IAAD,mBACA,gBAAC,IAAD,uBACA,uBAAKH,UAAU,aAAf,qBAIZI,KAhCM,8DAiCNP,SAAUD,Q,6BCzCtB","sources":["webpack://react-components-docs/./src/pages/docs/feedbackindicator.tsx","webpack://react-components-docs/../lib/src/FeedbackIndicator/FeedbackIndicator.tsx?50f2"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { FeedbackIndicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Checkbox } from \"@sebgroup/react-components/Checkbox\";\nimport { RadioButton } from \"@sebgroup/react-components/RadioButton\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/FeedbackIndicator/FeedbackIndicator\");\nconst code: string = `<FeedbackIndicator toggle={toggle}>text</FeedbackIndicator>`;\n\nconst typeList: Array<DynamicFormOption<IndicatorType>> = [\n    { label: \"danger\", value: \"danger\", key: \"danger\" },\n    { label: \"success\", value: \"success\", key: \"success\" },\n    { label: \"warning\", value: \"warning\", key: \"warning\" },\n];\n\nconst FeedbackIndicatorPage: React.FC = () => {\n    const [renderForm, { controls }] = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"message\", value: \"Indicator message\", label: \"Message\", placeholder: \"Message\", controlType: \"Text\" },\n                { key: \"noBorder\", value: false, label: \"noBorder\", controlType: \"Checkbox\" },\n                { key: \"type\", value: typeList[0].value, label: \"Type\", options: typeList, controlType: \"Radio\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <FeedbackIndicator type={controls.type} message={controls?.message} noBorder={controls.noBorder}>\n                        <Checkbox>A Checkbox</Checkbox>\n                        <RadioButton>A Radio button</RadioButton>\n                        <div className=\"px-3 pb-2\">Some content ðŸ¦¾</div>\n                    </FeedbackIndicator>\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n};\n\nexport default FeedbackIndicatorPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./feedback-indicator.scss\\\";\\n\\nexport type IndicatorType = \\\"danger\\\" | \\\"warning\\\" | \\\"success\\\" | \\\"none\\\";\\nexport type Indicator = FeedbackIndicatorProps;\\n\\ntype FeedbackIndicatorProps = React.PropsWithChildren<{\\n    /** The type of the indicator. Available values: \\\"danger\\\" | \\\"warning\\\" | \\\"success\\\" */\\n    type: IndicatorType;\\n    /** The indicator message. `children` can also be used instead. */\\n    message?: React.ReactNode;\\n    /** Disable feedback indicator border */\\n    noBorder?: boolean;\\n}>;\\n/** A helper component to display feedback for children content */\\nexport const FeedbackIndicator: React.FC<FeedbackIndicatorProps> = (props: FeedbackIndicatorProps) => {\\n    const [indicatorValue, setIndicatorValue] = React.useState<number>(0);\\n\\n    React.useEffect(() => {\\n        switch (props.type) {\\n            case \\\"danger\\\":\\n                setIndicatorValue(10);\\n                break;\\n            case \\\"warning\\\":\\n                setIndicatorValue(50);\\n                break;\\n            case \\\"success\\\":\\n                setIndicatorValue(100);\\n                break;\\n            default:\\n                setIndicatorValue(0);\\n        }\\n    }, [props.type]);\\n\\n    function wrap(children: any) {\\n        const Child: any = React.Children.toArray(children)[0];\\n\\n        return React.isValidElement(Child) ? (\\n            <>\\n                {React.cloneElement<any>(Child as any, {\\n                    className: classnames((Child.props as any).className, `rc-d feedback feedback-${indicatorValue}`, { \\\"no-border\\\": props.noBorder }, { \\\"mb-0\\\": props.message }),\\n                })}\\n                {props.type && <p className={classnames(\\\"rc-d feedback-message\\\")}>{props.message}</p>}\\n            </>\\n        ) : (\\n            Child\\n        );\\n    }\\n\\n    const count: number = React.Children.count(props.children);\\n\\n    return count ? (props.type ? wrap(count > 1 ? <div>{props.children}</div> : props.children) : props.children) : null;\\n};\\n\";"],"names":["importString","require","typeList","label","value","key","useDynamicForm","items","placeholder","controlType","options","renderForm","controls","mainFile","example","className","type","message","noBorder","code"],"sourceRoot":""}