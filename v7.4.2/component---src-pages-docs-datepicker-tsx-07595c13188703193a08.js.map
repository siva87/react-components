{"version":3,"file":"component---src-pages-docs-datepicker-tsx-07595c13188703193a08.js","mappings":"oMAKMA,EAAuBC,EAAQ,OAwDrC,UArDiC,WAC7B,MAAsCC,EAAAA,SAAqB,IAAIC,MAAxDC,EAAP,KAAoBC,EAApB,KAEA,GAIIC,EAAAA,EAAAA,GAAe,CACf,CACIC,IAAK,WACLC,MAAO,CACH,CAAED,IAAK,cAAeE,MAAO,eAAgBC,YAAa,8BAA+BC,YAAa,YACtG,CAAEJ,IAAK,cAAeE,MAAO,qBAAsBC,YAAa,wFAAyFC,YAAa,YACtK,CACIJ,IAAK,aACLE,MAAO,eACPC,YAAa,kEACbC,YAAa,OACbC,gBAAiB,MACjBC,gBAAiB,CAAEC,UAAW,yBAf9BC,EADhB,EACIC,WACSC,EAFb,EAEIC,MAASD,SACTE,EAHJ,EAGIA,UAuBJ,OAJAC,EAAAA,EAAAA,YAAU,WACND,EAAU,WAAY,cAAeF,EAASI,YADzC,GAEN,CAACJ,EAASI,cAGTnB,EAAAA,cAACoB,EAAAA,EAAD,CACIC,SAAUvB,EACVwB,QACItB,EAAAA,cAAAA,MAAAA,CAAKY,UAAU,SACXZ,EAAAA,cAAAA,QAAAA,CAAOuB,GAAG,cAAV,kBACAvB,EAAAA,cAACwB,EAAAA,EAAD,CACIC,MAAOvB,EACPwB,SAAUvB,EACVwB,cAAeZ,EAASY,YACxBR,cAAeJ,EAASI,YACxBS,WAAYb,EAASa,WACrBC,aAAc,CACV,kBAAmB,iBAKnCC,KAjDS,2DAkDTf,SAAUF,KAhDtB,C,+BCRA,4otB","sources":["webpack://react-components-docs/./src/pages/docs/datepicker.tsx","webpack://react-components-docs/../lib/src/Datepicker/Datepicker.tsx?ad1a"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Datepicker } from \"@sebgroup/react-components/Datepicker\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Datepicker/Datepicker\");\nconst code: string = `<Datepicker value={dateValue} onChange={setDateValue} />`;\n\nconst DatepickerPage: React.FC = () => {\n    const [exampleDate, setExampleDate] = React.useState<Date>(new Date());\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"monthPicker\", label: \"Month picker\", description: \"Switch to month picker only\", controlType: \"Checkbox\" },\n                { key: \"forceCustom\", label: \"Custom date picker\", description: \"This picker is the automatic fallback on browsers that don't support html5 datepicker\", controlType: \"Checkbox\" },\n                {\n                    key: \"localeCode\",\n                    label: \"Locale code:\",\n                    description: \"Set a locale for the custom picker (defaults to system locale).\",\n                    controlType: \"Text\",\n                    wrappingElement: \"div\",\n                    additionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"localeCode\", !controls.forceCustom);\n    }, [controls.forceCustom]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <label id=\"chooseDate\">Choose a date:</label>\n                    <Datepicker\n                        value={exampleDate}\n                        onChange={setExampleDate}\n                        monthPicker={!!controls.monthPicker}\n                        forceCustom={!!controls.forceCustom}\n                        localeCode={controls.localeCode as string}\n                        wrapperProps={{\n                            \"aria-labelledby\": \"chooseDate\",\n                        }}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default DatepickerPage;\n","export default \"import { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport \\\"./datepicker.scss\\\";\\nimport { padNumber } from \\\"./formatters\\\";\\n\\ninterface OverriddenNativeProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\\n    value: any;\\n    min?: any;\\n    max?: any;\\n    onChange: any;\\n}\\n\\nexport interface DatepickerProps extends OverriddenNativeProps {\\n    /** the value of the datepicker as a Date object */\\n    value: Date;\\n    /** On Change handler with the latest Date value */\\n    onChange: (value: Date) => void;\\n    /** Property sets whether a datepicker is a month picker  */\\n    monthPicker?: boolean;\\n    /** Property sets whether SEB styled datepicker will be rendered despite the browser used */\\n    forceCustom?: boolean;\\n    /** Minimum range of date that can be selected */\\n    min?: Date;\\n    /** Maximum range of date that can be selected */\\n    max?: Date;\\n    /** Locale of datepicker */\\n    localeCode?: string;\\n    /** Div wrapper props. NOTE: customPicker ONLY! */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** Props for the select element of month picker. NOTE: customPicker ONLY! */\\n    customPickerSelectProps?: JSX.IntrinsicElements[\\\"select\\\"];\\n}\\n\\ninterface UnitNames {\\n    month: string;\\n    day: string;\\n    year: string;\\n}\\n\\ntype InputRenderType = \\\"custom\\\" | \\\"date\\\" | \\\"month\\\";\\n\\nconst CURRENT_YEAR: number = new Date().getFullYear();\\nconst MAX_DAY: number = 31;\\nconst MIN_DAY: number = 1;\\nconst MAX_YEAR: number = CURRENT_YEAR + 200;\\nconst MIN_YEAR: number = CURRENT_YEAR - 200;\\nconst PAGE_STEP: number = 5;\\nconst UNIT_NAMES: UnitNames = {\\n    month: \\\"Month\\\",\\n    day: \\\"Day\\\",\\n    year: \\\"Year\\\",\\n};\\n\\nexport const Datepicker: React.FunctionComponent<DatepickerProps> = React.forwardRef(\\n    (\\n        { monthPicker, forceCustom, className, value, min, max, disabled, onChange, localeCode = \\\"en\\\", wrapperProps, customPickerSelectProps, ...props }: DatepickerProps,\\n        ref: React.ForwardedRef<HTMLInputElement>\\n    ): React.ReactElement<void> => {\\n        const maxYearRange: number = React.useMemo(() => max?.getFullYear() || MAX_YEAR, []);\\n        const minYearRange: number = React.useMemo(() => min?.getFullYear() || MIN_YEAR, []);\\n        const [renderType, setRenderType] = React.useState<InputRenderType>(\\\"date\\\");\\n\\n        const isValidDate = React.useCallback((d: Date): boolean => {\\n            return !!(d && d instanceof Date && !isNaN(d.getTime()));\\n        }, []);\\n\\n        const getStringFromDate = React.useCallback(\\n            (d: Date, monthPicker: boolean): string => {\\n                if (isValidDate(d)) {\\n                    const year: string = `0000${d.getFullYear()}`.substr(-4, 4);\\n                    const month: string = `00${d.getMonth() + 1}`.substr(-2, 2);\\n                    const day: string = `00${d.getDate()}`.substr(-2, 2);\\n\\n                    return `${year}-${month}-${day}`.substr(0, monthPicker ? 7 : 10) || \\\"\\\";\\n                } else {\\n                    return \\\"\\\";\\n                }\\n            },\\n            [isValidDate]\\n        );\\n\\n        const getInputRawValue = React.useCallback(\\n            (value: Date, monthPicker: boolean): string => {\\n                return getStringFromDate(value, monthPicker);\\n            },\\n            [getStringFromDate]\\n        );\\n\\n        const isDateInRange = React.useCallback((d: Date, min: Date, max: Date): boolean => {\\n            if (!min && !max) {\\n                return true;\\n            } else if (min && d >= min) {\\n                if (!max || (max && d <= max)) {\\n                    return true;\\n                } else {\\n                    return false;\\n                }\\n            } else if (max && d <= max) {\\n                return !min || (min && d >= min);\\n            } else {\\n                return false;\\n            }\\n        }, []);\\n\\n        const onCustomDatepickerChange = React.useCallback(\\n            (day: number, month: number, year: number) => {\\n                day = monthPicker ? 1 : day;\\n                const dateString: string = `${padNumber(year, true)}-${padNumber(month)}-${padNumber(day)}`;\\n                const date: Date = new Date(dateString);\\n                // as long as all custom input fields are not null and is valid date, fire onChange\\n                if (!!day && !!month && !!year && isValidDate(date) && isDateInRange(date, min, max)) {\\n                    onChange(date);\\n                } else {\\n                    onChange(null);\\n                }\\n            },\\n            [isDateInRange, onChange, min, max, monthPicker]\\n        );\\n\\n        const initCustomDay = React.useCallback(\\n            (value: Date, monthPicker: boolean): number => {\\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\\n                if (!!inputRawValue) {\\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(8, 2));\\n                    return value;\\n                }\\n            },\\n            [getInputRawValue]\\n        );\\n\\n        const [customDay, setCustomDay] = React.useState<number>(initCustomDay(value, monthPicker));\\n\\n        const initCustomMonth = React.useCallback(\\n            (value: Date, monthPicker: boolean): number => {\\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\\n                if (!!inputRawValue) {\\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(5, 2));\\n                    return value;\\n                }\\n            },\\n            [getInputRawValue]\\n        );\\n\\n        const [customMonth, setCustomMonth] = React.useState<number>(initCustomMonth(value, monthPicker));\\n\\n        const initCustomYear = React.useCallback(\\n            (value: Date, monthPicker: boolean): number => {\\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\\n                if (!!inputRawValue) {\\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(0, 4));\\n                    return value;\\n                }\\n            },\\n            [getInputRawValue]\\n        );\\n\\n        const [customYear, setCustomYear] = React.useState<number>(initCustomYear(value, monthPicker));\\n\\n        const changeCustomDay = React.useCallback(\\n            (day: number) => {\\n                setCustomDay(() => {\\n                    onCustomDatepickerChange(day, customMonth, customYear);\\n                    return day;\\n                });\\n            },\\n            [customMonth, customYear, onCustomDatepickerChange]\\n        );\\n\\n        const changeCustomMonth = React.useCallback(\\n            (month: number) => {\\n                setCustomMonth(() => {\\n                    onCustomDatepickerChange(customDay, month, customYear);\\n                    return month;\\n                });\\n            },\\n            [customDay, customYear, onCustomDatepickerChange]\\n        );\\n\\n        const changeCustomYear = React.useCallback(\\n            (year: number) => {\\n                setCustomYear(() => {\\n                    onCustomDatepickerChange(customDay, customMonth, year);\\n                    return year;\\n                });\\n            },\\n            [customDay, customMonth, onCustomDatepickerChange]\\n        );\\n\\n        const getEventValue = React.useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\\n            const value: number = Number(e.target?.value);\\n            return Number.isNaN(value) ? null : value;\\n        }, []);\\n\\n        const handleChangeCustomDay = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\\n                if (!monthPicker) {\\n                    const day: number = getEventValue(e);\\n                    changeCustomDay(day);\\n                }\\n            },\\n            [changeCustomDay]\\n        );\\n\\n        const handleChangeCustomMonth = React.useCallback(\\n            (e: React.ChangeEvent<HTMLSelectElement>): void => {\\n                const month: number = getEventValue(e);\\n                changeCustomMonth(month);\\n            },\\n            [changeCustomMonth]\\n        );\\n\\n        const handleChangeCustomYear = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\\n                const year: number = getEventValue(e);\\n                changeCustomYear(year);\\n            },\\n            [changeCustomMonth]\\n        );\\n\\n        const handleKeyDownCustomDay = React.useCallback(\\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\\n                if (!hasModifierKey(e)) {\\n                    let newCustomDay: number = null;\\n\\n                    switch (e.key) {\\n                        case \\\"ArrowDown\\\":\\n                            newCustomDay = customDay - 1;\\n                            break;\\n                        case \\\"ArrowUp\\\":\\n                            newCustomDay = customDay + 1;\\n                            break;\\n                        case \\\"PageDown\\\":\\n                            newCustomDay = customDay - PAGE_STEP;\\n                            break;\\n                        case \\\"PageUp\\\":\\n                            newCustomDay = customDay + PAGE_STEP;\\n                            break;\\n                        case \\\"Home\\\":\\n                            newCustomDay = MIN_DAY;\\n                            break;\\n                        case \\\"End\\\":\\n                            newCustomDay = MAX_DAY;\\n                            break;\\n                    }\\n\\n                    if (newCustomDay !== null) {\\n                        e.preventDefault();\\n                        /**\\n                         * Sanitize the custom day value. If the value is larger than the maximum day of 31,\\n                         * it will be reduced down to the remainder of <custom day % 31> (32 % 31 = 1); if\\n                         * the value is lesser than the minimum day of 1, it will be increment up to the\\n                         * product of <custom day + 31> (-1 + 31 = 30). This handling ensures that the custom\\n                         * day value will always be in the range of the maximum and minimum day allowed.\\n                         */\\n                        const sanitizedDay: number = newCustomDay > MAX_DAY ? newCustomDay % MAX_DAY : newCustomDay < MIN_DAY ? newCustomDay + MAX_DAY : newCustomDay;\\n                        changeCustomDay(sanitizedDay);\\n                    }\\n                }\\n            },\\n            [customDay, changeCustomDay]\\n        );\\n\\n        const handleKeyDownCustomYear = React.useCallback(\\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\\n                if (!hasModifierKey(e)) {\\n                    let newCustomYear: number = null;\\n\\n                    switch (e.key) {\\n                        case \\\"ArrowDown\\\":\\n                            newCustomYear = customYear - 1;\\n                            break;\\n                        case \\\"ArrowUp\\\":\\n                            newCustomYear = customYear + 1;\\n                            break;\\n                        case \\\"PageDown\\\":\\n                            newCustomYear = customYear - PAGE_STEP;\\n                            break;\\n                        case \\\"PageUp\\\":\\n                            newCustomYear = customYear + PAGE_STEP;\\n                            break;\\n                        case \\\"Home\\\":\\n                            newCustomYear = minYearRange;\\n                            break;\\n                        case \\\"End\\\":\\n                            newCustomYear = maxYearRange;\\n                            break;\\n                    }\\n\\n                    if (newCustomYear !== null) {\\n                        e.preventDefault();\\n                        /**\\n                         * Sanitize the custom year value so that they are within the max and min year range.\\n                         */\\n                        const sanitizedYear: number = newCustomYear > maxYearRange ? maxYearRange : newCustomYear < minYearRange ? minYearRange : newCustomYear;\\n                        changeCustomYear(sanitizedYear);\\n                    }\\n                }\\n            },\\n            [customYear, maxYearRange, minYearRange, changeCustomYear]\\n        );\\n\\n        const getRelativeTimeFormat = React.useCallback((code: string): any => {\\n            if ((Intl as any)[\\\"RelativeTimeFormat\\\"]) {\\n                try {\\n                    const rtf: any = new (Intl as any).RelativeTimeFormat(code);\\n                    if (rtf) {\\n                        return rtf;\\n                    }\\n                } catch (error) {\\n                    return null;\\n                }\\n            }\\n            return null;\\n        }, []);\\n\\n        const getLocaleOrDefault = React.useCallback((localeCode: string): Intl.DateTimeFormat => {\\n            let locale: Intl.DateTimeFormat;\\n            try {\\n                locale = new Intl.DateTimeFormat(localeCode, { month: \\\"long\\\" });\\n            } catch (error) {\\n                console.warn(`Locale with code: ${localeCode} was not recognised. Using locale 'en' instead.`);\\n                locale = new Intl.DateTimeFormat(\\\"en\\\", { month: \\\"long\\\" });\\n            }\\n            return locale;\\n        }, []);\\n\\n        const monthNames: string[] = React.useMemo(() => {\\n            const date: Date = new Date(2012, 0, 5);\\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\\n\\n            const names: string[] = [UNIT_NAMES.month];\\n            [...Array(12)].map((_, i) => {\\n                date.setMonth(i);\\n                names.push(locale.format(date));\\n            });\\n            return names;\\n        }, [localeCode, getLocaleOrDefault]);\\n\\n        const customPickerOrder = React.useMemo(() => {\\n            const date: Date = new Date(2012, 0, 5);\\n            const rtf: any = getRelativeTimeFormat(localeCode);\\n            let order: string[] = [\\\"day\\\", \\\"month\\\", \\\"year\\\"];\\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\\n\\n            const localeDateString: string = locale.format(date);\\n            order.sort((a, b) => {\\n                const positions: { day: number; month: number; year: number } = {\\n                    day: localeDateString?.search(/5/g) || 0,\\n                    month: localeDateString?.search(/1/g) || 1,\\n                    year: localeDateString?.search(/2012/g) || 2,\\n                };\\n                return positions[a] - positions[b];\\n            });\\n\\n            order?.map((unit) => {\\n                UNIT_NAMES[unit] =\\n                    rtf\\n                        ?.formatToParts(1, unit)\\n                        ?.filter((x) => x.type === \\\"literal\\\")[1]\\n                        ?.value?.trim() || unit;\\n            });\\n\\n            return order;\\n        }, [localeCode, getRelativeTimeFormat, getLocaleOrDefault]);\\n\\n        const supportsInputOfType = (type: \\\"date\\\" | \\\"month\\\"): boolean => {\\n            if (typeof document !== \\\"undefined\\\") {\\n                const input: HTMLInputElement = document.createElement(\\\"input\\\");\\n                input.setAttribute(\\\"type\\\", type);\\n\\n                const notADateValue: string = \\\"not-a-date\\\";\\n                input.setAttribute(\\\"value\\\", notADateValue);\\n\\n                return input.value !== notADateValue;\\n            }\\n\\n            return false;\\n        };\\n\\n        const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\\n            const { value: changeEventValue } = e.target;\\n            const value: Date = new Date(changeEventValue);\\n            if (isDateInRange(value, min, max)) {\\n                onChange(value);\\n                return;\\n            }\\n            onChange(null);\\n        };\\n\\n        const renderCustomDatepicker = (value: Date, monthPicker: boolean, customPickerOrder: string[], unitNames: UnitNames, disabled: boolean, monthNames: string[]) => {\\n            const order: string[] = monthPicker ? [...customPickerOrder.filter((x: string) => x !== \\\"day\\\")] : customPickerOrder;\\n            const dateValueLabel: string = randomId(\\\"seb-datepicker-custom-value-\\\");\\n            return (\\n                <div\\n                    {...wrapperProps}\\n                    ref={ref}\\n                    className={classnames(\\\"input-group\\\", \\\"seb-datepicker-custom\\\", wrapperProps?.className)}\\n                    role=\\\"group\\\"\\n                    aria-labelledby={`${wrapperProps?.[\\\"aria-labelledby\\\"] ? `${wrapperProps?.[\\\"aria-labelledby\\\"]} ` : \\\"\\\"}${dateValueLabel}`}\\n                >\\n                    <div id={dateValueLabel} className=\\\"sr-only\\\">\\n                        {monthPicker ? \\\"\\\" : `${customDay} `}\\n                        {monthNames[customMonth]}, {customYear}\\n                    </div>\\n                    {order?.map((unit: string, unitIndex: number) => {\\n                        switch (unit) {\\n                            case \\\"day\\\":\\n                                return (\\n                                    <input\\n                                        {...props}\\n                                        key={unitIndex}\\n                                        className={classnames(\\\"form-control\\\", \\\"seb-datepicker-custom-day\\\", className)}\\n                                        type=\\\"number\\\"\\n                                        min={MIN_DAY}\\n                                        max={MAX_DAY}\\n                                        placeholder={unitNames.day}\\n                                        disabled={disabled}\\n                                        value={isDateInRange(value, min, max) ? customDay || \\\"\\\" : \\\"\\\"}\\n                                        onChange={handleChangeCustomDay}\\n                                        onKeyDown={handleKeyDownCustomDay}\\n                                    />\\n                                );\\n\\n                            case \\\"month\\\":\\n                                return (\\n                                    <select\\n                                        {...customPickerSelectProps}\\n                                        key={unitIndex}\\n                                        className={classnames(\\n                                            \\\"custom-select\\\",\\n                                            \\\"seb-datepicker-custom-month\\\",\\n                                            { \\\"rounded-left\\\": unitIndex === 0 },\\n                                            { \\\"rounded-right\\\": unitIndex === customPickerOrder.length - 1 },\\n                                            customPickerSelectProps?.className\\n                                        )}\\n                                        value={isDateInRange(value, min, max) ? customMonth || \\\"\\\" : \\\"\\\"}\\n                                        disabled={disabled}\\n                                        onChange={handleChangeCustomMonth}\\n                                    >\\n                                        {monthNames.map((month: string, i: number) => {\\n                                            return (\\n                                                <option key={i} disabled={disabled || i === 0} value={i}>\\n                                                    {month}\\n                                                </option>\\n                                            );\\n                                        })}\\n                                    </select>\\n                                );\\n\\n                            case \\\"year\\\":\\n                                return (\\n                                    <input\\n                                        {...props}\\n                                        key={unitIndex}\\n                                        className={classnames(\\\"form-control\\\", \\\"seb-datepicker-custom-year\\\", className)}\\n                                        type=\\\"number\\\"\\n                                        min=\\\"1\\\"\\n                                        placeholder={unitNames.year}\\n                                        disabled={disabled}\\n                                        value={isDateInRange(value, min, max) ? customYear || \\\"\\\" : \\\"\\\"}\\n                                        onChange={handleChangeCustomYear}\\n                                        onKeyDown={handleKeyDownCustomYear}\\n                                    />\\n                                );\\n                            default:\\n                                break;\\n                        }\\n                    })}\\n                </div>\\n            );\\n        };\\n\\n        React.useEffect(() => {\\n            setRenderType(() => {\\n                if (forceCustom) {\\n                    return \\\"custom\\\";\\n                }\\n                if (monthPicker && supportsInputOfType(\\\"month\\\")) {\\n                    return \\\"month\\\";\\n                }\\n                if (supportsInputOfType(\\\"date\\\")) {\\n                    return \\\"date\\\";\\n                }\\n                return \\\"custom\\\";\\n            });\\n        }, [forceCustom, monthPicker]);\\n\\n        if (renderType === \\\"month\\\") {\\n            return (\\n                <input\\n                    {...props}\\n                    ref={ref}\\n                    type=\\\"month\\\"\\n                    className={classnames(\\\"form-control\\\", \\\"seb-datepicker-native\\\", className)}\\n                    min={getStringFromDate(min, monthPicker)}\\n                    max={getStringFromDate(max, monthPicker)}\\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \\\"\\\"}\\n                    disabled={disabled}\\n                    onChange={handleOnChange}\\n                />\\n            );\\n        } else if (renderType === \\\"date\\\") {\\n            return (\\n                <input\\n                    {...props}\\n                    ref={ref}\\n                    type=\\\"date\\\"\\n                    className={classnames(\\\"form-control\\\", \\\"seb-datepicker-native\\\", className)}\\n                    min={getStringFromDate(min, monthPicker)}\\n                    max={getStringFromDate(max, monthPicker)}\\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \\\"\\\"}\\n                    disabled={disabled}\\n                    onChange={handleOnChange}\\n                />\\n            );\\n        } else {\\n            return <>{renderCustomDatepicker(value, monthPicker, customPickerOrder, UNIT_NAMES, disabled, monthNames)}</>;\\n        }\\n    }\\n);\\n\\n/**\\n * Detect if a modifier key is pressed along with the current key event.\\n *\\n * @param {object} event - Keyboard event\\n * @returns true if key pressed is combined with modifier key, false otherwise\\n */\\nfunction hasModifierKey({ altKey, ctrlKey, metaKey, shiftKey }: React.KeyboardEvent) {\\n    return altKey || ctrlKey || metaKey || shiftKey;\\n}\\n\";"],"names":["importString","require","React","Date","exampleDate","setExampleDate","useDynamicForm","key","items","label","description","controlType","wrappingElement","additionalProps","className","renderControls","renderForm","controls","state","setHidden","useEffect","forceCustom","Docs","mainFile","example","id","Datepicker","value","onChange","monthPicker","localeCode","wrapperProps","code"],"sourceRoot":""}