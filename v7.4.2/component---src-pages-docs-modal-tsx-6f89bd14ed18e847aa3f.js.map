{"version":3,"file":"component---src-pages-docs-modal-tsx-6f89bd14ed18e847aa3f.js","mappings":"2NAQMA,EAAuBC,EAAQ,OAO/BC,EAA8C,CAChD,CAAEC,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACrF,CAAEL,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACrF,CAAEL,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAEnFC,EAAqD,CACvD,CAAEL,MAAO,UAAWC,MAAO,UAAWF,IAAK,UAAWG,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEJ,MAAO,OAAQC,MAAO,OAAQF,IAAK,OAAQG,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAC3F,CAAEJ,MAAO,QAASC,MAAO,QAASF,IAAK,SAAUG,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBA2InG,UAxImC,WAC/B,MAA4BE,EAAAA,UAAwB,GAA7CC,EAAP,KAAeC,EAAf,KACMC,EAA6DH,EAAAA,SAEnE,GAGII,EAAAA,EAAAA,GAAe,CACf,CACIX,IAAK,WACLY,MAAO,CACH,CAAEZ,IAAK,OAAQC,MAAO,OAAQY,YAAa,QAASC,QAASf,EAAQgB,aAAchB,EAAO,GAAGG,OAC7F,CAAEF,IAAK,WAAYC,MAAO,WAAYY,YAAa,QAASC,QAASR,EAAWS,aAAcT,EAAU,GAAGJ,OAC3G,CAAEF,IAAK,WAAYC,MAAO,WAAYY,YAAa,WAAYE,cAAc,GAC7E,CAAEf,IAAK,aAAcC,MAAO,aAAcY,YAAa,WAAYE,cAAc,GACjF,CAAEf,IAAK,YAAaC,MAAO,YAAae,YAAa,sDAAuDH,YAAa,WAAYE,cAAc,GACnJ,CACIf,IAAK,YACLC,MAAO,YACPe,YAAa,yFACbH,YAAa,WACbE,cAAc,GAElB,CAAEf,IAAK,WAAYC,MAAO,WAAYY,YAAa,WAAYE,cAAc,GAC7E,CAAEf,IAAK,oBAAqBC,MAAO,oBAAqBY,YAAa,WAAYE,cAAc,OAnBvGE,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SAuBPE,EAAUb,EAAAA,aAAkB,WAAM,MACpCE,GAAU,GACV,UAAAC,EAAgBW,eAAhB,SAAyBC,OAFb,GAGb,IAEH,EAAuEJ,EAA/DK,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,WAAYC,EAApC,EAAoCA,SAAUC,EAA9C,EAA8CA,UAAWC,EAAzD,EAAyDA,UAEzD,OACIrB,EAAAA,cAACsB,EAAAA,EAAD,CACIC,SAAUjC,EACVkC,QACIxB,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAACyB,EAAAA,EAAD,CAAQC,IAAKvB,EAAiBwB,QAAS,kBAAMzB,GAAWD,EAAjB,GAAvC,gBAGAD,EAAAA,cAAC4B,EAAAA,EAAD,CACI3B,OAAQA,EACFe,SAAAA,EAAUC,KAAAA,EAAMC,WAAAA,EAAYC,SAAAA,EAAUC,UAAAA,EAAWC,UAAAA,EACvDQ,SAAUlB,EAASkB,SAAWhB,EAAU,KACxCiB,kBAAmBnB,EAASmB,kBAAoBjB,EAAU,KAC1D,kBAAgB,cAChB,mBAAiB,oBAEjBb,EAAAA,cAAAA,MAAAA,CAAK+B,GAAG,mBAAmBjC,UAAU,sBAChCa,EAASS,WAAaT,EAASU,UAC5BrB,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,WAAAA,KACIA,EAAAA,cAAAA,SAAAA,KAAAA,uCACAA,EAAAA,cAACgC,EAAAA,EAAD,CAAStC,MAAM,cACfM,EAAAA,cAACgC,EAAAA,EAAD,CAAStC,MAAM,aACfM,EAAAA,cAACyB,EAAAA,EAAD,CAAQ3B,UAAU,OAAOmC,KAAK,UAA9B,YAMRjC,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAAA,8UAKAA,EAAAA,cAAAA,IAAAA,KAAAA,wMAOZA,EAAAA,cAAAA,MAAAA,CAAKF,UAAU,wBACXE,EAAAA,cAACyB,EAAAA,EAAD,CAAQE,QAASd,GAAjB,gBAEJb,EAAAA,cAAAA,MAAAA,CAAKF,UAAU,wBACXE,EAAAA,cAAAA,KAAAA,CAAI+B,GAAG,eAAP,UACA/B,EAAAA,cAAAA,SAAAA,CAAQF,UAAU,QAAQmC,KAAK,SAASN,QAASd,OAKjEqB,KAzGS,8MA0GTvB,SAAUD,IACVyB,KACInC,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,KAAAA,iCACAA,EAAAA,cAAAA,IAAAA,KAAAA,uNAIAA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,OAAAA,KAAAA,gBADJ,YACsCA,EAAAA,cAAAA,OAAAA,KAAAA,OADtC,4BAGAA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,OAAAA,KAAAA,cADJ,YACoCA,EAAAA,cAAAA,OAAAA,KAAAA,OADpC,0BAGAA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,OAAAA,KAAAA,gBADJ,YACsCA,EAAAA,cAAAA,OAAAA,KAAAA,OADtC,6BAbR,iCAkBIA,EAAAA,cAACoC,EAAAA,EAAD,CAAaC,SAAS,OAAtB,wMAOArC,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,KAAAA,KAAAA,uBACAA,EAAAA,cAAAA,IAAAA,KAAAA,kOAIAA,EAAAA,cAACoC,EAAAA,EAAD,CAAaC,SAAS,OAAtB,iLA1HpB,C,+HCXaZ,EAAgCzB,EAAAA,KACzCA,EAAAA,YAAiB,WAA4D0B,GAAgD,IAAD,MAAxGY,MAAAA,OAAwG,MAAhG,UAAgG,EAArFrB,EAAqF,EAArFA,KAAMsB,EAA+E,EAA/EA,MAAUC,GAAqE,YACxH,OACIxC,EAAAA,cAAAA,SAAAA,OAAAA,OAAAA,CAAAA,EAAYwC,EAAZ,CAAmBd,IAAKA,EAAK5B,UAAW2C,IAAW,KAAM,MAAP,OAAqBH,GAArB,cAAwCrB,GAASA,EAAjD,EAAuD,aAAasB,EAApE,GAA6EC,EAAM1C,aAChI0C,EAAME,SAHnB,I,uOCgBEC,EAAsC,mBAEtCC,EAAoD,oBAAbC,SAA2BA,SAAW,KAGtEjB,EAA8B5B,EAAAA,KACvCA,EAAAA,YAAiB,WAAwH0B,GAA6C,IAAD,QAAjKL,UAAAA,OAAiK,SAA/IF,EAA+I,EAA/IA,SAAUF,EAAqI,EAArIA,KAAMC,EAA+H,EAA/HA,WAAYW,EAAmH,EAAnHA,SAAUC,EAAyG,EAAzGA,kBAAmBd,EAAsF,EAAtFA,SAAUf,EAA4E,EAA5EA,OAAWuC,GAAiE,YAC3KM,GAAoDC,EAAAA,EAAAA,GAAgBrB,GAC1E,EAAoC1B,EAAAA,UAAwB,GAArDgD,EAAP,KAAmBC,EAAnB,KAEMC,EAAkBlD,EAAAA,aACpB,SAACmD,GACG,OAAQA,EAAE1D,KACN,KAAK2D,EAAAA,EAAAA,OACDvB,GAAYA,EAASsB,GACrB,MACJ,KAAKC,EAAAA,EAAAA,IAEDD,EAAEE,iBACF,IAAMC,EAAyCC,MAAMC,KAAKV,EAAUhC,QAAQ2C,iBAAoCd,IAC1Ge,EAAkCJ,EAAkBK,OAE1D,GAAID,EAA0B,EAAG,CAAC,IAAD,EACvBE,EAA8BN,EAAkBO,QAAQhB,SAASiB,eAGvE,UAAAR,GADgCM,GADNT,EAAEY,UAAY,EAAI,GACsBL,GAA2BA,UAC7F,SAAmC3C,OAGvC,EAnBQ,GAsBpB,CAAC+B,EAAWjB,IAchB,OAXA7B,EAAAA,WAAgB,WAQZ,OAPIC,GACA+C,GAAcC,GAAc,GAC5BJ,SAASmB,KAAKC,UAAUC,IAAI,eAE5BrB,SAASmB,KAAKC,UAAUE,OAAO,cAG5B,kBAAMtB,SAASmB,KAAKC,UAAUE,OAAO,aAA5C,CARJ,GASG,CAAClE,IAEI2C,GAEFwB,EAAAA,EAAAA,cACIpE,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CAAAA,EACQwC,EADR,CAEI1C,UAAW2C,IACP,KACA,SAFiB,GAIb4B,KAAMpE,EACNqE,MAAOrE,IAAW+C,EAClB,iBAAkB7B,EAClB,cAAeH,GAAyB,YAAbA,IAA2BE,GAPzC,iBAQG,CAACF,IAAcA,GAAyB,YAAbA,IAA2BE,EARzD,EASb,oBAAoBA,EATP,GAWjBsB,EAAM1C,WAEVyE,KAAM/B,EAAM+B,MAAQ,SACpBC,SAAUhC,EAAMgC,WAAa,EAC7B,aAAW,OACX7C,QAAS,SAACwB,GACNX,EAAMb,SAAWa,EAAMb,QAAQwB,GAC/B,IAAMsB,EAAyBtB,EAAEsB,OAE7B3C,GAAqB2C,EAAOR,UAAUS,SAAS,OAASD,EAAOR,UAAUS,SAAS,UAClF5C,EAAkBqB,EAvB9B,EA0BIwB,eAAgB,SAACxB,GAGkF,IAAD,GAF9FX,EAAMmC,gBAAkBnC,EAAMmC,eAAexB,GAEzCjC,GAAcjB,GAAUoB,IAAcyB,EAAUhC,QAAQ4D,SAAS7B,SAASiB,kBAC1EhB,QAAA,EAAAA,EAAUhC,QAAQ8D,cAA2BjC,UAA7CG,IAAAA,GAAAA,EAA2E/B,QA9BvF,EAiCI8D,UAAW3B,IAEXlD,EAAAA,cAAAA,MAAAA,CACI0B,IAAKoB,EACLyB,KAAK,WACLzE,UAAW2C,IAAW,gBAAD,gBAA6BxB,GAASA,EAAtC,IACrB0D,eAAgB,WACqE,IAAD,EAA5E1E,GAAUoB,IAAcyB,EAAUhC,QAAQ4D,SAAS7B,SAASiB,iBAC5DhB,QAAA,EAAAA,EAAUhC,QAAQ8D,cAA2BjC,UAA7CG,IAAAA,GAAAA,EAA2E/B,QANvF,GAUIf,EAAAA,cAAAA,MAAAA,CAAKF,UAAU,iBAAiB0C,EAAME,YAG9CE,EAAaoB,MAlDjB,IAzCV,I,2ICtCJ,q4M","sources":["webpack://react-components-docs/./src/pages/docs/modal.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/Modal/Modal.tsx","webpack://react-components-docs/../lib/src/Modal/Modal.tsx?f630"],"sourcesContent":["import { CodeSnippet } from \"@common/CodeSnippet\";\nimport Docs from \"@common/Docs\";\nimport { Button } from \"@sebgroup/react-components/Button\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Modal, ModalPosition, ModalSize } from \"@sebgroup/react-components/Modal\";\nimport { Textbox } from \"@sebgroup/react-components/Textbox\";\nimport React from \"react\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Modal/Modal\");\nconst code: string = `<Modal toggle={toggle}>\n    <div className=\"modal-header\">Header content</div>\n    <div className=\"modal-body\">Modal content here</div>\n    <div className=\"modal-footer\">Footer content</div>\n</Modal>`;\n\nconst sizses: Array<DynamicFormOption<ModalSize>> = [\n    { key: \"sm\", label: \"sm\", value: \"sm\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"md\", label: \"md\", value: \"md\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"lg\", label: \"lg\", value: \"lg\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\nconst positions: Array<DynamicFormOption<ModalPosition>> = [\n    { label: \"default\", value: \"default\", key: \"default\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { label: \"left\", value: \"left\", key: \"left\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { label: \"right\", value: \"right\", key: \"bottom\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst NotificationPage: React.FC = () => {\n    const [toggle, setToggle] = React.useState<boolean>(false);\n    const toggleButtonRef: React.MutableRefObject<HTMLButtonElement> = React.useRef<HTMLButtonElement>();\n\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"size\", label: \"Size\", controlType: \"Radio\", options: sizses, initialValue: sizses[1].value },\n                { key: \"position\", label: \"Position\", controlType: \"Radio\", options: positions, initialValue: positions[0].value },\n                { key: \"centered\", label: \"centered\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"fullscreen\", label: \"fullscreen\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"trapfocus\", label: \"trapfocus\", description: \"Deprecated. Trap focus would be enabled by default.\", controlType: \"Checkbox\", initialValue: true },\n                {\n                    key: \"autoFocus\",\n                    label: \"autoFocus\",\n                    description: \"Automatically focus on first focusable element. Auto focus will be enabled by default.\",\n                    controlType: \"Checkbox\",\n                    initialValue: true,\n                },\n                { key: \"onEscape\", label: \"onEscape\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"onBackdropDismiss\", label: \"onBackdropDismiss\", controlType: \"Checkbox\", initialValue: false },\n            ],\n        },\n    ]);\n\n    const dismiss = React.useCallback(() => {\n        setToggle(false);\n        toggleButtonRef.current?.focus();\n    }, []);\n\n    const { position, size, fullscreen, centered, trapfocus, autoFocus } = controls as { [k: string]: any };\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <>\n                    <Button ref={toggleButtonRef} onClick={() => setToggle(!toggle)}>\n                        Toggle Modal\n                    </Button>\n                    <Modal\n                        toggle={toggle}\n                        {...{ position, size, fullscreen, centered, trapfocus, autoFocus }}\n                        onEscape={controls.onEscape ? dismiss : null}\n                        onBackdropDismiss={controls.onBackdropDismiss ? dismiss : null}\n                        aria-labelledby=\"modalHeader\"\n                        aria-describedby=\"modalDescription\"\n                    >\n                        <div id=\"modalDescription\" className=\"modal-body order-1\">\n                            {controls.trapfocus || controls.autoFocus ? (\n                                <form>\n                                    <fieldset>\n                                        <legend>Use tab to see focus trap in action</legend>\n                                        <Textbox label=\"Firstname\" />\n                                        <Textbox label=\"Lastname\" />\n                                        <Button className=\"mt-3\" type=\"button\">\n                                            Submit\n                                        </Button>\n                                    </fieldset>\n                                </form>\n                            ) : (\n                                <>\n                                    <p>\n                                        Voluptate beatae quo est perferendis quam ut illum repellat voluptatem. Saepe deleniti voluptas impedit quidem ut rerum. Voluptatibus laboriosam sit libero\n                                        deleniti accusamus debitis quia nobis alias. Quod voluptatem id et consequatur suscipit odio cumque vero ut. Ut ullam nisi qui. Doloremque libero nihil omnis\n                                        porro nihil quo.\n                                    </p>\n                                    <p>\n                                        Maxime recusandae cum. Quisquam facere quia corporis debitis. Illo itaque vel magni est dolores ut voluptatem nisi ullam. Ea nihil ipsa et dolor non illum iste\n                                        quis. Sunt dolores sunt non porro.\n                                    </p>\n                                </>\n                            )}\n                        </div>\n                        <div className=\"modal-footer order-2\">\n                            <Button onClick={dismiss}>Close Modal</Button>\n                        </div>\n                        <div className=\"modal-header order-0\">\n                            <h3 id=\"modalHeader\">Header</h3>\n                            <button className=\"close\" type=\"button\" onClick={dismiss} />\n                        </div>\n                    </Modal>\n                </>\n            }\n            code={code}\n            controls={renderForm()}\n            note={\n                <>\n                    <h3>Modal header, body and footer</h3>\n                    <p>\n                        Defining the modal's header, body and footer is done in a declarative style. Meaning that the developer is responsive for declaring these parts individually if needed. Remember\n                        to pass the following class names:\n                    </p>\n                    <ul>\n                        <li>\n                            <code>modal-header</code> for the <code>div</code> representing the header\n                        </li>\n                        <li>\n                            <code>modal-body</code> for the <code>div</code> representing the body\n                        </li>\n                        <li>\n                            <code>modal-footer</code> for the <code>div</code> representing the footer\n                        </li>\n                    </ul>\n                    An example can be found below:\n                    <CodeSnippet language=\"jsx\">\n                        {`<Modal>\n    <div className=\"modal-header\">Header content here</div>\n    <div className=\"modal-body\">Body content here</div>\n    <div className=\"modal-footer\">Footer content here</div>\n</Modal>`}\n                    </CodeSnippet>\n                    <hr />\n                    <h3>Header close button</h3>\n                    <p>\n                        To add a close button to the modal's header just pass a button of class \"close\" and it will be aligned correctly. You don't need to pass any content inside the button as it\n                        will be populated automatically with an &times; sign.\n                    </p>\n                    <CodeSnippet language=\"jsx\">\n                        {`<Modal>\n    <div className=\"modal-header\">\n        <h3>Modal header text</h3>\n        <button className=\"close\" type=\"button\" onClick={dismiss} />\n    </div>\n</Modal>`}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default NotificationPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","import classnames from \"classnames\";\nimport React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useCombinedRefs } from \"../hooks\";\nimport { Key } from \"../utils\";\nimport \"./modal.scss\";\n\nexport type ModalPosition = \"left\" | \"right\" | \"default\";\nexport type ModalSize = \"lg\" | \"md\" | \"sm\";\ntype FocusableElements = HTMLInputElement | HTMLButtonElement | HTMLAnchorElement;\n\nexport type ModalProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Centers the modal in the middle of the screen. Default is `false` */\n    centered?: boolean;\n    /** Size of modal `lg` | `md` | `sm` */\n    size?: ModalSize;\n    /** Toggle fullscreen modal, default is `false` */\n    fullscreen?: boolean;\n    /** Event triggered when escape key is triggered */\n    onEscape?: (e: KeyboardEvent) => void;\n    /** Event triggered when the backdrop is clicked */\n    onBackdropDismiss?: React.MouseEventHandler<HTMLDivElement>;\n    /** Modal position. Available positions: `left`, `right` */\n    position?: ModalPosition;\n    /** Modal toggle */\n    toggle?: boolean;\n    /** @deprecated since version 6.0.0. Trap focus would be enabled by default. */\n    trapFocus?: boolean;\n    /** Automatically focuses on the first focusable element in the modal dialog */\n    autoFocus?: boolean;\n};\n\nconst FOCUSABLE_ELEMENTS_SELECTOR: string = \"input, button, a\";\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\n/** The modal component provides a solid foundation for creating dialogs or slideout modals */\nexport const Modal: React.FC<ModalProps> = React.memo(\n    React.forwardRef(({ autoFocus = true, centered, size, fullscreen, onEscape, onBackdropDismiss, position, toggle, ...props }: ModalProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const dialogRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\n        const [isPristine, setIsPristine] = React.useState<boolean>(true);\n\n        const onDialogKeyDown = React.useCallback<(e: React.KeyboardEvent) => void>(\n            (e: React.KeyboardEvent) => {\n                switch (e.key) {\n                    case Key.Escape:\n                        onEscape && onEscape(e as unknown as KeyboardEvent);\n                        break;\n                    case Key.Tab:\n                        // focus on next focusable element and trap the focus within the dialog (focus trap)\n                        e.preventDefault();\n                        const focusableElements: FocusableElements[] = Array.from(dialogRef.current.querySelectorAll<FocusableElements>(FOCUSABLE_ELEMENTS_SELECTOR));\n                        const focusableElementsLength: number = focusableElements.length;\n\n                        if (focusableElementsLength > 0) {\n                            const currentFocusedIndex: number = focusableElements.indexOf(document.activeElement as FocusableElements);\n                            const direction: number = e.shiftKey ? -1 : 1;\n                            const nextFocusIndex: number = (currentFocusedIndex + direction + focusableElementsLength) % focusableElementsLength;\n                            focusableElements[nextFocusIndex]?.focus();\n                        }\n\n                        break;\n                }\n            },\n            [dialogRef, onEscape]\n        );\n\n        React.useEffect(() => {\n            if (toggle) {\n                isPristine && setIsPristine(false);\n                document.body.classList.add(\"modal-open\");\n            } else {\n                document.body.classList.remove(\"modal-open\");\n            }\n\n            return () => document.body.classList.remove(\"modal-open\");\n        }, [toggle]);\n\n        return !safeDocument\n            ? null\n            : createPortal(\n                  <div\n                      {...props}\n                      className={classnames(\n                          \"rc\",\n                          \"modal\",\n                          {\n                              show: toggle,\n                              hide: !toggle && !isPristine,\n                              \"modal-centered\": centered,\n                              \"modal-aside\": position && position !== \"default\" && !fullscreen,\n                              [`modal-aside-${[position]}`]: position && position !== \"default\" && !fullscreen,\n                              \"modal-fullscreen\": fullscreen,\n                          },\n                          props.className\n                      )}\n                      role={props.role || \"dialog\"}\n                      tabIndex={props.tabIndex || -1}\n                      aria-modal=\"true\"\n                      onClick={(e) => {\n                          props.onClick && props.onClick(e);\n                          const target: HTMLDivElement = e.target as any;\n\n                          if (onBackdropDismiss && target.classList.contains(\"rc\") && target.classList.contains(\"modal\")) {\n                              onBackdropDismiss(e);\n                          }\n                      }}\n                      onAnimationEnd={(e) => {\n                          props.onAnimationEnd && props.onAnimationEnd(e);\n\n                          if (fullscreen && toggle && autoFocus && !dialogRef.current.contains(document.activeElement)) {\n                              dialogRef.current.querySelector<HTMLElement>(FOCUSABLE_ELEMENTS_SELECTOR)?.focus();\n                          }\n                      }}\n                      onKeyDown={onDialogKeyDown}\n                  >\n                      <div\n                          ref={dialogRef}\n                          role=\"document\"\n                          className={classnames(\"modal-dialog\", { [`modal-${size}`]: size })}\n                          onAnimationEnd={() => {\n                              if (toggle && autoFocus && !dialogRef.current.contains(document.activeElement)) {\n                                  dialogRef.current.querySelector<HTMLElement>(FOCUSABLE_ELEMENTS_SELECTOR)?.focus();\n                              }\n                          }}\n                      >\n                          <div className=\"modal-content\">{props.children}</div>\n                      </div>\n                  </div>,\n                  safeDocument.body\n              );\n    })\n);\n","export default \"import classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport { createPortal } from \\\"react-dom\\\";\\nimport { useCombinedRefs } from \\\"../hooks\\\";\\nimport { Key } from \\\"../utils\\\";\\nimport \\\"./modal.scss\\\";\\n\\nexport type ModalPosition = \\\"left\\\" | \\\"right\\\" | \\\"default\\\";\\nexport type ModalSize = \\\"lg\\\" | \\\"md\\\" | \\\"sm\\\";\\ntype FocusableElements = HTMLInputElement | HTMLButtonElement | HTMLAnchorElement;\\n\\nexport type ModalProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Centers the modal in the middle of the screen. Default is `false` */\\n    centered?: boolean;\\n    /** Size of modal `lg` | `md` | `sm` */\\n    size?: ModalSize;\\n    /** Toggle fullscreen modal, default is `false` */\\n    fullscreen?: boolean;\\n    /** Event triggered when escape key is triggered */\\n    onEscape?: (e: KeyboardEvent) => void;\\n    /** Event triggered when the backdrop is clicked */\\n    onBackdropDismiss?: React.MouseEventHandler<HTMLDivElement>;\\n    /** Modal position. Available positions: `left`, `right` */\\n    position?: ModalPosition;\\n    /** Modal toggle */\\n    toggle?: boolean;\\n    /** @deprecated since version 6.0.0. Trap focus would be enabled by default. */\\n    trapFocus?: boolean;\\n    /** Automatically focuses on the first focusable element in the modal dialog */\\n    autoFocus?: boolean;\\n};\\n\\nconst FOCUSABLE_ELEMENTS_SELECTOR: string = \\\"input, button, a\\\";\\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\\nconst safeDocument: Document | null = typeof document !== \\\"undefined\\\" ? document : null;\\n\\n/** The modal component provides a solid foundation for creating dialogs or slideout modals */\\nexport const Modal: React.FC<ModalProps> = React.memo(\\n    React.forwardRef(({ autoFocus = true, centered, size, fullscreen, onEscape, onBackdropDismiss, position, toggle, ...props }: ModalProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const dialogRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\\n        const [isPristine, setIsPristine] = React.useState<boolean>(true);\\n\\n        const onDialogKeyDown = React.useCallback<(e: React.KeyboardEvent) => void>(\\n            (e: React.KeyboardEvent) => {\\n                switch (e.key) {\\n                    case Key.Escape:\\n                        onEscape && onEscape(e as unknown as KeyboardEvent);\\n                        break;\\n                    case Key.Tab:\\n                        // focus on next focusable element and trap the focus within the dialog (focus trap)\\n                        e.preventDefault();\\n                        const focusableElements: FocusableElements[] = Array.from(dialogRef.current.querySelectorAll<FocusableElements>(FOCUSABLE_ELEMENTS_SELECTOR));\\n                        const focusableElementsLength: number = focusableElements.length;\\n\\n                        if (focusableElementsLength > 0) {\\n                            const currentFocusedIndex: number = focusableElements.indexOf(document.activeElement as FocusableElements);\\n                            const direction: number = e.shiftKey ? -1 : 1;\\n                            const nextFocusIndex: number = (currentFocusedIndex + direction + focusableElementsLength) % focusableElementsLength;\\n                            focusableElements[nextFocusIndex]?.focus();\\n                        }\\n\\n                        break;\\n                }\\n            },\\n            [dialogRef, onEscape]\\n        );\\n\\n        React.useEffect(() => {\\n            if (toggle) {\\n                isPristine && setIsPristine(false);\\n                document.body.classList.add(\\\"modal-open\\\");\\n            } else {\\n                document.body.classList.remove(\\\"modal-open\\\");\\n            }\\n\\n            return () => document.body.classList.remove(\\\"modal-open\\\");\\n        }, [toggle]);\\n\\n        return !safeDocument\\n            ? null\\n            : createPortal(\\n                  <div\\n                      {...props}\\n                      className={classnames(\\n                          \\\"rc\\\",\\n                          \\\"modal\\\",\\n                          {\\n                              show: toggle,\\n                              hide: !toggle && !isPristine,\\n                              \\\"modal-centered\\\": centered,\\n                              \\\"modal-aside\\\": position && position !== \\\"default\\\" && !fullscreen,\\n                              [`modal-aside-${[position]}`]: position && position !== \\\"default\\\" && !fullscreen,\\n                              \\\"modal-fullscreen\\\": fullscreen,\\n                          },\\n                          props.className\\n                      )}\\n                      role={props.role || \\\"dialog\\\"}\\n                      tabIndex={props.tabIndex || -1}\\n                      aria-modal=\\\"true\\\"\\n                      onClick={(e) => {\\n                          props.onClick && props.onClick(e);\\n                          const target: HTMLDivElement = e.target as any;\\n\\n                          if (onBackdropDismiss && target.classList.contains(\\\"rc\\\") && target.classList.contains(\\\"modal\\\")) {\\n                              onBackdropDismiss(e);\\n                          }\\n                      }}\\n                      onAnimationEnd={(e) => {\\n                          props.onAnimationEnd && props.onAnimationEnd(e);\\n\\n                          if (fullscreen && toggle && autoFocus && !dialogRef.current.contains(document.activeElement)) {\\n                              dialogRef.current.querySelector<HTMLElement>(FOCUSABLE_ELEMENTS_SELECTOR)?.focus();\\n                          }\\n                      }}\\n                      onKeyDown={onDialogKeyDown}\\n                  >\\n                      <div\\n                          ref={dialogRef}\\n                          role=\\\"document\\\"\\n                          className={classnames(\\\"modal-dialog\\\", { [`modal-${size}`]: size })}\\n                          onAnimationEnd={() => {\\n                              if (toggle && autoFocus && !dialogRef.current.contains(document.activeElement)) {\\n                                  dialogRef.current.querySelector<HTMLElement>(FOCUSABLE_ELEMENTS_SELECTOR)?.focus();\\n                              }\\n                          }}\\n                      >\\n                          <div className=\\\"modal-content\\\">{props.children}</div>\\n                      </div>\\n                  </div>,\\n                  safeDocument.body\\n              );\\n    })\\n);\\n\";"],"names":["importString","require","sizses","key","label","value","additionalProps","wrapperProps","className","positions","React","toggle","setToggle","toggleButtonRef","useDynamicForm","items","controlType","options","initialValue","description","renderForm","controls","state","dismiss","current","focus","position","size","fullscreen","centered","trapfocus","autoFocus","Docs","mainFile","example","Button","ref","onClick","Modal","onEscape","onBackdropDismiss","id","Textbox","type","code","note","CodeSnippet","language","theme","block","props","classnames","children","FOCUSABLE_ELEMENTS_SELECTOR","safeDocument","document","dialogRef","useCombinedRefs","isPristine","setIsPristine","onDialogKeyDown","e","Key","preventDefault","focusableElements","Array","from","querySelectorAll","focusableElementsLength","length","currentFocusedIndex","indexOf","activeElement","shiftKey","body","classList","add","remove","createPortal","show","hide","role","tabIndex","target","contains","onAnimationEnd","querySelector","onKeyDown"],"sourceRoot":""}